<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2025-05-09T06:47:03.189Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础06-ViewGroup</title>
    <link href="https://jingtianer.github.io/home/2025/05/09/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8006-ViewGroup/"/>
    <id>https://jingtianer.github.io/home/2025/05/09/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8006-ViewGroup/</id>
    <published>2025-05-09T13:15:36.000Z</published>
    <updated>2025-05-09T06:47:03.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><pre class="mermaid">graph TD    A[开始] --> B{条件判断}    B -->|是| C[执行操作]    B -->|否| D[结束]</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h2&gt;&lt;pre class=&quot;mermaid&quot;&gt;graph TD
    A[开始] --&gt; B{条件判断}
    B --&gt;|是| </summary>
      
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>00-Java数组遍历性能对比</title>
    <link href="https://jingtianer.github.io/home/2024/09/13/Java%E5%9F%BA%E7%A1%80/00-Java%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <id>https://jingtianer.github.io/home/2024/09/13/Java%E5%9F%BA%E7%A1%80/00-Java%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</id>
    <published>2024-09-13T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三种遍历方式性能对比"><a href="#三种遍历方式性能对比" class="headerlink" title="三种遍历方式性能对比"></a>三种遍历方式性能对比</h2><ol><li><p>循环与数组的<code>length</code>比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">zero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            sum ^= objs[i].hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将数组<code>length</code>存在方法栈中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> objs.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum ^= objs[i].hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for-each循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">two</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : objs) &#123;</span><br><span class="line">            sum ^= obj.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试速度"><a href="#测试速度" class="headerlink" title="测试速度"></a>测试速度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">run</span><span class="params">(IntSupplier f)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            result = f.getAsInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result + <span class="string">&quot;, time = &quot;</span> + (end - start) / <span class="number">1000.0</span>);</span><br><span class="line">        <span class="keyword">return</span>  end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            objs[i] = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            objs[i].hashCode(); <span class="comment">// 首次计算hashcode更慢，先缓存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">zeroTime</span> <span class="operator">=</span> run(JavaMain::zero);</span><br><span class="line">            <span class="type">long</span> <span class="variable">oneTime</span> <span class="operator">=</span> run(JavaMain::one);</span><br><span class="line">            <span class="type">long</span> <span class="variable">twoTime</span> <span class="operator">=</span> run(JavaMain::two);</span><br><span class="line">            System.out.printf(<span class="string">&quot;2比1快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)oneTime - twoTime) / oneTime * <span class="number">100</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;2比0快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)zeroTime - twoTime) / zeroTime * <span class="number">100</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;1比0快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)zeroTime - oneTime) / oneTime * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = 360970567, time = 1.393</span><br><span class="line">result = 360970567, time = 1.174</span><br><span class="line">result = 360970567, time = 0.886</span><br><span class="line">2比1快: 24.53%</span><br><span class="line">2比0快: 36.40%</span><br><span class="line">1比0快: 18.65%</span><br></pre></td></tr></table></figure><h2 id="对比字节码"><a href="#对比字节码" class="headerlink" title="对比字节码"></a>对比字节码</h2><p>使用<code>javap -c</code>查看字节🐴</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static int zero();</span><br><span class="line">Code:</span><br><span class="line">    0: iconst_0</span><br><span class="line">    1: istore_0</span><br><span class="line">    2: iconst_0</span><br><span class="line">    3: istore_1</span><br><span class="line">    4: iload_1</span><br><span class="line">    5: getstatic     #7                  // Field objs:[Ljava/lang/Object;</span><br><span class="line">    8: arraylength</span><br><span class="line">    9: if_icmpge     29</span><br><span class="line">    12: iload_0</span><br><span class="line">    13: getstatic     #7                  // Field objs:[Ljava/lang/Object;</span><br><span class="line">    16: iload_1</span><br><span class="line">    17: aaload</span><br><span class="line">    18: invokevirtual #13                 // Method java/lang/Object.hashCode:()I</span><br><span class="line">    21: ixor</span><br><span class="line">    22: istore_0</span><br><span class="line">    23: iinc          1, 1</span><br><span class="line">    26: goto          4</span><br><span class="line">    29: iload_0</span><br><span class="line">    30: ireturn</span><br></pre></td></tr></table></figure><ul><li>数组的<code>length</code>并不是一个字段，没有通过<code>getfield</code>获取</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">static int one();</span><br><span class="line">Code:</span><br><span class="line">    0: iconst_0</span><br><span class="line">    1: istore_0</span><br><span class="line">    2: getstatic     #7                  // Field objs:[Ljava/lang/Object;</span><br><span class="line">    5: arraylength</span><br><span class="line">    6: istore_1</span><br><span class="line">    7: iconst_0</span><br><span class="line">    8: istore_2</span><br><span class="line">    9: iload_2</span><br><span class="line">    10: iload_1</span><br><span class="line">    11: if_icmpge     31</span><br><span class="line">    14: iload_0</span><br><span class="line">    15: getstatic     #7                  // Field objs:[Ljava/lang/Object;</span><br><span class="line">    18: iload_2</span><br><span class="line">    19: aaload</span><br><span class="line">    20: invokevirtual #13                 // Method java/lang/Object.hashCode:()I</span><br><span class="line">    23: ixor</span><br><span class="line">    24: istore_0</span><br><span class="line">    25: iinc          2, 1</span><br><span class="line">    28: goto          9</span><br><span class="line">    31: iload_0</span><br><span class="line">    32: ireturn</span><br></pre></td></tr></table></figure><ul><li>每次使用<code>arraylength</code>获取数组长度会更慢，具体<code>arraylength</code>做了什么可以看这篇文章<a href="https://blog.csdn.net/scjava/article/details/108219216">JVM是如何得到数组长度的</a></li><li><code>zero</code>和<code>one</code>对比<ul><li><code>zero</code>每次循环前，要依次执行<code>iload_1</code>, <code>getstatic</code>, <code>arraylength</code>, <code>if_icmpge</code></li><li><code>one</code>每次循环前，要依次执行<code>iload_2</code>, <code>iload_1</code>, <code>if_icmpge</code></li><li><code>one</code>只需要虚拟机读取两个操作数进行比较就可以，而<code>zero</code>需要通过<code>getstatic</code>获取数组对象，<code>arraylength</code>获取长度</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static int two();</span><br><span class="line">Code:</span><br><span class="line">    0: iconst_0</span><br><span class="line">    1: istore_0</span><br><span class="line">    2: getstatic     #7                  // Field objs:[Ljava/lang/Object;</span><br><span class="line">    5: astore_1</span><br><span class="line">    6: aload_1</span><br><span class="line">    7: arraylength</span><br><span class="line">    8: istore_2</span><br><span class="line">    9: iconst_0</span><br><span class="line">    10: istore_3</span><br><span class="line">    11: iload_3</span><br><span class="line">    12: iload_2</span><br><span class="line">    13: if_icmpge     35</span><br><span class="line">    16: aload_1</span><br><span class="line">    17: iload_3</span><br><span class="line">    18: aaload</span><br><span class="line">    19: astore        4</span><br><span class="line">    21: iload_0</span><br><span class="line">    22: aload         4</span><br><span class="line">    24: invokevirtual #13                 // Method java/lang/Object.hashCode:()I</span><br><span class="line">    27: ixor</span><br><span class="line">    28: istore_0</span><br><span class="line">    29: iinc          3, 1</span><br><span class="line">    32: goto          11</span><br><span class="line">    35: iload_0</span><br><span class="line">    36: ireturn</span><br></pre></td></tr></table></figure><ul><li><code>one</code>和<code>two</code>对比<ul><li>在循环前，两者都是通过<code>iload</code>读取数组长度和当前index对比</li><li>在循环体中<ul><li><code>one</code>每次需要<code>getstatic</code>获取数组对象，然后根据偏移量取出对应位置的对象</li><li><code>two</code>在循环开始前，就将数组对象存在本地方法栈中，不需要使用<code>getstatic</code>来获取数组对象</li></ul></li></ul></li></ul><blockquote><p>强烈怀疑是<code>getstatic</code>性能过于拉胯，导致三者循环速度差异大</p></blockquote><h2 id="将数组对象作为参数传递到函数中"><a href="#将数组对象作为参数传递到函数中" class="headerlink" title="将数组对象作为参数传递到函数中"></a>将数组对象作为参数传递到函数中</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">zero</span><span class="params">(Object[] objs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            sum ^= objs[i].hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">one</span><span class="params">(Object[] objs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> objs.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum ^= objs[i].hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">two</span><span class="params">(Object[] objs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : objs) &#123;</span><br><span class="line">            sum ^= obj.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">run</span><span class="params">(Function&lt;Object[], Integer&gt; f)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            result = f.apply(objs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result + <span class="string">&quot;, time = &quot;</span> + (end - start) / <span class="number">1000.0</span>);</span><br><span class="line">        <span class="keyword">return</span>  end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            objs[i] = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            objs[i].hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">zeroTime</span> <span class="operator">=</span> run(JavaMain::zero);</span><br><span class="line">            <span class="type">long</span> <span class="variable">oneTime</span> <span class="operator">=</span> run(JavaMain::one);</span><br><span class="line">            <span class="type">long</span> <span class="variable">twoTime</span> <span class="operator">=</span> run(JavaMain::two);</span><br><span class="line">            System.out.printf(<span class="string">&quot;2比1快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)oneTime - twoTime) / oneTime * <span class="number">100</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;2比0快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)zeroTime - twoTime) / zeroTime * <span class="number">100</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;1比0快: %.2f%%\n&quot;</span>, ((<span class="type">double</span>)zeroTime - oneTime) / oneTime * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较结果"><a href="#比较结果" class="headerlink" title="比较结果"></a>比较结果</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">result = 360970567, time = 0.85</span><br><span class="line">result = 360970567, time = 0.871</span><br><span class="line">result = 360970567, time = 0.873</span><br><span class="line">2比1快: -0.23%</span><br><span class="line">2比0快: -2.71%</span><br><span class="line">1比0快: -2.41%</span><br><span class="line">result = 360970567, time = 0.864</span><br><span class="line">result = 360970567, time = 0.847</span><br><span class="line">result = 360970567, time = 0.849</span><br><span class="line">2比1快: -0.24%</span><br><span class="line">2比0快: 1.74%</span><br><span class="line">1比0快: 2.01%</span><br><span class="line">result = 360970567, time = 0.851</span><br><span class="line">result = 360970567, time = 0.849</span><br><span class="line">result = 360970567, time = 0.862</span><br><span class="line">2比1快: -1.53%</span><br><span class="line">2比0快: -1.29%</span><br><span class="line">1比0快: 0.24%</span><br></pre></td></tr></table></figure><blockquote><p>三种方法难分伯仲</p></blockquote><h3 id="字节码对比"><a href="#字节码对比" class="headerlink" title="字节码对比"></a>字节码对比</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">Compiled from &quot;JavaMain.java&quot;</span><br><span class="line">public class test.JavaMain &#123;</span><br><span class="line">  static java.lang.Object[] objs;</span><br><span class="line"></span><br><span class="line">  public test.JavaMain();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  static int zero(java.lang.Object[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: iconst_0</span><br><span class="line">       3: istore_2</span><br><span class="line">       4: iload_2</span><br><span class="line">       5: aload_0</span><br><span class="line">       6: arraylength</span><br><span class="line">       7: if_icmpge     25</span><br><span class="line">      10: iload_1</span><br><span class="line">      11: aload_0</span><br><span class="line">      12: iload_2</span><br><span class="line">      13: aaload</span><br><span class="line">      14: invokevirtual #7                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">      17: ixor</span><br><span class="line">      18: istore_1</span><br><span class="line">      19: iinc          2, 1</span><br><span class="line">      22: goto          4</span><br><span class="line">      25: iload_1</span><br><span class="line">      26: ireturn</span><br><span class="line"></span><br><span class="line">  static int one(java.lang.Object[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: aload_0</span><br><span class="line">       3: arraylength</span><br><span class="line">       4: istore_2</span><br><span class="line">       5: iconst_0</span><br><span class="line">       6: istore_3</span><br><span class="line">       7: iload_3</span><br><span class="line">       8: iload_2</span><br><span class="line">       9: if_icmpge     27</span><br><span class="line">      12: iload_1</span><br><span class="line">      13: aload_0</span><br><span class="line">      14: iload_3</span><br><span class="line">      15: aaload</span><br><span class="line">      16: invokevirtual #7                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">      19: ixor</span><br><span class="line">      20: istore_1</span><br><span class="line">      21: iinc          3, 1</span><br><span class="line">      24: goto          7</span><br><span class="line">      27: iload_1</span><br><span class="line">      28: ireturn</span><br><span class="line"></span><br><span class="line">  static int two(java.lang.Object[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: aload_0</span><br><span class="line">       3: astore_2</span><br><span class="line">       4: aload_2</span><br><span class="line">       5: arraylength</span><br><span class="line">       6: istore_3</span><br><span class="line">       7: iconst_0</span><br><span class="line">       8: istore        4</span><br><span class="line">      10: iload         4</span><br><span class="line">      12: iload_3</span><br><span class="line">      13: if_icmpge     36</span><br><span class="line">      16: aload_2</span><br><span class="line">      17: iload         4</span><br><span class="line">      19: aaload</span><br><span class="line">      20: astore        5</span><br><span class="line">      22: iload_1</span><br><span class="line">      23: aload         5</span><br><span class="line">      25: invokevirtual #7                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">      28: ixor</span><br><span class="line">      29: istore_1</span><br><span class="line">      30: iinc          4, 1</span><br><span class="line">      33: goto          10</span><br><span class="line">      36: iload_1</span><br><span class="line">      37: ireturn</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    Code:</span><br><span class="line">       0: ldc           #77                 // int 10000000</span><br><span class="line">       2: anewarray     #2                  // class java/lang/Object</span><br><span class="line">       5: putstatic     #17                 // Field objs:[Ljava/lang/Object;</span><br><span class="line">       8: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>三者区别不大，总体耗时区别也不大，可见<code>arraylength</code>指令并不是性能瓶颈，而是<code>getstatic</code>有较大影响<br>同样，我也测试了不通过函数参数传递，而将数组和三个方法改成非<code>static</code>修饰的，三者差异较大，可见<code>getField</code>指令的性能开销也要比<code>load</code>大</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在遍历数组时，不论是使用数组的<code>length</code>，提前存储数组长度，还是使用<code>for-each</code>，差别不大，重要的是先将数组对象放到本地方法栈，避免频繁执行<code>getstatic</code>和<code>getfield</code>指令，造成性能影响。</p><p>和八股<a href="https://github.com/francistao/LearningNotes/blob/master/Part1/Android/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md">安卓性能优化</a>所归咎的原因稍有不同。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;三种遍历方式性能对比&quot;&gt;&lt;a href=&quot;#三种遍历方式性能对比&quot; class=&quot;headerlink&quot; title=&quot;三种遍历方式性能对比&quot;&gt;&lt;/a&gt;三种遍历方式性能对比&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;循环与数组的&lt;code&gt;length&lt;/code&gt;比较&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JavaMain&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Object[] objs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; objs.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum ^= objs[i].hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将数组&lt;code&gt;length&lt;/code&gt;存在方法栈中&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JavaMain&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Object[] objs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; objs.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum ^= objs[i].hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for-each循环&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JavaMain&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Object[] objs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Object obj : objs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum ^= obj.hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;测试速度&quot;&gt;&lt;a href=&quot;#测试速度&quot; class=&quot;headerlink&quot; title=&quot;测试速度&quot;&gt;&lt;/a&gt;测试速度&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JavaMain&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Object[] objs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IntSupplier f)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = f.getAsInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;result = &amp;quot;&lt;/span&gt; + result + &lt;span class=&quot;string&quot;&gt;&amp;quot;, time = &amp;quot;&lt;/span&gt; + (end - start) / &lt;span class=&quot;number&quot;&gt;1000.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  end - start;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; objs.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            objs[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            objs[i].hashCode(); &lt;span class=&quot;comment&quot;&gt;// 首次计算hashcode更慢，先缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;zeroTime&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; run(JavaMain::zero);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;oneTime&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; run(JavaMain::one);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;twoTime&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; run(JavaMain::two);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;2比1快: %.2f%%&#92;n&amp;quot;&lt;/span&gt;, ((&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)oneTime - twoTime) / oneTime * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;2比0快: %.2f%%&#92;n&amp;quot;&lt;/span&gt;, ((&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)zeroTime - twoTime) / zeroTime * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;1比0快: %.2f%%&#92;n&amp;quot;&lt;/span&gt;, ((&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)zeroTime - oneTime) / oneTime * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h3&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;result = 360970567, time = 1.393&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = 360970567, time = 1.174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = 360970567, time = 0.886&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2比1快: 24.53%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2比0快: 36.40%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1比0快: 18.65%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://jingtianer.github.io/home/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://jingtianer.github.io/home/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-38</title>
    <link href="https://jingtianer.github.io/home/2024/09/09/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9338/"/>
    <id>https://jingtianer.github.io/home/2024/09/09/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9338/</id>
    <published>2024-09-09T03:14:34.000Z</published>
    <updated>2025-04-15T02:37:55.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2181-合并零之间的节点"><a href="#2181-合并零之间的节点" class="headerlink" title="2181. 合并零之间的节点"></a>2181. 合并零之间的节点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeNodes</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        ListNode dummy;</span><br><span class="line">        ListNode *move_dummy = &amp;dummy;</span><br><span class="line">        ListNode *move = head;</span><br><span class="line">        <span class="keyword">while</span>(move-&gt;next) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(move-&gt;next &amp;&amp; move-&gt;next-&gt;val != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += move-&gt;next-&gt;val;</span><br><span class="line">                move = move-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            move-&gt;val = sum;</span><br><span class="line">            move_dummy-&gt;next = move;</span><br><span class="line">            move_dummy = move_dummy-&gt;next;</span><br><span class="line">            move = move-&gt;next;</span><br><span class="line">            move_dummy-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">merged_array</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = len - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(nums[i]) &gt; <span class="built_in">abs</span>(nums[j])) &#123;</span><br><span class="line">                merged_array[k] = nums[i] * nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                merged_array[k] = nums[j] * nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged_array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>按照绝对值归并</li><li>双指针，从左右两端开始移动，</li></ul><h2 id="3174-清除数字"><a href="#3174-清除数字" class="headerlink" title="3174. 清除数字"></a>3174. 清除数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">clearDigits</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>模拟</li></ul><h2 id="2860-让所有学生保持开心的分组方法数"><a href="#2860-让所有学生保持开心的分组方法数" class="headerlink" title="2860. 让所有学生保持开心的分组方法数"></a>2860. 让所有学生保持开心的分组方法数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums) &#123;</span><br><span class="line">            cnt[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [num, total] : cnt) &#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(num);</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> preSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            preSum += cnt[arr[i]];</span><br><span class="line">            <span class="keyword">if</span>(preSum &lt; arr[i+<span class="number">1</span>] &amp;&amp; preSum &gt; arr[i]) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans + <span class="number">1</span> + (arr[<span class="number">0</span>] == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>假设选择了第i个学生，他的开心条件是<code>cnt &gt; nums[i]</code>，那么<ul><li>所有满足<code>nums[j] &lt;= nums[i]</code>的学生都必须被选择</li><li>如果存在学生<code>j</code>，<code>nums[j] == nums[i] + 1</code>，<code>nums[k] == nums[j]</code>那么满足的学生k都必须被选择</li><li>其他情况都不需要考虑，是一定无法满足条件的</li></ul></li><li>只要统计每个num对应多少学生，按照num排序，</li><li>对于第i个num，如果选择他，他之前的学生必须选择<ul><li>如果num[i+1] &#x3D;&#x3D; num[i] + 1，那么无法满足，是空集</li><li>如果num[i+1] &gt; num[i] + 1，那么只要累计学生足够条件，就能满足，满足的情景+1</li></ul></li><li>利用前缀和，记录num以及小于num的学生数，学生数大于num</li></ul><h2 id="3176-求出最长好子序列-I"><a href="#3176-求出最长好子序列-I" class="headerlink" title="3176. 求出最长好子序列 I"></a>3176. 求出最长好子序列 I</h2><h3 id="二维dp"><a href="#二维dp" class="headerlink" title="二维dp"></a>二维dp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k + <span class="number">1</span>));</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] == nums[j]) &#123;</span><br><span class="line">                    dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i][<span class="number">0</span>], dp[j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, dp[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>; m &lt; i; m++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i] == nums[m]) &#123;</span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[m][j] + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[m][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>dp[i][j]</code>代表到第<code>i</code>个数为止，恰好有<code>j</code>个不同的数的长度</li><li>转移方程<ul><li>如果<code>nums[i] == nums[m]</code>，不同的数相同，<code>j</code>相同, <code>dp[i][j] = max(dp[i][j], dp[m]p[j])</code></li><li>如果<code>nums[i] != nums[m]</code>，不同的数相同，<code>j</code>不同，相差1, <code>dp[i][j] = max(dp[i][j], dp[m][j-1])</code></li></ul></li></ul><h2 id="2552-统计上升四元组"><a href="#2552-统计上升四元组" class="headerlink" title="2552. 统计上升四元组"></a>2552. 统计上升四元组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countQuadruplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">numsCnt</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                numsCnt[i][nums[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                numsCnt[i][j] += numsCnt[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> smallerThanMe = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> cntOfBiggerAfterMe = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt; nums[i]) &#123;</span><br><span class="line">                    cntOfBiggerAfterMe += (n - i - <span class="number">1</span>) - numsCnt[i][nums[j]];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    ans += cntOfBiggerAfterMe;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>想用单调递增栈，这样栈内两个相邻元素之间都是比两个数大的，在找到第三个元素后面有多少比第二个元素大的数，就可以了</li><li>这样只比栈顶两个元素会导致遗漏，直接找<code>nums[i]</code>前比<code>nums[i]</code>小的数<code>nums[j1]</code>，和他们之间比<code>nums[i]</code>大的数<code>nums[j]</code>，再找出每个数在i后有多少比<code>nums[j]</code>大的数，可以统计到到比<code>nums[j1]</code>还小的数的组合情况</li><li><code>numsCnt[i][j]</code>表示在开区间<code>(i, n)</code>中，有多少比<code>nums[j]</code>大的数</li></ul><h2 id="2555-两个线段获得的最多奖品"><a href="#2555-两个线段获得的最多奖品" class="headerlink" title="2555. 两个线段获得的最多奖品"></a>2555. 两个线段获得的最多奖品</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximizeWin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prizePositions, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = prizePositions.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; windowSum;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; windowStart;</span><br><span class="line">        <span class="type">int</span> prizeCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> start = prizePositions[i];</span><br><span class="line">            <span class="type">int</span> end = prizePositions[i] + k;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; prizePositions[j] &lt;= end) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                prizeCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            windowSum.<span class="built_in">push_back</span>(prizeCnt);</span><br><span class="line">            windowStart.<span class="built_in">push_back</span>(start);</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; prizePositions[i] == start) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                prizeCnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> windowSize = windowSum.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> curMaxTail = windowSum[windowSize - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> curMaxStart = windowStart[windowSize - <span class="number">1</span>];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxTail</span><span class="params">(windowSize)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = windowSize - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            maxTail[i] = curMaxTail;</span><br><span class="line">            <span class="keyword">if</span>(windowSum[i] &gt; curMaxTail) &#123;</span><br><span class="line">                curMaxTail = windowSum[i];</span><br><span class="line">                curMaxStart = windowStart[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; windowSize; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; windowSize &amp;&amp; windowStart[i] + k &gt;= windowStart[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; n) ans = <span class="built_in">max</span>(ans, windowSum[i] + maxTail[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>虽然两个线段可以重叠，但是重叠部分的奖品不能重复拿，所以问题就变成了长度最长为k的情况下，不想交的两个线段内礼物总数和最大的情况</li><li>找出所有长度为k的线段的礼物数（<code>start</code>相同的不重复记录），记录在<code>windowSum</code>中，用<code>windowStart</code>记录区间的起点</li><li>用<code>maxTail[i]</code>记录起始点为<code>windowStart[i]</code>的线段后方，礼物多的线段的礼物个数</li><li>最后对于每一个线段，双指针找到不重叠的下一个线段及其后面的最大礼物数，加起来，求最大值</li></ul><h2 id="2332-坐上公交的最晚时间"><a href="#2332-坐上公交的最晚时间" class="headerlink" title="2332. 坐上公交的最晚时间"></a>2332. 坐上公交的最晚时间</h2><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">latestTimeCatchTheBus</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; buses, vector&lt;<span class="type">int</span>&gt;&amp; passengers, <span class="type">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(buses.<span class="built_in">begin</span>(), buses.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(passengers.<span class="built_in">begin</span>(), passengers.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> busNum = buses.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> passengersNum = passengers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">insertPoints</span><span class="params">(passengersNum)</span></span>;</span><br><span class="line">        insertPoints[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; passengersNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(passengers[i] - passengers[i - <span class="number">1</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                insertPoints[i] = i; <span class="comment">// 不和前一个连号，更新最晚上车位置</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                insertPoints[i] = insertPoints[i - <span class="number">1</span>]; <span class="comment">// 上车时间不能和别人重复，如果连号，找到前面第一个不连号的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> lastestTime = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; busNum &amp;&amp; j &lt; passengersNum; i++) &#123; <span class="comment">// 遍历公交车</span></span><br><span class="line">            <span class="type">int</span> firstCantGetOn = <span class="built_in">upper_bound</span>(passengers.<span class="built_in">begin</span>() + j, passengers.<span class="built_in">end</span>(), buses[i]) - passengers.<span class="built_in">begin</span>(); <span class="comment">// 二分找到第一个，时间上无法上车的人</span></span><br><span class="line">            <span class="type">int</span> getOnCnt = <span class="built_in">min</span>(firstCantGetOn - j, capacity);</span><br><span class="line">            <span class="keyword">if</span>(getOnCnt == <span class="number">0</span> &amp;&amp; capacity &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果没有人能上，且车容量大于0</span></span><br><span class="line">                lastestTime = buses[i]; <span class="comment">// 最晚就是公交车到站时间</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(getOnCnt &lt; capacity &amp;&amp; buses[i] - passengers[j + getOnCnt - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果上车数量小于容量，最晚可以在发车前到达，且最后一个人不是在发车时到达</span></span><br><span class="line">                lastestTime = buses[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(insertPoints[j + getOnCnt - <span class="number">1</span>] &gt;= j) &#123;</span><br><span class="line">                <span class="comment">// 如果前一个可插入点在j或其之后，也就是这批人中有插入点</span></span><br><span class="line">                lastestTime = passengers[insertPoints[j + getOnCnt - <span class="number">1</span>]] - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="comment">// else: 没有插入点，无法上车，什么都不做</span></span><br><span class="line">            j += getOnCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; busNum) &#123;</span><br><span class="line">            <span class="keyword">return</span> buses.<span class="built_in">back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastestTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1184-公交站间的距离"><a href="#1184-公交站间的距离" class="headerlink" title="1184. 公交站间的距离"></a>1184. 公交站间的距离</h2><h3 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distanceBetweenBusStops</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; distance, <span class="type">int</span> start, <span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = distance.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(n, INT_MAX / <span class="number">2</span>)</span></span>;</span><br><span class="line">        dis[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> firstClosestAndNotVisited = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[j] &amp;&amp; (firstClosestAndNotVisited == <span class="number">-1</span> || dis[j] &lt; dis[firstClosestAndNotVisited])) &#123;</span><br><span class="line">                    firstClosestAndNotVisited = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> next = firstClosestAndNotVisited;</span><br><span class="line">            visited[next] = <span class="literal">true</span>;</span><br><span class="line">            dis[(next + <span class="number">1</span>) % n] = <span class="built_in">min</span>(dis[(next + <span class="number">1</span>) % n], distance[next] + dis[next]);</span><br><span class="line">            dis[(next - <span class="number">1</span> + n) % n] = <span class="built_in">min</span>(dis[(next - <span class="number">1</span> + n) % n], distance[(next - <span class="number">1</span> + n) % n] + dis[next]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[destination];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="一次遍历"><a href="#一次遍历" class="headerlink" title="一次遍历"></a>一次遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distanceBetweenBusStops</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; distance, <span class="type">int</span> start, <span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = distance.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> counterClockWiseSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> clockWiseSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; destination) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(start, destination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; start; i++) &#123;</span><br><span class="line">            counterClockWiseSum += distance[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt; destination; i++) &#123;</span><br><span class="line">            clockWiseSum += distance[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = destination; i &lt; n; i++) &#123;</span><br><span class="line">            counterClockWiseSum += distance[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(clockWiseSum, counterClockWiseSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于只有两个路径到达destination，只要计算顺时针和逆时针的总和，取最小值就好</p></blockquote><h2 id="2848-与车相交的点"><a href="#2848-与车相交的点" class="headerlink" title="2848. 与车相交的点"></a>2848. 与车相交的点</h2><h3 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diff</span><span class="params">(<span class="number">102</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            diff[nums[i][<span class="number">0</span>]]++;</span><br><span class="line">            diff[nums[i][<span class="number">1</span>] + <span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> curVal = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            curVal += diff[i];</span><br><span class="line">            <span class="keyword">if</span>(curVal &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="排序贪心"><a href="#排序贪心" class="headerlink" title="排序贪心"></a>排序贪心</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123; <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>]; &#125;);</span><br><span class="line">        <span class="type">int</span> curStart = nums[<span class="number">0</span>][<span class="number">0</span>], curEnd = nums[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i][<span class="number">0</span>] &gt; curEnd) &#123;</span><br><span class="line">                cnt += curEnd - curStart + <span class="number">1</span>;</span><br><span class="line">                curStart = nums[i][<span class="number">0</span>];</span><br><span class="line">                curEnd = nums[i][<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curEnd = <span class="built_in">max</span>(curEnd, nums[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt + (curEnd - curStart + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;2181-合并零之间的节点&quot;&gt;&lt;a href=&quot;#2181-合并零之间的节点&quot; class=&quot;headerlink&quot; title=&quot;2181. 合并零之间的节点&quot;&gt;&lt;/a&gt;2181. 合并零之间的节点&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ListNode* &lt;span class=&quot;title&quot;&gt;mergeNodes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* head)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode dummy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode *move_dummy = &amp;amp;dummy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode *move = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(move-&amp;gt;next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(move-&amp;gt;next &amp;amp;&amp;amp; move-&amp;gt;next-&amp;gt;val != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += move-&amp;gt;next-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                move = move-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            move-&amp;gt;val = sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            move_dummy-&amp;gt;next = move;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            move_dummy = move_dummy-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            move = move-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            move_dummy-&amp;gt;next = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;977-有序数组的平方&quot;&gt;&lt;a href=&quot;#977-有序数组的平方&quot; class=&quot;headerlink&quot; title=&quot;977. 有序数组的平方&quot;&gt;&lt;/a&gt;977. 有序数组的平方&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;sortedSquares&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;merged_array&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, j = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; k &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(nums[i]) &amp;gt; &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(nums[j])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                merged_array[k] = nums[i] * nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                merged_array[k] = nums[j] * nums[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; merged_array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;按照绝对值归并&lt;/li&gt;
&lt;li&gt;双指针，从左右两端开始移动，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3174-清除数字&quot;&gt;&lt;a href=&quot;#3174-清除数字&quot; class=&quot;headerlink&quot; title=&quot;3174. 清除数字&quot;&gt;&lt;/a&gt;3174. 清除数字&lt;/h2&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>牛客刷题-2</title>
    <link href="https://jingtianer.github.io/home/2024/09/03/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98-2/"/>
    <id>https://jingtianer.github.io/home/2024/09/03/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98-2/</id>
    <published>2024-09-03T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-小美的平衡矩阵"><a href="#1-小美的平衡矩阵" class="headerlink" title="1.小美的平衡矩阵"></a>1.小美的平衡矩阵</h2><div data-v-5e687804="" class="" data-v-368446cc=""><div data-v-55713a8e="" data-v-5e687804="" class="tw-mb-5"><!---->  <div data-v-2b881dd3="" data-v-55713a8e="" class="question-info question-info"><div data-v-2b881dd3="" class="codingTitleClass tw-flex"><div data-v-2b881dd3="" class="tw-mr-1 tw-h-7 tw-leading-7">1.</div> <div data-v-2b881dd3="" class="commonPaperHtml tw-flex-1 tw-w-0">小美的平衡矩阵</div></div> <div data-v-2b881dd3="" class="commonPaperHtml codingContentClass">小美拿到了一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的矩阵，其中每个元素是 0 或者 1。<br>小美认为一个矩形区域是完美的，当且仅当该区域内 0 的数量恰好等于 1 的数量。<br>现在，小美希望你回答有多少个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>∗</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">i*i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的完美矩形区域。你需要回答<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1\leq i \leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的所有答案。</div></div></div> <div data-v-5e687804="" class="description-wrap tw-mt-3"><div data-v-5e687804="">时间限制：C/C++ 1秒，其他语言2秒</div> <div data-v-5e687804="" class="tw-mt-2">空间限制：C/C++ 256M，其他语言512M</div></div> <div data-v-5e687804="" class="item-title">输入描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">第一行输入一个正整数<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">，代表矩阵大小。<br>接下来的<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">行，每行输入一个长度为<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">的 01 串，用来表示矩阵。<br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20n%20%5Cleq%20200" alt="1\leq n \leq 200"></pre> <div data-v-5e687804="" class="item-title">输出描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">输出<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">行，第<img src="https://hr.nowcoder.com/equation?tex=i" alt="i">行输出<img src="https://hr.nowcoder.com/equation?tex=i*i" alt="i*i">的完美矩形区域的数量。</pre> <div data-v-5e687804=""><div data-v-5e687804="" class="item-title">示例1</div> <div data-v-5e687804="" class="description-wrap"><div data-v-5e687804="" class="tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输入例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">41010010111000011</pre></div> <div data-v-5e687804="" class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输出例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">0701</pre></div> <!----></div></div> <!----></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">preSum</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            preSum[i][j+<span class="number">1</span>] = preSum[i][j] + (s[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> window = <span class="number">1</span>; window &lt;= n; window++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(window &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> perfect = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n - window; j++) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; window; i++) &#123;</span><br><span class="line">                sum += preSum[i][window + j] - preSum[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum * <span class="number">2</span> == window * window) &#123;</span><br><span class="line">                perfect++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = window; i &lt; n; i++) &#123;</span><br><span class="line">                sum -= preSum[i - window][window + j] - preSum[i - window][j];</span><br><span class="line">                sum += preSum[i][window + j] - preSum[i][j];</span><br><span class="line">                <span class="keyword">if</span>(sum * <span class="number">2</span> == window * window) &#123;</span><br><span class="line">                    perfect++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; perfect &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-小美的数组询问"><a href="#2-小美的数组询问" class="headerlink" title="2.小美的数组询问"></a>2.小美的数组询问</h2><div data-v-5e687804="" class="" data-v-368446cc=""><div data-v-55713a8e="" data-v-5e687804="" class="tw-mb-5"><!---->  <div data-v-2b881dd3="" data-v-55713a8e="" class="question-info question-info"><div data-v-2b881dd3="" class="codingTitleClass tw-flex"><div data-v-2b881dd3="" class="tw-mr-1 tw-h-7 tw-leading-7">2.</div> <div data-v-2b881dd3="" class="commonPaperHtml tw-flex-1 tw-w-0">小美的数组询问</div></div> <div data-v-2b881dd3="" class="commonPaperHtml codingContentClass">小美拿到了一个由正整数组成的数组，但其中有一些元素是未知的（用 0 来表示）。<br>现在小美想知道，如果那些未知的元素在区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>范围内随机取值的话，数组所有元素之和的最小值和最大值分别是多少？<br>共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>次询问。</div></div></div> <div data-v-5e687804="" class="description-wrap tw-mt-3"><div data-v-5e687804="">时间限制：C/C++ 1秒，其他语言2秒</div> <div data-v-5e687804="" class="tw-mt-2">空间限制：C/C++ 256M，其他语言512M</div></div> <div data-v-5e687804="" class="item-title">输入描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">第一行输入两个正整数<img src="https://hr.nowcoder.com/equation?tex=n%2Cq" alt="n,q">，代表数组大小和询问次数。<br>第二行输入<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">个整数<img src="https://hr.nowcoder.com/equation?tex=a_i" alt="a_i">，其中如果输入的<img src="https://hr.nowcoder.com/equation?tex=a_i" alt="a_i">为 0，那么说明<img src="https://hr.nowcoder.com/equation?tex=a_i" alt="a_i">是未知的。<br>接下来的<img src="https://hr.nowcoder.com/equation?tex=q" alt="q">行，每行输入两个正整数 <img src="https://hr.nowcoder.com/equation?tex=l%2Cr" alt="l,r">，代表一次询问。<br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20n%2Cq%20%5Cleq%2010%5E5" alt="1\leq n,q \leq 10^5"><br><img src="https://hr.nowcoder.com/equation?tex=0%20%5Cleq%20a_i%20%5Cleq%2010%5E9" alt="0 \leq a_i \leq 10^9"><br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20l%20%5Cleq%20r%20%5Cleq%2010%5E9" alt="1\leq l \leq r \leq 10^9"></pre> <div data-v-5e687804="" class="item-title">输出描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">输出<img src="https://hr.nowcoder.com/equation?tex=q" alt="q">行，每行输出两个正整数，代表所有元素之和的最小值和最大值。</pre> <div data-v-5e687804=""><div data-v-5e687804="" class="item-title">示例1</div> <div data-v-5e687804="" class="description-wrap"><div data-v-5e687804="" class="tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输入例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">3 21 0 31 24 4</pre></div> <div data-v-5e687804="" class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输出例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">5 68 8</pre></div> <div data-v-5e687804="" class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">例子说明：</span> <pre data-v-5e687804="" class="example-desc tw-break-all tw-whitespace-pre-wrap">只有第二个元素是未知的。<br>第一次询问，数组最小的和是 1+1+3=5，最大的和是 1+2+3=6。<br>第二次询问，显然数组的元素和必然为 8。<br><div><br></div></pre></div></div></div> <!----></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> zeroCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> ai;</span><br><span class="line">        cin &gt;&gt; ai;</span><br><span class="line">        zeroCnt += (ai == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        sum += ai;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; sum + zeroCnt*l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum + zeroCnt*r &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-小美的-MT"><a href="#3-小美的-MT" class="headerlink" title="3.小美的 MT"></a>3.小美的 MT</h2><div data-v-5e687804="" class="" data-v-368446cc=""><div data-v-55713a8e="" data-v-5e687804="" class="tw-mb-5"><!---->  <div data-v-2b881dd3="" data-v-55713a8e="" class="question-info question-info"><div data-v-2b881dd3="" class="codingTitleClass tw-flex"><div data-v-2b881dd3="" class="tw-mr-1 tw-h-7 tw-leading-7">3.</div> <div data-v-2b881dd3="" class="commonPaperHtml tw-flex-1 tw-w-0">小美的 MT</div></div> <div data-v-2b881dd3="" class="commonPaperHtml codingContentClass">MT 是美团的缩写，因此小美很喜欢这两个字母。<br>现在小美拿到了一个仅由大写字母组成字符串，她可以最多操作<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>次，每次可以修改任意一个字符。小美想知道，操作结束后最多共有多少个'M'和'T'字符？</div></div></div> <div data-v-5e687804="" class="description-wrap tw-mt-3"><div data-v-5e687804="">时间限制：C/C++ 1秒，其他语言2秒</div> <div data-v-5e687804="" class="tw-mt-2">空间限制：C/C++ 256M，其他语言512M</div></div> <div data-v-5e687804="" class="item-title">输入描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">第一行输入两个正整数<img src="https://hr.nowcoder.com/equation?tex=n%2Ck" alt="n,k">，代表字符串长度和操作次数。<br>第二行输入一个长度为<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">的、仅由大写字母组成的字符串。<br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20k%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="1\leq k \leq n \leq 10^5"></pre> <div data-v-5e687804="" class="item-title">输出描述：</div> <pre data-v-5e687804="" class="description-wrap tw-whitespace-pre-wrap tw-break-all">输出<span>操作结束后最多共有多少个'M'和'T'字符。</span></pre> <div data-v-5e687804=""><div data-v-5e687804="" class="item-title">示例1</div> <div data-v-5e687804="" class="description-wrap"><div data-v-5e687804="" class="tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输入例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">5 2MTUAN</pre></div> <div data-v-5e687804="" class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">输出例子：</span> <pre data-v-5e687804="" class="tw-whitespace-pre-wrap tw-break-all">4</pre></div> <div data-v-5e687804="" class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap"><span data-v-5e687804="" class="tw-flex-shrink-0">例子说明：</span> <pre data-v-5e687804="" class="example-desc tw-break-all tw-whitespace-pre-wrap">修改第三个和第五个字符，形成的字符串为 MTTAM，这样共有 4 个'M'和'T'。</pre></div></div></div> <!----></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c = cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(c != <span class="string">&#x27;M&#x27;</span> &amp;&amp; c != <span class="string">&#x27;T&#x27;</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;  n - cnt + <span class="built_in">min</span>(k, cnt) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64 位输出请用 printf(&quot;%lld&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="4-小美的朋友关系"><a href="#4-小美的朋友关系" class="headerlink" title="4. 小美的朋友关系"></a>4. 小美的朋友关系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionSet</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; array;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionSet</span>(vector&lt;set&lt;<span class="type">int</span>&gt;&gt; graph, <span class="type">int</span> n): <span class="built_in">array</span>(n) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">                <span class="built_in">Union</span>(u, v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">UnionSet</span>(<span class="type">const</span> vector&lt;set&lt;<span class="type">int</span>&gt;&gt;&amp; graph): <span class="built_in">UnionSet</span>(graph, graph.<span class="built_in">size</span>()) &#123;&#125;</span><br><span class="line">    <span class="built_in">UnionSet</span>(<span class="type">int</span> n): <span class="built_in">array</span>(n) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u == array[u] ? u : (array[u] = <span class="built_in">Find</span>(array[u]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        array[<span class="built_in">Find</span>(u)] = <span class="built_in">Find</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(u) == <span class="built_in">Find</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    vector&lt;set&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--;</span><br><span class="line">        v--;</span><br><span class="line">        graph[u].<span class="built_in">insert</span>(v);</span><br><span class="line">        graph[v].<span class="built_in">insert</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; ops;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="type">int</span> op, u, v;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--;</span><br><span class="line">        v--;</span><br><span class="line">        ops.<span class="built_in">emplace_back</span>(op, u, v);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            graph[u].<span class="built_in">erase</span>(v);</span><br><span class="line">            graph[v].<span class="built_in">erase</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">UnionSet <span class="title">unionSet</span><span class="params">(graph, n)</span></span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ite = ops.<span class="built_in">rbegin</span>(); ite != ops.<span class="built_in">rend</span>(); ite++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [op, u, v] = *ite;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            unionSet.<span class="built_in">Union</span>(u, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(unionSet.<span class="built_in">Query</span>(u, v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ite = ans.<span class="built_in">rbegin</span>(); ite != ans.<span class="built_in">rend</span>(); ite++) &#123;</span><br><span class="line">        cout &lt;&lt; (*ite ? <span class="string">&quot;Yes\n&quot;</span> : <span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反向并查集，倒着计算答案</li><li>先把要删除的关系全部删除，然后倒序将删除的关系还原</li></ul><h2 id="5-小美的区间删除"><a href="#5-小美的区间删除" class="headerlink" title="5 小美的区间删除"></a>5 小美的区间删除</h2><div class="left" data-v-368446cc=""><div data-v-5e687804="" data-v-368446cc="" class=""><div class="tw-mb-5" data-v-55713a8e="" data-v-5e687804=""><!---->  <div class="question-info question-info" data-v-2b881dd3="" data-v-55713a8e=""><div class="codingTitleClass tw-flex" data-v-2b881dd3=""><div class="tw-mr-1 tw-h-7 tw-leading-7" data-v-2b881dd3="">5.</div> <div class="commonPaperHtml tw-flex-1 tw-w-0" data-v-2b881dd3="">小美的区间删除</div></div> <div data-v-2b881dd3="" class="commonPaperHtml codingContentClass">小美拿到了一个大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的数组，她希望删除一个区间后，使得剩余所有元素的乘积末尾至少有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个 0。小美想知道，一共有多少种不同的删除方案？</div></div></div> <div class="description-wrap tw-mt-3" data-v-5e687804=""><div data-v-5e687804="">时间限制：C/C++ 1秒，其他语言2秒</div> <div class="tw-mt-2" data-v-5e687804="">空间限制：C/C++ 256M，其他语言512M</div></div> <div class="item-title" data-v-5e687804="">输入描述：</div> <pre class="description-wrap tw-whitespace-pre-wrap tw-break-all" data-v-5e687804="">第一行输入两个正整数<img src="https://hr.nowcoder.com/equation?tex=n%2Ck" alt="n,k">。<br>第二行输入<img src="https://hr.nowcoder.com/equation?tex=n" alt="n">个正整数<img src="https://hr.nowcoder.com/equation?tex=a_i" alt="a_i">，代表小美拿到的数组。<br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20n%2Ck%20%5Cleq%2010%5E5" alt="1\leq n,k \leq 10^5"><br><img src="https://hr.nowcoder.com/equation?tex=1%5Cleq%20a_i%20%5Cleq%2010%5E9" alt="1\leq a_i \leq 10^9"></pre> <div class="item-title" data-v-5e687804="">输出描述：</div> <pre class="description-wrap tw-whitespace-pre-wrap tw-break-all" data-v-5e687804="">一个整数，代表删除的方案数。</pre> <div data-v-5e687804=""><div class="item-title" data-v-5e687804="">示例1</div> <div class="description-wrap" data-v-5e687804=""><div class="tw-flex tw-items-start tw-flex-wrap" data-v-5e687804=""><span class="tw-flex-shrink-0" data-v-5e687804="">输入例子：</span> <pre class="tw-whitespace-pre-wrap tw-break-all" data-v-5e687804="">5 22 5 3 4 20</pre></div> <div class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap" data-v-5e687804=""><span class="tw-flex-shrink-0" data-v-5e687804="">输出例子：</span> <pre class="tw-whitespace-pre-wrap tw-break-all" data-v-5e687804="">4</pre></div> <div class="tw-mt-2 tw-flex tw-items-start tw-flex-wrap" data-v-5e687804=""><span class="tw-flex-shrink-0" data-v-5e687804="">例子说明：</span> <pre class="example-desc tw-break-all tw-whitespace-pre-wrap" data-v-5e687804="">第一个方案，删除[3]。<br>第二个方案，删除[4]。<br>第三个方案，删除[3,4]。<br>第四个方案，删除[2]。<br></pre></div></div></div> <!----></div></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cntOfFact</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n, <span class="type">long</span> <span class="type">long</span> fact)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> facts[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> base = <span class="number">0</span>;</span><br><span class="line">    facts[<span class="number">0</span>] = fact;</span><br><span class="line">    <span class="keyword">while</span>(facts[base] &lt; n) &#123;</span><br><span class="line">        base++;</span><br><span class="line">        facts[base] = facts[base<span class="number">-1</span>] * facts[base<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; base &gt;= <span class="number">0</span>; base--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n / facts[base] &gt; <span class="number">0</span> &amp;&amp; n % facts[base] == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt += <span class="number">1</span> &lt;&lt; base;</span><br><span class="line">            n /= facts[base];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cntOf2</span><span class="params">(n+<span class="number">1</span>)</span>, <span class="title">cntOf5</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        cntOf2[i+<span class="number">1</span>] = <span class="built_in">cntOfFact</span>(arr[i], <span class="number">2</span>) + cntOf2[i];</span><br><span class="line">        cntOf5[i+<span class="number">1</span>] = <span class="built_in">cntOfFact</span>(arr[i], <span class="number">5</span>) + cntOf5[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> canDelete2 = cntOf2[n] - k;</span><br><span class="line">    <span class="type">int</span> canDelete5 = cntOf5[n] - k;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> end = <span class="number">1</span>; end &lt;= n; end++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end &amp;&amp; (cntOf2[end] - cntOf2[start] &gt; canDelete2 || cntOf5[end] - cntOf5[start] &gt; canDelete5)) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans += end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64 位输出请用 printf(&quot;%lld&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-小美的平衡矩阵&quot;&gt;&lt;a href=&quot;#1-小美的平衡矩阵&quot; class=&quot;headerlink&quot; title=&quot;1.小美的平衡矩阵&quot;&gt;&lt;/a&gt;1.小美的平衡矩阵&lt;/h2&gt;&lt;div data-v-5e687804 class data-v-368446cc&gt;&lt;div data-v-55713a8e data-v-5e687804 class=&quot;tw-mb-5&quot;&gt;&lt;!----&gt;  &lt;div data-v-2b881dd3 data-v-55713a8e class=&quot;question-info question-info&quot;&gt;&lt;div data-v-2b881dd3 class=&quot;codingTitleClass tw-flex&quot;&gt;&lt;div data-v-2b881dd3 class=&quot;tw-mr-1 tw-h-7 tw-leading-7&quot;&gt;1.&lt;/div&gt; &lt;div data-v-2b881dd3 class=&quot;commonPaperHtml tw-flex-1 tw-w-0&quot;&gt;小美的平衡矩阵&lt;/div&gt;&lt;/div&gt; &lt;div data-v-2b881dd3 class=&quot;commonPaperHtml codingContentClass&quot;&gt;小美拿到了一个&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n*n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.46528em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的矩阵，其中每个元素是 0 或者 1。&lt;br&gt;
小美认为一个矩形区域是完美的，当且仅当该区域内 0 的数量恰好等于 1 的数量。&lt;br&gt;
现在，小美希望你回答有多少个&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i*i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的完美矩形区域。你需要回答&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&#92;leq i &#92;leq n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.79549em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的所有答案。&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;description-wrap tw-mt-3&quot;&gt;&lt;div data-v-5e687804&gt;时间限制：C/C++ 1秒，其他语言2秒&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;tw-mt-2&quot;&gt;空间限制：C/C++ 256M，其他语言512M&lt;/div&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;输入描述：&lt;/div&gt; &lt;pre data-v-5e687804 class=&quot;description-wrap tw-whitespace-pre-wrap tw-break-all&quot;&gt;第一行输入一个正整数&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n&quot; alt=&quot;n&quot;&gt;，代表矩阵大小。&lt;br&gt;接下来的&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n&quot; alt=&quot;n&quot;&gt;行，每行输入一个长度为&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n&quot; alt=&quot;n&quot;&gt;的 01 串，用来表示矩阵。&lt;br&gt;&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=1%5Cleq%20n%20%5Cleq%20200&quot; alt=&quot;1&#92;leq n &#92;leq 200&quot;&gt;&lt;/pre&gt; &lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;输出描述：&lt;/div&gt; &lt;pre data-v-5e687804 class=&quot;description-wrap tw-whitespace-pre-wrap tw-break-all&quot;&gt;输出&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n&quot; alt=&quot;n&quot;&gt;行，第&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=i&quot; alt=&quot;i&quot;&gt;行输出&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=i*i&quot; alt=&quot;i*i&quot;&gt;的完美矩形区域的数量。&lt;/pre&gt; &lt;div data-v-5e687804&gt;&lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;示例1&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;description-wrap&quot;&gt;&lt;div data-v-5e687804 class=&quot;tw-flex tw-items-start tw-flex-wrap&quot;&gt;&lt;span data-v-5e687804 class=&quot;tw-flex-shrink-0&quot;&gt;输入例子：&lt;/span&gt; &lt;pre data-v-5e687804 class=&quot;tw-whitespace-pre-wrap tw-break-all&quot;&gt;4
1010
0101
1100
0011&lt;/pre&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;tw-mt-2 tw-flex tw-items-start tw-flex-wrap&quot;&gt;&lt;span data-v-5e687804 class=&quot;tw-flex-shrink-0&quot;&gt;输出例子：&lt;/span&gt; &lt;pre data-v-5e687804 class=&quot;tw-whitespace-pre-wrap tw-break-all&quot;&gt;0
7
0
1&lt;/pre&gt;&lt;/div&gt; &lt;!----&gt;&lt;/div&gt;&lt;/div&gt; &lt;!----&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;preSum&lt;/span&gt;(n, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cin &amp;gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            preSum[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = preSum[i][j] + (s[j] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; window = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; window &amp;lt;= n; window++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(window &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;0&#92;n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; perfect = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt;= n - window; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; window; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += preSum[i][window + j] - preSum[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == window * window) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                perfect++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = window; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum -= preSum[i - window][window + j] - preSum[i - window][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += preSum[i][window + j] - preSum[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == window * window) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    perfect++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout &amp;lt;&amp;lt; perfect &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-小美的数组询问&quot;&gt;&lt;a href=&quot;#2-小美的数组询问&quot; class=&quot;headerlink&quot; title=&quot;2.小美的数组询问&quot;&gt;&lt;/a&gt;2.小美的数组询问&lt;/h2&gt;&lt;div data-v-5e687804 class data-v-368446cc&gt;&lt;div data-v-55713a8e data-v-5e687804 class=&quot;tw-mb-5&quot;&gt;&lt;!----&gt;  &lt;div data-v-2b881dd3 data-v-55713a8e class=&quot;question-info question-info&quot;&gt;&lt;div data-v-2b881dd3 class=&quot;codingTitleClass tw-flex&quot;&gt;&lt;div data-v-2b881dd3 class=&quot;tw-mr-1 tw-h-7 tw-leading-7&quot;&gt;2.&lt;/div&gt; &lt;div data-v-2b881dd3 class=&quot;commonPaperHtml tw-flex-1 tw-w-0&quot;&gt;小美的数组询问&lt;/div&gt;&lt;/div&gt; &lt;div data-v-2b881dd3 class=&quot;commonPaperHtml codingContentClass&quot;&gt;小美拿到了一个由正整数组成的数组，但其中有一些元素是未知的（用 0 来表示）。&lt;br&gt;
现在小美想知道，如果那些未知的元素在区间&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;[l,r]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;范围内随机取值的话，数组所有元素之和的最小值和最大值分别是多少？&lt;br&gt;
共有&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.625em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;次询问。&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;description-wrap tw-mt-3&quot;&gt;&lt;div data-v-5e687804&gt;时间限制：C/C++ 1秒，其他语言2秒&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;tw-mt-2&quot;&gt;空间限制：C/C++ 256M，其他语言512M&lt;/div&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;输入描述：&lt;/div&gt; &lt;pre data-v-5e687804 class=&quot;description-wrap tw-whitespace-pre-wrap tw-break-all&quot;&gt;第一行输入两个正整数&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n%2Cq&quot; alt=&quot;n,q&quot;&gt;，代表数组大小和询问次数。&lt;br&gt;第二行输入&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=n&quot; alt=&quot;n&quot;&gt;个整数&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=a_i&quot; alt=&quot;a_i&quot;&gt;，其中如果输入的&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=a_i&quot; alt=&quot;a_i&quot;&gt;为 0，那么说明&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=a_i&quot; alt=&quot;a_i&quot;&gt;是未知的。&lt;br&gt;接下来的&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=q&quot; alt=&quot;q&quot;&gt;行，每行输入两个正整数 &lt;img src=&quot;https://hr.nowcoder.com/equation?tex=l%2Cr&quot; alt=&quot;l,r&quot;&gt;，代表一次询问。&lt;br&gt;&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=1%5Cleq%20n%2Cq%20%5Cleq%2010%5E5&quot; alt=&quot;1&#92;leq n,q &#92;leq 10^5&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=0%20%5Cleq%20a_i%20%5Cleq%2010%5E9&quot; alt=&quot;0 &#92;leq a_i &#92;leq 10^9&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=1%5Cleq%20l%20%5Cleq%20r%20%5Cleq%2010%5E9&quot; alt=&quot;1&#92;leq l &#92;leq r &#92;leq 10^9&quot;&gt;&lt;/pre&gt; &lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;输出描述：&lt;/div&gt; &lt;pre data-v-5e687804 class=&quot;description-wrap tw-whitespace-pre-wrap tw-break-all&quot;&gt;输出&lt;img src=&quot;https://hr.nowcoder.com/equation?tex=q&quot; alt=&quot;q&quot;&gt;行，每行输出两个正整数，代表所有元素之和的最小值和最大值。&lt;/pre&gt; &lt;div data-v-5e687804&gt;&lt;div data-v-5e687804 class=&quot;item-title&quot;&gt;示例1&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;description-wrap&quot;&gt;&lt;div data-v-5e687804 class=&quot;tw-flex tw-items-start tw-flex-wrap&quot;&gt;&lt;span data-v-5e687804 class=&quot;tw-flex-shrink-0&quot;&gt;输入例子：&lt;/span&gt; &lt;pre data-v-5e687804 class=&quot;tw-whitespace-pre-wrap tw-break-all&quot;&gt;3 2
1 0 3
1 2
4 4&lt;/pre&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;tw-mt-2 tw-flex tw-items-start tw-flex-wrap&quot;&gt;&lt;span data-v-5e687804 class=&quot;tw-flex-shrink-0&quot;&gt;输出例子：&lt;/span&gt; &lt;pre data-v-5e687804 class=&quot;tw-whitespace-pre-wrap tw-break-all&quot;&gt;5 6
8 8&lt;/pre&gt;&lt;/div&gt; &lt;div data-v-5e687804 class=&quot;tw-mt-2 tw-flex tw-items-start tw-flex-wrap&quot;&gt;&lt;span data-v-5e687804 class=&quot;tw-flex-shrink-0&quot;&gt;例子说明：&lt;/span&gt; &lt;pre data-v-5e687804 class=&quot;example-desc tw-break-all tw-whitespace-pre-wrap&quot;&gt;只有第二个元素是未知的。&lt;br&gt;第一次询问，数组最小的和是 1+1+3=5，最大的和是 1+2+3=6。&lt;br&gt;第二次询问，显然数组的元素和必然为 8。&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;!----&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n, q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; zeroCnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ai;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cin &amp;gt;&amp;gt; ai;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zeroCnt += (ai == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum += ai;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; q; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l, r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout &amp;lt;&amp;lt; sum + zeroCnt*l &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; sum + zeroCnt*r &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="牛客" scheme="https://jingtianer.github.io/home/categories/%E7%89%9B%E5%AE%A2/"/>
    
    <category term="刷题" scheme="https://jingtianer.github.io/home/categories/%E7%89%9B%E5%AE%A2/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="牛客" scheme="https://jingtianer.github.io/home/tags/%E7%89%9B%E5%AE%A2/"/>
    
    <category term="刷题" scheme="https://jingtianer.github.io/home/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>OI KIWI 02-二分</title>
    <link href="https://jingtianer.github.io/home/2024/09/01/%E7%AE%97%E6%B3%95/OI-KIWI-02-%E4%BA%8C%E5%88%86/"/>
    <id>https://jingtianer.github.io/home/2024/09/01/%E7%AE%97%E6%B3%95/OI-KIWI-02-%E4%BA%8C%E5%88%86/</id>
    <published>2024-09-01T03:14:34.000Z</published>
    <updated>2025-04-15T02:37:55.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="左闭右闭"><a href="#左闭右闭" class="headerlink" title="左闭右闭"></a>左闭右闭</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>; <span class="comment">// </span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span>(vec[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(vec[mid] &gt; target) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开"></a>左闭右开</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>l和r代表区间，当区间内没有元素时查找结束<ul><li>对于闭区间，是l &gt; r, 所以循环条件是 l &lt;&#x3D; r</li><li>对于左闭右开区间，是l &gt;&#x3D; r, 所以循环条件是 l &lt; r</li></ul></li><li>区间左&#x2F;右边界移动，移动到最小的查找区间，也就是区间不包括另一半区间和当前mid值<ul><li>对于闭区间，r &#x3D; mid - 1，不包括当前mid值<code>[l, mid - 1]</code></li><li>对于左闭右开区间，r &#x3D; mid，不包括当前mid值<code>[l, mid)</code></li></ul></li></ul><h2 id="左侧边界"><a href="#左侧边界" class="headerlink" title="左侧边界"></a>左侧边界</h2><h3 id="闭区间"><a href="#闭区间" class="headerlink" title="闭区间"></a>闭区间</h3><p>如果target在vec中，则找到最后一个target的下标<br>如果target不在vec中，则找到target应该插入在哪个元素后面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span>(vec[mid] == target) &#123;</span><br><span class="line">            l = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(vec[mid] &gt; target) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mid !&#x3D; target的情况，正常二分查找</li><li>mid &#x3D;&#x3D; target， 找target的前驱，所以l &#x3D; mid - 1（为啥不是mid）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h2&gt;&lt;h3 id=&quot;左闭右闭&quot;&gt;&lt;a href=&quot;#左闭右闭&quot; class=&quot;headerlink&quot; title=&quot;左闭右闭&quot;&gt;&lt;/a&gt;左闭右闭&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; vec, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = vec.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, r = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(l &amp;lt;= r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mid = (r - l) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vec[mid] == target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vec[mid] &amp;gt; target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            r = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;左闭右开&quot;&gt;&lt;a href=&quot;#左闭右开&quot; class=&quot;headerlink&quot; title=&quot;左闭右开&quot;&gt;&lt;/a&gt;左闭右开&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, r = len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(l &amp;lt; r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mid = (r - l) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[mid] == target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[mid] &amp;gt; target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                r = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                l = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;</summary>
    
    
    
    <category term="OI KIWI" scheme="https://jingtianer.github.io/home/categories/OI-KIWI/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/categories/OI-KIWI/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://jingtianer.github.io/home/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="OI KIWI" scheme="https://jingtianer.github.io/home/tags/OI-KIWI/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-37</title>
    <link href="https://jingtianer.github.io/home/2024/08/26/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9337/"/>
    <id>https://jingtianer.github.io/home/2024/08/26/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9337/</id>
    <published>2024-08-26T03:14:34.000Z</published>
    <updated>2025-04-15T02:37:55.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="698-划分为k个相等的子集"><a href="#698-划分为k个相等的子集" class="headerlink" title="698. 划分为k个相等的子集"></a>698. 划分为k个相等的子集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solve</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;&amp; nums;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; bucket;</span><br><span class="line">        <span class="type">int</span> target;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="type">bool</span> canPartition;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(index &gt;= n) &#123; <span class="comment">// 所有数都放进来了，且没有超过target</span></span><br><span class="line">                <span class="comment">// 说明一定全等于target</span></span><br><span class="line">                <span class="comment">// 如果有桶&lt;target, 则一定有桶&gt;target，所以所有桶一定&gt;=target</span></span><br><span class="line">                <span class="comment">// 如果有桶&gt;target, 则一定有桶&lt;target，所以所有桶一定&lt;=target</span></span><br><span class="line">                <span class="comment">// 所以所有桶一定==target</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; bucket[i] == bucket[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(bucket[i] + nums[index] &lt;= target) &#123;</span><br><span class="line">                    bucket[i] += nums[index];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">dfs</span>(index+<span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bucket[i] -= nums[index];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Solve</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k):<span class="built_in">nums</span>(nums), <span class="built_in">k</span>(k), <span class="built_in">bucket</span>(k) &#123;</span><br><span class="line">            n = nums.<span class="built_in">size</span>();</span><br><span class="line">            sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            target = sum / k;</span><br><span class="line">            <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">            <span class="keyword">if</span>(sum % k != <span class="number">0</span>) &#123;</span><br><span class="line">                canPartition = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            canPartition = <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> canPartition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartitionKSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Solve</span>(nums, k).<span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>硬搜</p><h2 id="690-员工的重要性"><a href="#690-员工的重要性" class="headerlink" title="690. 员工的重要性"></a>690. 员工的重要性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getImportance</span><span class="params">(vector&lt;Employee*&gt; employees, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = employees.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, Employee*&gt; id2Node;</span><br><span class="line">        <span class="keyword">for</span>(Employee *employee : employees) &#123;</span><br><span class="line">            id2Node[employee-&gt;id] = employee;</span><br><span class="line">        &#125;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> currentId) &#123;</span><br><span class="line">            Employee *node = id2Node[currentId];</span><br><span class="line">            <span class="type">int</span> ans = node-&gt;importance;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> child : node-&gt;subordinates) &#123;</span><br><span class="line">                ans += <span class="built_in">dfs</span>(child);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="699-掉落的方块"><a href="#699-掉落的方块" class="headerlink" title="699. 掉落的方块"></a>699. 掉落的方块</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fallingSquares</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = positions.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">height</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            right[i] = positions[i][<span class="number">0</span>] + positions[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> maxHeight = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> lefti = positions[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> righti = right[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> leftj = positions[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> rightj = right[j];</span><br><span class="line">                <span class="keyword">if</span>(lefti &gt;= rightj) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(righti &lt;= leftj) <span class="keyword">continue</span>;</span><br><span class="line">                maxHeight = <span class="built_in">max</span>(maxHeight, height[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            height[i] = maxHeight + positions[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            height[i] = <span class="built_in">max</span>(height[i<span class="number">-1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>数据规模略小，直接暴力</li></ul><h2 id="1186-删除一次得到子数组最大和"><a href="#1186-删除一次得到子数组最大和" class="headerlink" title="1186. 删除一次得到子数组最大和"></a>1186. 删除一次得到子数组最大和</h2><p>先了解<a href="https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/">Maximum Subarray Sum - Kadane’s Algorithm</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp0 = arr[<span class="number">0</span>], dp1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxx = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp1 = <span class="built_in">max</span>(dp1 + arr[i], dp0);</span><br><span class="line">            dp0 = <span class="built_in">max</span>(dp0, <span class="number">0</span>) + arr[i];</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp0);</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3144-分割字符频率相等的最少子字符串"><a href="#3144-分割字符频率相等的最少子字符串" class="headerlink" title="3144. 分割字符频率相等的最少子字符串"></a>3144. 分割字符频率相等的最少子字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">allEqualsExceptZero</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; arr[i] == <span class="number">0</span>) i++;</span><br><span class="line">        <span class="keyword">if</span>(i == len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> val = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> != arr[i] &amp;&amp; val != arr[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp; balance, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            level++;</span><br><span class="line">            <span class="type">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(len--) &#123;</span><br><span class="line">                <span class="type">int</span> node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = node; i &lt; n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(balance[node][i]) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i + <span class="number">1</span> == n) &#123;</span><br><span class="line">                            <span class="keyword">return</span> level;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!visited[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(i + <span class="number">1</span>);</span><br><span class="line">                            visited[i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSubstringsInPartition</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">balance</span>(len, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(len, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> charCnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                charCnt[s[j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                balance[i][j] = <span class="built_in">allEqualsExceptZero</span>(charCnt, <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bfs</span>(balance, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; minimumSubstringsInPartition(&quot;ababcc&quot;) &lt;&lt; &quot; == 1&quot;&lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; minimumSubstringsInPartition(&quot;fabccddg&quot;) &lt;&lt; &quot; == 3&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; minimumSubstringsInPartition(&quot;abababaccddb&quot;) &lt;&lt; &quot; == 2&quot; &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="built_in">minimumSubstringsInPartition</span>(<span class="string">&quot;fabccddg&quot;</span>) &lt;&lt; <span class="string">&quot; == 3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>找出任意区间<code>(i...j)</code>是否为平衡字符串，从0开始bfs搜索，直到第一个达到<code>n</code>的节点</li></ul><h2 id="3142-判断矩阵是否满足条件"><a href="#3142-判断矩阵是否满足条件" class="headerlink" title="3142. 判断矩阵是否满足条件"></a>3142. 判断矩阵是否满足条件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">satisfiesConditions</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] != grid[i+<span class="number">1</span>][j] || grid[i][j] == grid[i][j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][n<span class="number">-1</span>] != grid[i+<span class="number">1</span>][n<span class="number">-1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[m<span class="number">-1</span>][j] == grid[m<span class="number">-1</span>][j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种题请一次性给让我答10张</p><h2 id="3144-分割字符频率相等的最少子字符串-1"><a href="#3144-分割字符频率相等的最少子字符串-1" class="headerlink" title="3144. 分割字符频率相等的最少子字符串"></a>3144. 分割字符频率相等的最少子字符串</h2><p>这次用dp哦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">allEqualsExceptZero</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; arr[i] == <span class="number">0</span>) i++;</span><br><span class="line">        <span class="keyword">if</span>(i == len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> val = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> != arr[i] &amp;&amp; val != arr[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSubstringsInPartition</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">isBalance</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> charCnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                charCnt[s[j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                isBalance[i][j] = <span class="built_in">allEqualsExceptZero</span>(charCnt, <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isBalance[<span class="number">0</span>][i])</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isBalance[j][i])</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i], dp[j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3127-构造相同颜色的正方形"><a href="#3127-构造相同颜色的正方形" class="headerlink" title="3127. 构造相同颜色的正方形"></a><a href="https://leetcode.cn/problems/make-a-square-with-the-same-color/description/?envType=daily-question&envId=2024-08-31">3127. 构造相同颜色的正方形</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canMakeSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; gridValue = [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="keyword">return</span> grid[i][j] == <span class="string">&#x27;W&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; judge = [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> != <span class="built_in">gridValue</span>(i, j) + <span class="built_in">gridValue</span>(i + <span class="number">1</span>, j) + <span class="built_in">gridValue</span>(i, j + <span class="number">1</span>) + <span class="built_in">gridValue</span>(i + <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">judge</span>(<span class="number">0</span>, <span class="number">0</span>) || <span class="built_in">judge</span>(<span class="number">0</span>, <span class="number">1</span>) || <span class="built_in">judge</span>(<span class="number">1</span>, <span class="number">0</span>) || <span class="built_in">judge</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3153-所有数对中数位差之和"><a href="#3153-所有数对中数位差之和" class="headerlink" title="3153. 所有数对中数位差之和"></a><a href="https://leetcode.cn/problems/sum-of-digit-differences-of-all-pairs/description/?envType=daily-question&envId=2024-08-30">3153. 所有数对中数位差之和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sumDigitDifferences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">digitCnt</span>(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>)); <span class="comment">// digitCnt[i][j], nums中第i位为j的数的个数</span></span><br><span class="line">        <span class="keyword">auto</span> cntDigitNumPerPos = [&amp;]() &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> index = <span class="number">0</span>; index &lt; len; index++) &#123;</span><br><span class="line">                <span class="type">int</span> n = nums[index];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; n; i++, n /= <span class="number">10</span>) &#123;</span><br><span class="line">                    digitCnt[i][n % <span class="number">10</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">cntDigitNumPerPos</span>();</span><br><span class="line">        <span class="keyword">auto</span> cntDiffsAndAdd = [&amp;]() &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> diffCnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> index = <span class="number">0</span>; index &lt; len; index++) &#123;</span><br><span class="line">                <span class="type">int</span> n = nums[index];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; n; i++, n /= <span class="number">10</span>) &#123;</span><br><span class="line">                    diffCnt += len - digitCnt[i][n % <span class="number">10</span>]; <span class="comment">// 数出有多少数和当前数的第i位不同</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> diffCnt;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cntDiffsAndAdd</span>() / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="89-格雷编码"><a href="#89-格雷编码" class="headerlink" title="89. 格雷编码"></a><a href="https://leetcode.cn/problems/gray-code/description/">89. 格雷编码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">grayCode</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ans[i] = (i &gt;&gt; <span class="number">1</span>) ^ i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>推导一下公式为什么时正确的</p><p>要证明公式 $ a_i &#x3D; (i &gt;&gt; 1) \oplus i $ 是格雷码，就要证明 $ a_{i+1} \oplus a_{i} &#x3D; 2^{k_i} $ , 其中 $ k_i $ 是整数</p><p>设 $ i $的二进制从低位到高位第一个$ 0 $的位置是$ n $, 则 $ i \oplus (i + 1) &#x3D; 2^{n+1} - 1$，原因参考<a href="https://blog.csdn.net/gengduc/article/details/131425911">二进制自增计数器</a>的原理</p><p>$ a_{i+1} \oplus a_{i} $<br>$ &#x3D; (i &gt;&gt; 1) \oplus i \oplus ((i + 1) &gt;&gt; 1) \oplus (i + 1) $<br>$ &#x3D; (i \oplus (i + 1)) \oplus ((i \oplus (i + 1)) &gt;&gt; 1)$<br>$ &#x3D; (2^{n+1} - 1) \oplus (2^{n} - 1) $<br>$ &#x3D; 2^{n+1} $</p><h2 id="2708-一个小组的最大实力值"><a href="#2708-一个小组的最大实力值" class="headerlink" title="2708. 一个小组的最大实力值"></a>2708. 一个小组的最大实力值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maxStrength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> has2Neg = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> hasPositive = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> hasZero = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> negProduct = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            negProduct *= nums[i];</span><br><span class="line">            <span class="keyword">if</span>(negProduct &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans *= negProduct;</span><br><span class="line">                negProduct = <span class="number">1</span>;</span><br><span class="line">                has2Neg = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; nums[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            hasZero = <span class="literal">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">            ans *= nums[i];</span><br><span class="line">            i++;</span><br><span class="line">            hasPositive = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (has2Neg || hasPositive) ? ans :</span><br><span class="line">                (hasZero) ? <span class="number">0</span> : nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>除了0，全乘起来，如果负数有奇数个，去掉最大的负数</li><li>如果没有正数也没有成对的负数，但是有0，返回0</li><li>如果没有正数也没有成对的负数，没有0，返回唯一的负数</li></ul><blockquote><p>数据规模好小，给人一种很难的感觉</p></blockquote><h2 id="2024-考试的最大困扰度"><a href="#2024-考试的最大困扰度" class="headerlink" title="2024. 考试的最大困扰度"></a>2024. 考试的最大困扰度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> _maxConsecutiveAnswers(<span class="type">const</span> string&amp; answerKey, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = answerKey.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; answerKey[i] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; k &gt; <span class="number">0</span> &amp;&amp; answerKey[i] == <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                k--;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur = ans;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; answerKey[i] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;, &quot; &lt;&lt; ans &lt;&lt; &quot;, &quot; &lt;&lt; cur &lt;&lt; endl;</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cur);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len &amp;&amp; answerKey[i] == <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> k = j;</span><br><span class="line">                <span class="keyword">while</span>(k &lt; i &amp;&amp; answerKey[k] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur - (k - j + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; ans &lt;&lt; &quot;, &quot; &lt;&lt; cur &lt;&lt; endl;</span></span><br><span class="line">                ans = <span class="built_in">max</span>(ans, cur);</span><br><span class="line">                j = k + <span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxConsecutiveAnswers</span><span class="params">(string&amp; answerKey, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = _maxConsecutiveAnswers(answerKey, k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : answerKey) &#123;</span><br><span class="line">            x = <span class="string">&#x27;T&#x27;</span> + <span class="string">&#x27;F&#x27;</span> - x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res, _maxConsecutiveAnswers(answerKey, k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>要么把k步全都用在T变F上，要么k步全部是F变T</li><li>对于”TTFTTFTTFTT”，可以翻译成[2T, 1F, 2T, 1F, 2T, 1F, 2T], 假设k&#x3D;2，我们只需要考虑选前两个1F或后两个1F的情况，其他不连续的F的组合不需要考虑</li><li>经过上面的分析，可以使用双指针窗口<ul><li>先把k消耗光</li><li>指针i每遇到一个F，前面的指针j就要向前移动，找到一个F把这个F变成T，移动几步，就减少了多少个T（包括j当前指向的F，已经在前面被变成T了）</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;698-划分为k个相等的子集&quot;&gt;&lt;a href=&quot;#698-划分为k个相等的子集&quot; class=&quot;headerlink&quot; title=&quot;698. 划分为k个相等的子集&quot;&gt;&lt;/a&gt;698. 划分为k个相等的子集&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solve&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; bucket;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; canPartition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;gt;= n) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 所有数都放进来了，且没有超过target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 说明一定全等于target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 如果有桶&amp;lt;target, 则一定有桶&amp;gt;target，所以所有桶一定&amp;gt;=target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 如果有桶&amp;gt;target, 则一定有桶&amp;lt;target，所以所有桶一定&amp;lt;=target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 所以所有桶一定==target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; k; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; bucket[i] == bucket[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(bucket[i] + nums[index] &amp;lt;= target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bucket[i] += nums[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(index+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bucket[i] -= nums[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;Solve&lt;/span&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k):&lt;span class=&quot;built_in&quot;&gt;nums&lt;/span&gt;(nums), &lt;span class=&quot;built_in&quot;&gt;k&lt;/span&gt;(k), &lt;span class=&quot;built_in&quot;&gt;bucket&lt;/span&gt;(k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum = &lt;span class=&quot;built_in&quot;&gt;accumulate&lt;/span&gt;(nums.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            target = sum / k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(nums.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;built_in&quot;&gt;greater&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum % k != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                canPartition = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            canPartition = &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; canPartition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;canPartitionKSubsets&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Solve&lt;/span&gt;(nums, k).&lt;span class=&quot;built_in&quot;&gt;solve&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;硬搜&lt;/p&gt;
&lt;h2 id=&quot;690-员工的重要性&quot;&gt;&lt;a href=&quot;#690-员工的重要性&quot; class=&quot;headerlink&quot; title=&quot;690. 员工的重要性&quot;&gt;&lt;/a&gt;690. 员工的重要性&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getImportance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;Employee*&amp;gt; employees, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = employees.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unordered_map&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, Employee*&amp;gt; id2Node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Employee *employee : employees) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            id2Node[employee-&amp;gt;id] = employee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        function&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&amp;gt; dfs = [&amp;amp;](&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; currentId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Employee *node = id2Node[currentId];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ans = node-&amp;gt;importance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; child : node-&amp;gt;subordinates) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ans += &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;699-掉落的方块&quot;&gt;&lt;a href=&quot;#699-掉落的方块&quot; class=&quot;headerlink&quot; title=&quot;699. 掉落的方块&quot;&gt;&lt;/a&gt;699. 掉落的方块&lt;/h2&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>OI KIWI 01-倍增</title>
    <link href="https://jingtianer.github.io/home/2024/08/23/%E7%AE%97%E6%B3%95/OI-KIWI-01-%E5%80%8D%E5%A2%9E/"/>
    <id>https://jingtianer.github.io/home/2024/08/23/%E7%AE%97%E6%B3%95/OI-KIWI-01-%E5%80%8D%E5%A2%9E/</id>
    <published>2024-08-23T03:14:34.000Z</published>
    <updated>2025-04-15T02:37:55.628Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/basic/binary-lifting/">OI KIWI 倍增</a></p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p><img src="/home/./images/lifting_alogrithm.jpeg"></p><blockquote><p><a href="https://blog.csdn.net/bei2002315/article/details/126235995">图片来源</a></p></blockquote><h2 id="查找小于limit的最大数字"><a href="#查找小于limit的最大数字" class="headerlink" title="查找小于limit的最大数字"></a>查找小于limit的最大数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxValueInVecSmallerThenLimit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l + p &lt; n &amp;&amp; vec[l + p] &lt; limit) &#123;</span><br><span class="line">            l += p;</span><br><span class="line">            p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vec[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>和二分一样，需要在有序数组上查找</p></li><li><p>对于查找区间<code>[l, l + p)</code></p><ul><li>如果<code>vec[l+p] &gt;= limit</code>， 则最大值就在<code>[l, l + p)</code>区间上,下一步查询<code>[l, l + p / 2)</code></li><li>如果<code>vec[l+p] &lt; limit</code>， 则最大值不在<code>[l, l + p)</code>区间上,下一步查询<code>[l + p, l + 3*p)</code></li><li>如果<code>l+p &gt;= n</code>, 则缩小查找范围</li></ul></li><li><p>我们把上面的逻辑迭代两次</p><ul><li>如果<code>vec[l+p] &gt;= limit</code>， 则最大值就在<code>[l, l + p)</code>区间上,下一步查询<code>[l, l + p / 2)</code><ul><li>如果<code>vec[l+p/2] &gt;= limit</code>， 则最大值就在<code>[l, l + p/2)</code>区间上,下一步查询<code>[l, l + p / 4)</code></li><li>如果<code>vec[l+p/2] &lt; limit</code>， 则最大值不在<code>[l, l + p/2)</code>区间上,下一步查询<code>[l + p/2, l + p/2 + p)</code></li></ul></li><li>如果<code>vec[l+p] &lt; limit</code>， 则最大值不在<code>[l, l + p)</code>区间上,下一步查询<code>[l + p, l + 3*p)</code><ul><li>如果<code>vec[l+3*p] &gt;= limit</code>， 则最大值就在<code>[l + p, l + 3*p)</code>区间上,下一步查询<code>[l + p, l + 2*p)</code></li><li>如果<code>vec[l+3*p] &lt; limit</code>， 则最大值不在<code>[l + p, l + 3*p)</code>区间上,下一步查询<code>[l + 3 * p, l + 7 * p)</code></li></ul></li></ul></li></ul><h2 id="RMQ区间最值"><a href="#RMQ区间最值" class="headerlink" title="RMQ区间最值"></a>RMQ区间最值</h2><p>Range Maximum&#x2F;Minimum Query</p><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>用单调栈找到两个数组<code>left</code>和<code>right</code></p><ul><li><code>left[i]</code>代表<code>arr[i]</code>在<code>[left[i], i]</code>的区间上是最小值</li><li><code>right[i]</code>代表<code>arr[i]</code>在<code>[i, right[i]]</code>的区间上是最小值</li><li>对于一个查询<code>[l, r]</code><ul><li>如果<code>left[r] &lt;= l</code>, <code>arr[r]</code>是区间最小值</li><li>如果<code>right[l] &gt;= r</code>, <code>arr[l]</code>是区间最小值</li><li>否则<code>l = right[l] + 1</code>, <code>r = left[r] - 1</code>，缩小查找范围</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">RangeMinimumQuery</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; monoStack;</span><br><span class="line">    <span class="type">int</span> len = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(len)</span>, <span class="title">right</span><span class="params">(len, len - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        left[i] = right[i] = i;</span><br><span class="line">        <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[monoStack.<span class="built_in">top</span>()] &gt;= arr[i]) &#123;</span><br><span class="line">            top = monoStack.<span class="built_in">top</span>();</span><br><span class="line">            monoStack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top != <span class="number">-1</span>) left[i] = left[top];</span><br><span class="line">        monoStack.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    monoStack = <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[monoStack.<span class="built_in">top</span>()] &gt; arr[i]) &#123;</span><br><span class="line">            top = monoStack.<span class="built_in">top</span>();</span><br><span class="line">            monoStack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top != <span class="number">-1</span>) right[i] = right[top];</span><br><span class="line">        monoStack.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; query : queries) &#123;</span><br><span class="line">        <span class="type">int</span> l = query[<span class="number">0</span>], r = query[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(right[l] &lt; r &amp;&amp; left[r] &gt; l) &#123; </span><br><span class="line">            <span class="comment">// 有可能循环n/2次，退化成O(n), 如5,4,3,2,1,2,3,4,5</span></span><br><span class="line">            l = <span class="built_in">min</span>(len - <span class="number">1</span>, right[l] + <span class="number">1</span>);</span><br><span class="line">            r = <span class="built_in">max</span>(<span class="number">0</span>, left[r] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="built_in">min</span>(arr[l], arr[r]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><p>参考这里：<a href="https://oi-wiki.org/ds/sparse-table/">https://oi-wiki.org/ds/sparse-table/</a></p><p>适用范围：可重复贡献问题</p><ul><li>op(x, x) &#x3D; x, 一个操作重复计算等于其本身</li><li>比如max, min, gcd等操作</li><li>这样可以允许我们划分子问题时，即使子问题之间存在重叠，也可以获得正确的结果</li></ul><p>$ ST[i][j] &#x3D; min(arr[i…(i + 2^j - 1)]) $ (闭区间)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6,5,1,4,6,1,5,3</span></span><br><span class="line"><span class="comment">稀疏表</span></span><br><span class="line"><span class="comment">0 1 3 7</span></span><br><span class="line"><span class="comment">0 1 2 3</span></span><br><span class="line"><span class="comment">———————</span></span><br><span class="line"><span class="comment">6 5 4 1</span></span><br><span class="line"><span class="comment">5 1 1 1</span></span><br><span class="line"><span class="comment">1 1 1 1</span></span><br><span class="line"><span class="comment">4 4 5 1</span></span><br><span class="line"><span class="comment">6 1 1 1</span></span><br><span class="line"><span class="comment">1 1 1 1</span></span><br><span class="line"><span class="comment">5 3 3 3</span></span><br><span class="line"><span class="comment">3 3 3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可见构造的时间为O(nlogn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0...1 1...2 2...3 3...4 4...5 5...6 6...7</span></span><br><span class="line"><span class="comment">0...3 1...4 2...5 3...6 4...7 5...7 6...7</span></span><br><span class="line"><span class="comment">0...7 1...7 2...7 3...7 4...7 5...7 6...7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0...2 -&gt; 0...1, 1...2</span></span><br><span class="line"><span class="comment">0...4 -&gt; 0...3, 1...4</span></span><br><span class="line"><span class="comment">0...5 -&gt; 0...3, 2...5</span></span><br><span class="line"><span class="comment">0...6 -&gt; 0...3, 3...6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>一个查询有可拆成同一行的两个子数组</p><p>因为 $ ST[i][j] &#x3D; min(arr[i…(i + 2^j - 1)]) $</p><p>$ start &#x3D; i $ , $end &#x3D; i + 2^j - 1$</p><p>解得<br>$j &#x3D; log(end - start + 1)$</p><p>要查 $ 0 … 6 $，查询 $ (0, log(6-0+1)) $ &#x3D; $ (0, 2) $ &#x3D; $ 0 … 3 $<br>下面查 $ 3 … 6 $，查询 $ (3, 2) $ &#x3D; $ (6 - 2^2 + 1, 2) $<br>公式是这么来的：<br>$a…b$ &#x3D; $(a, a + 2^j - 1)$ &#x3D; $(b - 2^j + 1, b)$</p><p>要查$0 … 5$，查询$(0, log(5-0+1))$ &#x3D; $(0, 2)$ &#x3D; $0 … 3$<br>下面查$ 2 … 5 $, 查询$(2, 2)$ &#x3D; $(5 - 2^2 + 1, 2)$<br>也就是说，要查询$ a…b $<br>相当于$ min(a…(a+2^j-1), (b - 2^j + 1)…b) $<br>$ min(ST[a][j], ST[b-2^j+1][j]), j &#x3D; log2(b-a+1)$</p><p>如何构造ST表：<br>$ (i, i + 2^j - 1) &#x3D; (i, i + 2^{j-1} - 1), (i + 2^{j-1}, i + 2^j - 1) $<br>$ ST[i][j] &#x3D; min(ST[i][j-1], ST[i+j][j-1]) $ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">RMQ</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; array, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; query)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = array.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> log_n = <span class="built_in">log2</span>(n);</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ST</span>(n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ST[i].<span class="built_in">push_back</span>(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sum[p=1...log2(n)](n-p) = n*log2(n) - (log2(n)+1)*log2(n)/2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= log_n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="type">int</span> off = <span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + off &lt; n; i++) &#123; <span class="comment">// n - j</span></span><br><span class="line">            ST[i].<span class="built_in">push_back</span>(<span class="built_in">min</span>(ST[i][j<span class="number">-1</span>], ST[i+off][j<span class="number">-1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [start, end] : query) &#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">log2</span>(end - start + <span class="number">1</span>);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="built_in">min</span>(ST[start][pos], ST[end - (<span class="number">1</span> &lt;&lt; pos) + <span class="number">1</span>][pos]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>对指数进行二进制分解<br>$ n $ &#x3D; 22 &#x3D; 10110 &#x3D; $2^4 + 2^2 + 2^1$<br>$ a^{n} &#x3D; a^{2^4} \times a^{2^2} \times a^{2^1}$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fastPow</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> pow, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span> % mod; <span class="comment">// 注意要在最初或最后对ans取mod，以应对pow = 0, mod = 1的情况</span></span><br><span class="line">    <span class="keyword">while</span>(pow) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pow &amp; <span class="number">1</span>) ans = (ans * base) % mod;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        pow &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA最近公共祖先"><a href="#LCA最近公共祖先" class="headerlink" title="LCA最近公共祖先"></a>LCA最近公共祖先</h2><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode *l = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode *r = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="literal">nullptr</span> &amp;&amp; r != <span class="literal">nullptr</span>) <span class="keyword">return</span> root; <span class="comment">// p和q分别在左右子树中找到</span></span><br><span class="line">        <span class="keyword">return</span> l == <span class="literal">nullptr</span> ? r : l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复杂度为$ O(n) $<br>对于$m$次查询,复杂度为$O(m \times n)$</p><h3 id="ST表-1"><a href="#ST表-1" class="headerlink" title="ST表"></a>ST表</h3><p>当查找两个节点node0和node1的最近公共祖先时</p><ul><li>如果node0和node1在同一层，深度为<code>d</code><ul><li>如果两个节点在深度<code>d-k</code>层处的祖先是同一个<ul><li>那么说明最近公共祖先在<code>[d-k, d+1]</code></li><li><code>k</code>偏大了，需要减小</li></ul></li><li>如果两个节点在深度<code>d-k</code>层处的祖先不是同一个<ul><li>那么说明最近公共祖先在<code>[0, d-k]</code></li><li>将两个节点移动到各自<code>d-k</code>层处的祖先处</li></ul></li></ul></li></ul><p>如此迭代，就可以将区间不断缩小，最后定位到最近公共祖先<br>如果<code>k</code>取当前深度的一半，就可以达到<code>log(depth)</code>的复杂度</p><p><code>ST[i][j]</code>表示节点<code>i</code>向上<code>2^j</code>层的祖先节点<br>$ 2^j &lt; depth, j&#x3D;0…floor(log2(depth))$<br>转移方程为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ST[i][j] = ST[ST[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>这里就用到了倍增的思想</p><ul><li>如果node0和node1在不同一层，可以先将深度较深的节点向上移动<br>假设高度差为5&#x3D;101<br>则<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node = ST[node][<span class="number">0</span>] <span class="comment">// j = 0, 2^0</span></span><br><span class="line">node = ST[node][<span class="number">2</span>] <span class="comment">// j = 2, 2^2</span></span><br></pre></td></tr></table></figure>将高度差的二进制分解，即可以<code>log(dep1 - dep2)</code>的复杂度将两个节点放到同一层</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LCA</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree; <span class="comment">// tree[i][j]代表节点i的第j个孩子在tree中的索引</span></span><br><span class="line">    <span class="type">int</span> N; <span class="comment">// 节点总数</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ST; <span class="comment">// ST[i][j]表示节点i向上2^j层的祖先节点</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; depth; <span class="comment">// depth[i]代表节点的深度</span></span><br><span class="line">    <span class="type">int</span> maxDepth = <span class="number">0</span>; <span class="comment">// 树的深度</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfsInit</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> dep)</span> </span>&#123;</span><br><span class="line">        depth[root] = dep; <span class="comment">// 每个节点的深度</span></span><br><span class="line">        maxDepth = <span class="built_in">max</span>(maxDepth, dep);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> child : tree[root]) &#123;</span><br><span class="line">            <span class="built_in">dfsInit</span>(child, dep + <span class="number">1</span>);</span><br><span class="line">            ST[child][<span class="number">0</span>] = root;<span class="comment">// child节点向上2^0=1层的父节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initST</span><span class="params">()</span> </span>&#123; <span class="comment">// i向上2^j层的父节点 = i向上向上2^(j-1)层父节点再向上2^(j-1)层的父节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= maxDepth; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                ST[i].<span class="built_in">push_back</span>(ST[ST[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LCA</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree, <span class="type">int</span> N): </span><br><span class="line">        <span class="built_in">tree</span>(tree), <span class="built_in">N</span>(N), <span class="built_in">depth</span>(N), <span class="built_in">ST</span>(N, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">dfsInit</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">initST</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LCA</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree):<span class="built_in">LCA</span>(tree, tree.<span class="built_in">size</span>()) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> node0, <span class="type">int</span> node1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[node0] &gt; depth[node1]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(node0, node1); <span class="comment">// node1为深度更深的节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> depDiff = depth[node1] - depth[node0];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; depDiff; depDiff &gt;&gt;= <span class="number">1</span>, i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(depDiff &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                node1 = ST[node1][i]; <span class="comment">// 向上移动node1，两者depth相同</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node1 == node0) <span class="keyword">return</span> node0;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">log2</span>(maxDepth); i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 每次向上查询的深度减半</span></span><br><span class="line">            <span class="keyword">if</span>(ST[node0][i] != ST[node1][i]) &#123; <span class="comment">// 向上的祖先节点不同，移动到各自祖先节点上</span></span><br><span class="line">                node0 = ST[node0][i];</span><br><span class="line">                node1 = ST[node1][i];</span><br><span class="line">            &#125; <span class="comment">// else 向上的祖先节点相同，继续减小深度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ST[node0][<span class="number">0</span>]; <span class="comment">// node0或node1的父节点就是lca</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>每次查询的复杂度为<ul><li>$O(log(depth))$</li></ul></li><li>预处理的时间复杂度为<ul><li>$O(log(n \times log(depth)))$</li></ul></li><li>$ m $ 次查询的复杂度为<ul><li>$ O((m + n) \times log(depth)) $</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://oi-wiki.org/basic/binary-lifting/&quot;&gt;OI KIWI 倍增&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/home/./images/lifting_alogrithm.jpeg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/bei2002315/article/details/126235995&quot;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查找小于limit的最大数字&quot;&gt;&lt;a href=&quot;#查找小于limit的最大数字&quot; class=&quot;headerlink&quot; title=&quot;查找小于limit的最大数字&quot;&gt;&lt;/a&gt;查找小于limit的最大数字&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxValueInVecSmallerThenLimit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; vec, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; limit)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = vec.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; p = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l + p &amp;lt; n &amp;amp;&amp;amp; vec[l + p] &amp;lt; limit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l += p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p &amp;lt;&amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec[l];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OI KIWI" scheme="https://jingtianer.github.io/home/categories/OI-KIWI/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/categories/OI-KIWI/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://jingtianer.github.io/home/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="OI KIWI" scheme="https://jingtianer.github.io/home/tags/OI-KIWI/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-36</title>
    <link href="https://jingtianer.github.io/home/2024/08/18/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9336/"/>
    <id>https://jingtianer.github.io/home/2024/08/18/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9336/</id>
    <published>2024-08-18T03:14:34.000Z</published>
    <updated>2025-04-15T02:37:55.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="551-学生出勤记录-I"><a href="#551-学生出勤记录-I" class="headerlink" title="551. 学生出勤记录 I"></a><a href="https://leetcode.cn/problems/student-attendance-record-i/description/?envType=daily-question&envId=2024-08-18">551. 学生出勤记录 I</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkRecord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_seq_late = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> seq_late = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;A&#x27;</span>) count++;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                seq_late++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                max_seq_late = <span class="built_in">max</span>(max_seq_late, seq_late);</span><br><span class="line">                seq_late = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_seq_late = <span class="built_in">max</span>(max_seq_late, seq_late);</span><br><span class="line">        <span class="keyword">return</span> count &lt; <span class="number">2</span> &amp;&amp; max_seq_late &lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>连续相同的值的个数</li><li>统计元素出现的次数</li></ul><h2 id="3137-K-周期字符串需要的最少操作次数"><a href="#3137-K-周期字符串需要的最少操作次数" class="headerlink" title="3137. K 周期字符串需要的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-word-k-periodic/description/?envType=daily-question&envId=2024-08-17">3137. K 周期字符串需要的最少操作次数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperationsToMakeKPeriodic</span><span class="params">(string word, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; subStrCount;</span><br><span class="line">        <span class="type">int</span> len = word.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += k) &#123;</span><br><span class="line">            subStrCount[word.<span class="built_in">substr</span>(i, k)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> minOpCnt = len / k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; ite : subStrCount) &#123;</span><br><span class="line">            minOpCnt = <span class="built_in">min</span>(minOpCnt, len / k - ite.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minOpCnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>翻译一下规则，就是把长度为<code>nk</code>的字符串切割成<code>n</code>个长度为<code>k</code>的子串，一次操作可以把一个子串替换成另一个字串，求如何替换，将所有字串都相同。</li><li>翻译好需求，就很清楚了，直接统计每个字串出现的次数，取出现次数最大的，替换次数最少，为<code>n - cnt[i]</code></li></ul><h2 id="3117-划分数组得到最小的值之和"><a href="#3117-划分数组得到最小的值之和" class="headerlink" title="3117. 划分数组得到最小的值之和"></a><a href="https://leetcode.cn/problems/minimum-sum-of-values-by-dividing-array/description/?envType=daily-question&envId=2024-08-16">3117. 划分数组得到最小的值之和</a></h2><h3 id="超时暴搜"><a href="#超时暴搜" class="headerlink" title="超时暴搜"></a>超时暴搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> minSum = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumValueSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; andValues)</span> </span>&#123;</span><br><span class="line">        n = nums.<span class="built_in">size</span>();</span><br><span class="line">        m = andValues.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;&gt; <span class="built_in">andMat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(n, INT_MAX));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            andMat[i][i] = nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                andMat[i][j] = andMat[i][j<span class="number">-1</span>] &amp; nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">search</span>(andMat, andValues, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> minSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;&gt;&amp; andMat, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; andValues, <span class="type">int</span> depth, <span class="type">int</span> start, <span class="type">unsigned</span> <span class="type">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth + <span class="number">1</span> == m) &#123;</span><br><span class="line">            <span class="keyword">if</span>(andMat[start][n<span class="number">-1</span>] == andValues[m<span class="number">-1</span>]) &#123;</span><br><span class="line">                minSum = <span class="built_in">min</span>(minSum, sum + andMat[n<span class="number">-1</span>][n<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = start + <span class="number">1</span>; i &lt; n - m + depth + <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(andMat[start][i<span class="number">-1</span>] == andValues[depth]) &#123;</span><br><span class="line">                <span class="built_in">search</span>(andMat, andValues, depth + <span class="number">1</span>, i, sum + andMat[i<span class="number">-1</span>][i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3148-矩阵中的最大得分"><a href="#3148-矩阵中的最大得分" class="headerlink" title="3148. 矩阵中的最大得分"></a><a href="https://leetcode.cn/problems/maximum-difference-score-in-a-grid/description/?envType=daily-question&envId=2024-08-15">3148. 矩阵中的最大得分</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MIN));</span><br><span class="line">        <span class="type">int</span> maxScore = INT_MIN;</span><br><span class="line">        mat[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>) mat[i][j] = <span class="built_in">max</span>(<span class="built_in">max</span>(mat[i][j], grid[i][j] - grid[i<span class="number">-1</span>][j]), mat[i<span class="number">-1</span>][j] + grid[i][j] - grid[i<span class="number">-1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span>) mat[i][j] = <span class="built_in">max</span>(<span class="built_in">max</span>(mat[i][j], grid[i][j] - grid[i][j<span class="number">-1</span>]), mat[i][j<span class="number">-1</span>] + grid[i][j] - grid[i][j<span class="number">-1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span> || j &gt; <span class="number">0</span>) maxScore = <span class="built_in">max</span>(maxScore, mat[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxScore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>只能向下或向右走，所以右下方的格子不会影响左上方格子的最终结果，直接拿上方格子和左方格子的值计算，并存储到达每个格子的最小值就好。</li></ul><h2 id="3152-特殊数组-II"><a href="#3152-特殊数组-II" class="headerlink" title="3152. 特殊数组 II"></a><a href="https://leetcode.cn/problems/special-array-ii/description/?envType=daily-question&envId=2024-08-14">3152. 特殊数组 II</a></h2><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isArraySpecial</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; startIndex, endIndex;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(((nums[i] &amp; <span class="number">1</span>) ^ (nums[i<span class="number">-1</span>] &amp; <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">                startIndex.<span class="built_in">push_back</span>(s);</span><br><span class="line">                endIndex.<span class="built_in">push_back</span>(i - <span class="number">1</span>);</span><br><span class="line">                s = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        startIndex.<span class="built_in">push_back</span>(s);</span><br><span class="line">        endIndex.<span class="built_in">push_back</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> start = query[<span class="number">0</span>], end = query[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> findIndex = <span class="built_in">upper_bound</span>(startIndex.<span class="built_in">begin</span>(), startIndex.<span class="built_in">end</span>(), start) - startIndex.<span class="built_in">begin</span>() - <span class="number">1</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(endIndex[findIndex] &gt;= end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>lower_bound</code>: 直译是下界，实际上是上确界，也就是可以等于被查找的元素</li><li><code>upper_bound</code>: 直译是上界，也就是不可以等于被查找的元素</li></ul><h3 id="模仿线段树"><a href="#模仿线段树" class="headerlink" title="模仿线段树"></a>模仿线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SegTree</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;&amp; nums;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; segTree;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">int</span> alignedSize;</span><br><span class="line">        <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">alignment</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> mask = <span class="number">0x80000000</span>;</span><br><span class="line">            <span class="keyword">while</span>(mask &amp;&amp; !(mask &amp; n)) mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (n &amp; (n<span class="number">-1</span>)) != <span class="number">0</span> ? (mask &lt;&lt; <span class="number">1</span>) : mask; <span class="comment">// 得到大于等于n的2的幂</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">initSegTreeLeaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - (n &amp; <span class="number">1</span>); i+=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> leftIndex = alignedSize + i - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> rightIndex = alignedSize + i;</span><br><span class="line">                leftIndex = (leftIndex - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                segTree[leftIndex] = ((nums[i] &amp; <span class="number">1</span>) ^ (nums[i+<span class="number">1</span>] &amp; <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">initSegTree</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="type">int</span> mid = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">            <span class="keyword">if</span>(start &gt;= end) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(index &gt;= alignedSize / <span class="number">2</span>) <span class="keyword">return</span> segTree[index];</span><br><span class="line">            <span class="keyword">if</span>(mid &gt;= <span class="number">0</span> &amp;&amp; mid + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                segTree[index] = (nums[mid] &amp; <span class="number">1</span>) ^ (nums[mid+<span class="number">1</span>] &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            segTree[index] = segTree[index] &amp; <span class="built_in">initSegTree</span>(start, mid, <span class="number">2</span> * index + <span class="number">1</span>) &amp; <span class="built_in">initSegTree</span>(mid+<span class="number">1</span>, end, <span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> segTree[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> j, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="type">int</span> mid = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">            <span class="keyword">if</span>(start == end) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= start &amp;&amp; end &lt;= j) &#123;</span><br><span class="line">                <span class="keyword">return</span> segTree[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mid &gt;= i &amp;&amp; mid + <span class="number">1</span> &lt;= j &amp;&amp; !((nums[mid] &amp; <span class="number">1</span>) ^ (nums[mid+<span class="number">1</span>] &amp; <span class="number">1</span>))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid &gt;= i &amp;&amp; !<span class="built_in">query</span>(i, j, start, mid, <span class="number">2</span> * index + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= j &amp;&amp; !<span class="built_in">query</span>(i, j, mid+<span class="number">1</span>, end, <span class="number">2</span> * index + <span class="number">2</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">SegTree</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums): \</span><br><span class="line">            <span class="built_in">nums</span>(nums), <span class="built_in">n</span>(nums.<span class="built_in">size</span>()), \</span><br><span class="line">            <span class="built_in">alignedSize</span>(<span class="built_in">alignment</span>(n)) &#123;</span><br><span class="line">            segTree = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(alignedSize, <span class="literal">true</span>); <span class="comment">// 不用乘2，因为叶子节点全是true</span></span><br><span class="line">            <span class="built_in">initSegTreeLeaf</span>();</span><br><span class="line">            <span class="built_in">initSegTree</span>(<span class="number">0</span>, alignedSize - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(i, j, <span class="number">0</span>, alignedSize - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isArraySpecial</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">        <span class="function">SegTree <span class="title">segTree</span><span class="params">(nums)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">            <span class="type">bool</span> result = segTree.<span class="built_in">query</span>(q[<span class="number">0</span>], q[<span class="number">1</span>]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>哎，速度不是很快<code>279ms 击败13.48%</code></p><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><h2 id="3151-特殊数组-I"><a href="#3151-特殊数组-I" class="headerlink" title="3151. 特殊数组 I"></a><a href="https://leetcode.cn/problems/special-array-i/description/?envType=daily-question&envId=2024-08-13">3151. 特殊数组 I</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isArraySpecial</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> odd = nums[<span class="number">0</span>] &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((nums[i] &amp; <span class="number">1</span>) == odd) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            odd = !odd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="676-实现一个魔法字典"><a href="#676-实现一个魔法字典" class="headerlink" title="676. 实现一个魔法字典"></a><a href="https://leetcode.cn/problems/implement-magic-dictionary/description/?envType=daily-question&envId=2024-08-12">676. 实现一个魔法字典</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MagicDictionary</span> &#123;</span><br><span class="line">    vector&lt;string&gt; dictionary;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MagicDictionary</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildDict</span><span class="params">(vector&lt;string&gt; dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;dictionary = dictionary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string searchWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; word : dictionary) &#123;</span><br><span class="line">            <span class="keyword">if</span>(word.<span class="built_in">size</span>() != searchWord.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(word[i] != searchWord[i]) &#123;</span><br><span class="line">                    diff++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(diff == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a href="https://leetcode.cn/problems/uncrossed-lines/description/?envType=daily-question&envId=2024-08-11">1035. 不相交的线</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3132-找出与数组相加的整数-II"><a href="#3132-找出与数组相加的整数-II" class="headerlink" title="3132. 找出与数组相加的整数 II"></a>3132. 找出与数组相加的整数 II</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumAddedInteger</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> x = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> start = <span class="number">0</span>; start &lt; <span class="number">3</span>; start++) &#123;</span><br><span class="line">            <span class="type">int</span> skip = <span class="number">2</span> - start;</span><br><span class="line">            <span class="type">int</span> diff = nums2[<span class="number">0</span>] - nums1[start];</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt; len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums2[i] - nums1[start+j] != diff) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(skip &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        skip--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                x = <span class="built_in">min</span>(x, diff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>先排序，计算差值，看是否所有差值都相同</li><li>由于数组1的长度比数组2长2，所以比时给数组1一个偏移</li><li>由于需要删除两个，且删除的位置不同，比较时如果遇到不相等的情况，则根据情况跳过一个</li></ul><h2 id="3131-找出与数组相加的整数-I"><a href="#3131-找出与数组相加的整数-I" class="headerlink" title="3131. 找出与数组相加的整数 I"></a>3131. 找出与数组相加的整数 I</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addedInteger</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>()) - *<span class="built_in">max_element</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3129-找出所有稳定的二进制数组-I"><a href="#3129-找出所有稳定的二进制数组-I" class="headerlink" title="3129. 找出所有稳定的二进制数组 I"></a>3129. 找出所有稳定的二进制数组 I</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">long</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfStableArrays</span><span class="params">(<span class="type">int</span> zero, <span class="type">int</span> one, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连续的0和1的个数不超过limit</span></span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; dp0 = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(zero + <span class="number">1</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(one + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(limit+<span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; dp1 = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(zero + <span class="number">1</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(one + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(limit+<span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z = <span class="number">1</span>; z &lt;= <span class="built_in">min</span>(zero, limit); z++) &#123;</span><br><span class="line">            dp0[z][<span class="number">0</span>][z] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> o = <span class="number">1</span>; o &lt;= <span class="built_in">min</span>(one, limit); o++) &#123;</span><br><span class="line">            dp1[<span class="number">0</span>][o][o] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z = <span class="number">1</span>; z &lt;= zero; z++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> o = <span class="number">1</span>; o &lt;= one; o++) &#123;</span><br><span class="line">                <span class="type">int</span> dp01 = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> dp11 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>; l &lt;= limit; l++) &#123;</span><br><span class="line">                    dp01 = (dp01 + dp1[z<span class="number">-1</span>][o][l]) % MOD; <span class="comment">// 含有z-1个0，o个1，末尾连续1的个数为l，的数后面加一个0，变成z+1个0，o个1，末尾连续0的个数为1的数</span></span><br><span class="line">                    dp11 = (dp11 + dp0[z][o<span class="number">-1</span>][l]) % MOD; <span class="comment">// 含有z个0，o-1个1，末尾连续0的个数为l，的数后面加一个1，变成z个0，o+1个1，末尾连续1的个数为1的数</span></span><br><span class="line">                    dp0[z][o][l] += dp0[z<span class="number">-1</span>][o][l<span class="number">-1</span>]; <span class="comment">// 含有z-1个0，o个1，末尾连续0的个数为l-1，的数后面再加一个0，变成z+1个0，o个1，末尾连续0的个数为l的数</span></span><br><span class="line">                    dp1[z][o][l] += dp1[z][o<span class="number">-1</span>][l<span class="number">-1</span>]; <span class="comment">// 含有z-1个0，o个1，末尾连续0的个数为l-1，的数后面再加一个1，变成z个0，o+1个1，末尾连续1的个数为l的数</span></span><br><span class="line">                &#125;</span><br><span class="line">                dp0[z][o][<span class="number">1</span>] += dp01;</span><br><span class="line">                dp1[z][o][<span class="number">1</span>] += dp11;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = limit; l &gt;= <span class="number">1</span>; l--) &#123;</span><br><span class="line">            ans = (ans + (dp0[zero][one][l] + dp1[zero][one][l]) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>答案还可以降维</li></ul><h2 id="600-不含连续1的非负整数"><a href="#600-不含连续1的非负整数" class="headerlink" title="600. 不含连续1的非负整数"></a>600. 不含连续1的非负整数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(!(i &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">search</span>((i &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">search</span>((i &lt;&lt; <span class="number">1</span>) | <span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findIntegers</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">search</span>(<span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">return</span> cnt + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="572-另一棵树的子树"><a href="#572-另一棵树的子树" class="headerlink" title="572. 另一棵树的子树"></a>572. 另一棵树的子树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findNode</span><span class="params">(TreeNode* root, <span class="type">int</span> val, vector&lt;TreeNode*&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == val) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">findNode</span>(root-&gt;left, val, result);</span><br><span class="line">        <span class="built_in">findNode</span>(root-&gt;right, val, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> _isSubTree(TreeNode *root, TreeNode* subRoot) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span> || subRoot == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root == subRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val != subRoot-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _isSubTree(root-&gt;left, subRoot-&gt;left) &amp;&amp; _isSubTree(root-&gt;right, subRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode*&gt; nodes;</span><br><span class="line">        <span class="built_in">findNode</span>(root, subRoot-&gt;val, nodes);</span><br><span class="line">        <span class="keyword">for</span>(TreeNode* node : nodes) &#123;</span><br><span class="line">            <span class="keyword">if</span>(_isSubTree(node, subRoot)) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3143-正方形中的最多点数"><a href="#3143-正方形中的最多点数" class="headerlink" title="3143. 正方形中的最多点数"></a>3143. 正方形中的最多点数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPointsInsideSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> getLineLen = [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; point) &#123; <span class="comment">// 点所在正方形的边长/2，用来代表一个正方形</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(point[<span class="number">0</span>]), <span class="built_in">abs</span>(point[<span class="number">1</span>]));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> len = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedIndex</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(sortedIndex.<span class="built_in">begin</span>(), sortedIndex.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(sortedIndex.<span class="built_in">begin</span>(), sortedIndex.<span class="built_in">end</span>(), [&amp;points, &amp;getLineLen](<span class="type">int</span> a, <span class="type">int</span> b)&#123; <span class="keyword">return</span> <span class="built_in">getLineLen</span>(points[a]) &lt; <span class="built_in">getLineLen</span>(points[b]); &#125;);</span><br><span class="line">        <span class="comment">// 按照点所在正方形的边长排序</span></span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; labelSet; <span class="comment">// 记录出现过的label，不允许出现相同的label</span></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; valid) &#123;</span><br><span class="line">            <span class="type">int</span> index = sortedIndex[i];</span><br><span class="line">            <span class="type">int</span> lineLen = <span class="built_in">getLineLen</span>(points[index]);</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; lineLen == <span class="built_in">getLineLen</span>(points[index = sortedIndex[i]])) &#123;</span><br><span class="line">                <span class="comment">// 遍历所有相同边长的点</span></span><br><span class="line">                <span class="type">char</span> label = s[index];</span><br><span class="line">                <span class="keyword">if</span>(labelSet.<span class="built_in">count</span>(label)) &#123;</span><br><span class="line">                    valid = <span class="literal">false</span>; <span class="comment">// 这个正方形的边上遇到了出现过的label，这个正方形失效，更大的正方形也失效</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                labelSet.<span class="built_in">insert</span>(label);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valid) &#123; <span class="comment">// 对于合法正方形，更新点数</span></span><br><span class="line">                maxcnt = cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxcnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3128-直角三角形"><a href="#3128-直角三角形" class="headerlink" title="3128. 直角三角形"></a>3128. 直角三角形</h2><h3 id="四次前缀和"><a href="#四次前缀和" class="headerlink" title="四次前缀和"></a>四次前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfRightTriangles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; verticalSum;</span><br><span class="line">        verticalSum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> horSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                verticalSum[j] += grid[i][j];</span><br><span class="line">                horSum += grid[i][j];</span><br><span class="line">                number += (horSum - <span class="number">1</span>) * (verticalSum[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        verticalSum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> horSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                verticalSum[j] += grid[i][j];</span><br><span class="line">                horSum += grid[i][j];</span><br><span class="line">                number += (horSum - <span class="number">1</span>) * (verticalSum[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        verticalSum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> horSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                verticalSum[j] += grid[i][j];</span><br><span class="line">                horSum += grid[i][j];</span><br><span class="line">                number += (horSum - <span class="number">1</span>) * (verticalSum[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        verticalSum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> horSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                verticalSum[j] += grid[i][j];</span><br><span class="line">                horSum += grid[i][j];</span><br><span class="line">                number += (horSum - <span class="number">1</span>) * (verticalSum[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LCP-40-心算挑战"><a href="#LCP-40-心算挑战" class="headerlink" title="LCP 40. 心算挑战"></a>LCP 40. 心算挑战</h2><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; odd, even;</span><br><span class="line">        <span class="built_in">sort</span>(cards.<span class="built_in">begin</span>(), cards.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> card : cards) &#123;</span><br><span class="line">            ((card &amp; <span class="number">1</span>) ? odd : even).<span class="built_in">push_back</span>(card);</span><br><span class="line">            <span class="comment">// 三目运算符的这种用法终于被我用上了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> odd_index = odd.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> even_index = even.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt) &#123;</span><br><span class="line">            <span class="type">bool</span> has2_odd = odd_index &gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> has2_even = even_index &gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> cnt_at_least_2 = cnt &gt;= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(has2_odd &amp;&amp; has2_even &amp;&amp; cnt_at_least_2) &#123;</span><br><span class="line">                <span class="keyword">if</span>(even[even_index] &gt;= odd[odd_index] + odd[odd_index - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> do_even;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(odd[odd_index] + odd[odd_index - <span class="number">1</span>] &gt;= even[even_index] + even[even_index - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> do_odd;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">goto</span> do2_even;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>((cnt == <span class="number">1</span> || odd_index == <span class="number">0</span>) &amp;&amp; even_index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// odd或cnt为1，even大于0, 取even</span></span><br><span class="line">                    <span class="keyword">goto</span> do_even;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(odd_index &lt; <span class="number">0</span> &amp;&amp; even_index &gt;= <span class="number">0</span> &amp;&amp; cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// odd为0，even不为0，cnt大于1，取even</span></span><br><span class="line">                    <span class="keyword">goto</span> do_even;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(even_index == <span class="number">0</span> &amp;&amp; odd_index &gt;= <span class="number">1</span> &amp;&amp; cnt &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">goto</span> do_odd;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(even[even_index] &gt; odd[odd_index] + odd[odd_index - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">goto</span> do_even;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">goto</span> do_odd;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(even_index &lt; <span class="number">0</span> &amp;&amp; odd_index &gt;= <span class="number">1</span> &amp;&amp; cnt &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> do_odd;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            do_odd:</span><br><span class="line">            score += odd[odd_index] + odd[odd_index - <span class="number">1</span>];</span><br><span class="line">            cnt -= <span class="number">2</span>;</span><br><span class="line">            odd_index -= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">            do2_even:</span><br><span class="line">            score += even[even_index] + even[even_index - <span class="number">1</span>];</span><br><span class="line">            cnt -= <span class="number">2</span>;</span><br><span class="line">            even_index -= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">            do_even:</span><br><span class="line">            score += even[even_index];</span><br><span class="line">            cnt -= <span class="number">1</span>;</span><br><span class="line">            even_index -= <span class="number">1</span>;</span><br><span class="line">            next:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt == <span class="number">0</span> ? score : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>先排序，然后按照奇偶性分成两个数组</li><li>贪心，每次从奇数数组中取出两个奇数，或者从偶数数组中取数，直到取完数组，或者奇数数组剩一个，或者取够了cnt个数</li><li>如何选取：<ul><li>由于奇数数组每次取两个，占用两个cnt资源，而偶数数组可以取一个也可以取两个，导致前面的取法会影响后续cnt能否刚好取够。</li><li>是连续取两个偶数，还是取两个奇数，还是只取一个偶数？<ul><li><code>odd=[...,3,7]</code>, <code>even=[...,12]</code>,由于偶数数组中<code>12</code>大于奇数数组的<code>3+7</code>，所以取<code>12</code>,<code>(一个偶数完胜)</code></li><li><code>odd=[...,3,7]</code>, <code>even=[...,6,6]</code>,这次<code>6</code>小于<code>3+7</code>,可是连续取<code>两个6</code>的得分大于<code>3+7</code>，所以取<code>6+6</code>。<code>(两个奇数拉低了平均值)</code></li><li><code>odd=[...,3,7]</code>, <code>even=[...,2,6]</code>,这次<code>6</code>小于<code>3+7</code>，连续两次都选择偶数<code>2+6</code>也比选择<code>3+7</code>两个奇数小，所以选两个奇数</li></ul></li><li>以上选取策略需要<code>len(odd) &gt;= 2</code> <code>and</code> <code>len(even) &gt;= 2</code> <code>and</code> <code>ret &gt;= 2</code></li><li>下面讨论不满足以上情况，也就是<code>len(odd)</code>,<code>len(even)</code>,<code>ret</code>不会同时大于等于<code>2</code>的情况</li><li>由于可能的情况太多太复杂，列表讨论</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">odd     even    cnt     do</span></span><br><span class="line"><span class="comment">// odd或cnt为1，even大于0,只能取even</span></span><br><span class="line"><span class="comment">2+      2+      1       even</span></span><br><span class="line"><span class="comment">2       2+      1       even</span></span><br><span class="line"><span class="comment">1       2+      2+      even</span></span><br><span class="line"><span class="comment">1       2+      2       even</span></span><br><span class="line"><span class="comment">1       2+      1       even</span></span><br><span class="line"><span class="comment">0       2+      1       even</span></span><br><span class="line"><span class="comment">2+      2       1       even</span></span><br><span class="line"><span class="comment">2       2       1       even</span></span><br><span class="line"><span class="comment">1       2       2+      even</span></span><br><span class="line"><span class="comment">1       2       2       even</span></span><br><span class="line"><span class="comment">1       2       1       even</span></span><br><span class="line"><span class="comment">0       2       1       even</span></span><br><span class="line"><span class="comment">2+      1       1       even</span></span><br><span class="line"><span class="comment">2       1       1       even</span></span><br><span class="line"><span class="comment">1       1       2+      even</span></span><br><span class="line"><span class="comment">1       1       2       even</span></span><br><span class="line"><span class="comment">1       1       1       even</span></span><br><span class="line"><span class="comment">0       1       1       even</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// odd为0，even不为0，cnt大于1，取even</span></span><br><span class="line"><span class="comment">0       2+      2+      even</span></span><br><span class="line"><span class="comment">0       2+      2       even</span></span><br><span class="line"><span class="comment">0       2       2+      even</span></span><br><span class="line"><span class="comment">0       2       2       even</span></span><br><span class="line"><span class="comment">0       1       2+      even</span></span><br><span class="line"><span class="comment">0       1       2       even</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// even只剩一个, cnt剩两个，不能取even，odd大于等于2个，取odd</span></span><br><span class="line"><span class="comment">2+      1       2       odd</span></span><br><span class="line"><span class="comment">2       1       2       odd</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// even只剩一个, cnt大于两个，可以取even，但需要和odd比较</span></span><br><span class="line"><span class="comment">2+      1       2+      even, odd1+odd2比较</span></span><br><span class="line"><span class="comment">2       1       2+      even, odd1+odd2比较</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// even用完了, odd还有两个以上, 取odd</span></span><br><span class="line"><span class="comment">2+      0       2+      odd</span></span><br><span class="line"><span class="comment">2+      0       2       odd</span></span><br><span class="line"><span class="comment">2       0       2+      odd</span></span><br><span class="line"><span class="comment">2       0       2       odd</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// even,odd都取完了，无法取够cnt，break</span></span><br><span class="line"><span class="comment">0       0       2+      break</span></span><br><span class="line"><span class="comment">0       0       2       break</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// cnt或odd为1，没有even可取，无法满足条件，break</span></span><br><span class="line"><span class="comment">2+      0       1       break</span></span><br><span class="line"><span class="comment">2       0       1       break</span></span><br><span class="line"><span class="comment">1       0       2+      break</span></span><br><span class="line"><span class="comment">1       0       2       break</span></span><br><span class="line"><span class="comment">1       0       1       break</span></span><br><span class="line"><span class="comment">0       0       1       break</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>2+</code>代表个数大于<code>2</code></p></blockquote><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> odd = <span class="number">-1</span>, even = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = cards.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(cards.<span class="built_in">begin</span>(), cards.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; n - cnt - <span class="number">1</span>; i--) &#123;</span><br><span class="line">            ((cards[i] &amp; <span class="number">1</span>) ? odd : even) = cards[i];</span><br><span class="line">            tmp += cards[i];</span><br><span class="line">            cout &lt;&lt; cards[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(tmp &amp; <span class="number">1</span>)) <span class="keyword">return</span> tmp;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cards[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(even != <span class="number">-1</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, tmp - even + cards[i]);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(odd != <span class="number">-1</span>) &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, tmp - odd + cards[i]);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>排序后前cnt个数加起来，如果是偶数，则是所求最大的情况，直接返回</li><li>否则，前cnt个和加起来是奇数，用后面的数替换前面的数，使和变成偶数<ul><li>如果后面的数是奇数，则减去最后一个偶数，这样和为偶数</li><li>如果后面的数是偶数，则减去最后一个奇数，这样和为奇数</li></ul></li></ul><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>和上一个想法思路一致，<code>1&lt;=cards[i]&lt;=1000</code>，可以把他映射到一个长度1000的数组中，记录下标早cards中出现的次数，可以避免排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n = cards.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash[cards[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> odd = <span class="number">-1</span>, even = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; hash[i] == <span class="number">0</span>) i--;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// will never happen</span></span><br><span class="line">            tmp += i;</span><br><span class="line">            hash[i]--;</span><br><span class="line">            ((i &amp; <span class="number">1</span>) ? odd : even) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(tmp &amp; <span class="number">1</span>)) <span class="keyword">return</span> tmp;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; hash[i] == <span class="number">0</span>) i--;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>((i &amp; <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; even != <span class="number">-1</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, tmp - even + i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>((i &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; odd != <span class="number">-1</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, tmp - odd + i);</span><br><span class="line">            &#125;</span><br><span class="line">            hash[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3111-覆盖所有点的最少矩形数目"><a href="#3111-覆盖所有点的最少矩形数目" class="headerlink" title="3111. 覆盖所有点的最少矩形数目"></a>3111. 覆盖所有点的最少矩形数目</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minRectanglesToCoverPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)&#123; <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>]; &#125;);</span><br><span class="line">        <span class="type">int</span> len = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> lastx = points[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; points[i][<span class="number">0</span>] - lastx &lt;= w) i++;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= len) <span class="keyword">break</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            lastx = points[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>啊?这是中等题吗</li></ul><h2 id="3007-价值和小于等于-K-的最大数字"><a href="#3007-价值和小于等于-K-的最大数字" class="headerlink" title="3007. 价值和小于等于 K 的最大数字"></a>3007. 价值和小于等于 K 的最大数字</h2><h3 id="公式法"><a href="#公式法" class="headerlink" title="公式法"></a>公式法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">accumulatedValueOf</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> mask_off = <span class="number">63</span>; mask_off &gt;= <span class="number">1</span>; mask_off--) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mask = <span class="number">1l</span> &lt;&lt; (mask_off - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!(mask &amp; k)) <span class="keyword">continue</span>;</span><br><span class="line">            k = k &amp; ~mask;</span><br><span class="line">            <span class="keyword">if</span>(mask_off % x == <span class="number">0</span>) &#123;</span><br><span class="line">                value += ((k|mask) - mask + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            value += mask / <span class="number">2</span> * ((mask_off - <span class="number">1</span>) / x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">findMaximumNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>, r = <span class="number">1e15</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = (r - l + <span class="number">1</span>) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> accuValue = <span class="built_in">accumulatedValueOf</span>(mid, x);</span><br><span class="line">            <span class="keyword">if</span>(accuValue &lt;= k) &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>记$ price_n(x) &#x3D; bit_count(n, x) $ </li><li>记$ accumulated_n(x) &#x3D; \sum_{i&#x3D;1}^nprice_i(x) $ </li><li><code>bit_count</code>, <code>price</code>是n的价值，也就是下标被x整除的位数和</li><li>对于<code>n&gt;0</code>, 函数<code>bit_count</code>, 是恒大于零的。</li><li>所以数列$ {accumulated_n(x)} $是单调递增的，如果能找到计算$ {accumulated_n(x)} $的公式，利用二分查找即可快速找到答案</li></ul><h4 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h4><ul><li>以<code>n = 7</code>, <code>x = 1</code>为例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0000</span><br><span class="line">0001</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0100</span><br><span class="line">0101</span><br><span class="line">0110</span><br><span class="line">0111</span><br></pre></td></tr></table></figure><p>可以观察到<code>0 + 7</code> &#x3D; <code>1 + 6</code> &#x3D; <code>2 + 5</code> &#x3D; <code>3 + 4</code> &#x3D; 二进制的<code>111</code><br>总价值为: <code>3*4=12</code></p><p>也就是对于$ n &#x3D; 0 … (2^i-1) $时，他们的总价值为$ i * 2^{i-1} $ </p><p>$ a_{2^i}(1) &#x3D; i * 2^{i-1}$</p><ul><li>以<code>n = 10</code>, <code>x = 1</code>为例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0000</span><br><span class="line">0001</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0100</span><br><span class="line">0101</span><br><span class="line">0110</span><br><span class="line">0111</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1010</span><br></pre></td></tr></table></figure><p>先计算<code>n = 0...7</code>的总价值，为<code>12</code><br>$ a_{2^i-1}(1) &#x3D; i * 2^{i-1}$, $i &#x3D; 3$的情况</p><p>组成部分为<code>n = 0...7</code>和<code>n = 8...10</code></p><p>对于<code>n = 8...10</code><br>先数出最高位的情况，也就是$n - (2^i - 1)$，再去掉最高位，变成以下情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00</span><br><span class="line">01</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>也就是<code>n = 2</code>, <code>x = 1</code>的情况，重复上面的操作<br>也就是 $ b_n(i) &#x3D; n%2^{i+1} - (2^i - 1) $</p><ul><li><p>对于更复杂的情况如: <code>n = 1001101</code>, <code>x = 1</code><br>总价值为<br>$ a_{2^6-1}(1) + b_n(6) + $<br>$ a_{2^3-1}(1) + b_n(3) + $<br>$ a_{2^2-1}(1) + b_n(2) + $<br>$ a_{2^0-1}(1) + b_n{0}$</p></li><li><p>对于<code>x != 1</code>的情况，也就是<br>$ a_{2^i}(x) &#x3D;  \lfloor\frac{i}{x}\rfloor * 2^{i-1}$<br>$ b_n(i, x) &#x3D; n%2^{i+1} - (2^i - 1) $ $(i % x &#x3D; 0)$<br>$ b_n(i, x) &#x3D; 0 $ $(i % x \not &#x3D;{0})$</p></li></ul><h2 id="2961-双模幂运算"><a href="#2961-双模幂运算" class="headerlink" title="2961. 双模幂运算"></a>2961. 双模幂运算</h2><p>快速幂秒了！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fastPow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>) &#123;</span><br><span class="line">                res = (res * a) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a = (a * a) % mod;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getGoodIndices</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; variables, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; goodIndices;</span><br><span class="line">        <span class="type">int</span> len = variables.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> n = <span class="built_in">fastPow</span>(variables[i][<span class="number">0</span>], variables[i][<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line">            n = <span class="built_in">fastPow</span>(n, variables[i][<span class="number">2</span>], variables[i][<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">if</span>(n == target) &#123;</span><br><span class="line">                goodIndices.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodIndices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="682-棒球比赛"><a href="#682-棒球比赛" class="headerlink" title="682. 棒球比赛"></a>682. 棒球比赛</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calPoints</span><span class="params">(vector&lt;string&gt;&amp; operations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = operations.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; scores;</span><br><span class="line">        <span class="type">int</span> scoreCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (operations[i] == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">                score = scores[scoreCnt - <span class="number">1</span>] + scores[scoreCnt - <span class="number">2</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operations[i] == <span class="string">&quot;D&quot;</span>) &#123;</span><br><span class="line">                score = scores[scoreCnt - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operations[i] == <span class="string">&quot;C&quot;</span>) &#123;</span><br><span class="line">                scores.<span class="built_in">pop_back</span>();</span><br><span class="line">                scoreCnt--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">sscanf</span>(operations[i].<span class="built_in">c_str</span>(), <span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">            &#125;</span><br><span class="line">            scores.<span class="built_in">push_back</span>(score);</span><br><span class="line">            scoreCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(scores.<span class="built_in">begin</span>(), scores.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3106-满足距离约束且字典序最小的字符串"><a href="#3106-满足距离约束且字典序最小的字符串" class="headerlink" title="3106. 满足距离约束且字典序最小的字符串"></a>3106. 满足距离约束且字典序最小的字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">charDistance</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> d = <span class="built_in">abs</span>(a - b);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(d, <span class="number">26</span> - d);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getSmallestString</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; k &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> target = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                target = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= k; j++) &#123;</span><br><span class="line">                    target = <span class="built_in">min</span>(target, (s[i] + j - <span class="string">&#x27;a&#x27;</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    target = <span class="built_in">min</span>(target, (s[i] - j - <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k -= <span class="built_in">charDistance</span>(s[i], target);</span><br><span class="line">            s[i] = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>实际上就是<code>26</code>进制数，在有限步骤内，将其转化为同位数下尽量小的数</li><li>尽量多的将当前最高位变小，高位使用1步的减少量是地位使用一步的26倍</li><li>简单计算可知，两个字母最大距离为12<ul><li>当<code>k &gt; 12</code>时，一定可以变成<code>a</code></li><li>当<code>k &lt;= 12</code>时，一定可以变成<code>a</code>，寻找k步内能实现的最小字符</li></ul></li></ul><h2 id="2740-找出分区值"><a href="#2740-找出分区值" class="headerlink" title="2740. 找出分区值"></a>2740. 找出分区值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findValueOfPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> minDiff = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            minDiff = <span class="built_in">min</span>(minDiff, <span class="built_in">abs</span>(nums[i] - nums[i<span class="number">-1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDiff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2844-生成特殊数字的最少操作"><a href="#2844-生成特殊数字的最少操作" class="headerlink" title="2844. 生成特殊数字的最少操作"></a>2844. 生成特殊数字的最少操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperations</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = num.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> first0 = len, first5 = len;</span><br><span class="line">        <span class="type">int</span> i = len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> minOp = len;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; first0 == len) &#123;</span><br><span class="line">                first0 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[i] == <span class="string">&#x27;5&#x27;</span> &amp;&amp; first5 == len) &#123;</span><br><span class="line">                first5 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; first0 != len &amp;&amp; i &lt; first0) &#123;</span><br><span class="line">                minOp = <span class="built_in">min</span>(minOp, len - first0 - <span class="number">1</span> + first0 - i - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[i] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; first5 != len &amp;&amp; i &lt; first5) &#123;</span><br><span class="line">                minOp = <span class="built_in">min</span>(minOp, len - first5 - <span class="number">1</span> + first5 - i - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[i] == <span class="string">&#x27;5&#x27;</span> &amp;&amp; first0 != len &amp;&amp; i &lt; first0) &#123;</span><br><span class="line">                minOp = <span class="built_in">min</span>(minOp, len - first0 - <span class="number">1</span> + first0 - i - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[i] == <span class="string">&#x27;7&#x27;</span> &amp;&amp; first5 != len &amp;&amp; i &lt; first5) &#123;</span><br><span class="line">                minOp = <span class="built_in">min</span>(minOp, len - first5 - <span class="number">1</span> + first5 - i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(first0 != len) minOp = <span class="built_in">min</span>(minOp, len - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> minOp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>对于所有25的倍数，举例可知，结尾两位为<code>00</code>,<code>25</code>,<code>50</code>,<code>75</code></li><li>一个字符串可能有多种方式到达变成25的倍数<ul><li>如果最后以<code>00</code>结尾，先倒着找到第一个<code>0</code>，删去后面的所有数，在找第二个<code>0</code>，删掉两个<code>0</code>中间的数</li><li><code>25</code>,<code>50</code>,<code>75</code>同理</li><li>返回删除数字最少的情况</li></ul></li><li>特殊情况<ul><li>没有找到<code>00</code>,<code>25</code>,<code>50</code>,<code>75</code>，可以把整个字符串删掉</li><li>没有找到<code>00</code>,<code>25</code>,<code>50</code>,<code>75</code>，只找到了一个<code>0</code>，可以把<code>0</code>以外的数全删掉</li></ul></li></ul><h2 id="2766-重新放置石块"><a href="#2766-重新放置石块" class="headerlink" title="2766. 重新放置石块"></a>2766. 重新放置石块</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">relocateMarbles</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; moveFrom, vector&lt;<span class="type">int</span>&gt;&amp; moveTo)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; pos2rock;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> rockPos : nums) &#123;</span><br><span class="line">            pos2rock[rockPos] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> opNum = moveFrom.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; opNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(moveTo[i] == moveFrom[i]) <span class="keyword">continue</span>;</span><br><span class="line">            pos2rock[moveTo[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// pos2rock[moveFrom[i]] = 0;</span></span><br><span class="line">            pos2rock.<span class="built_in">erase</span>(moveFrom[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; [pos, num] : pos2rock) &#123;</span><br><span class="line">            <span class="comment">// if(num) &#123; // 不需要判断，都是true</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(pos);</span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2101-引爆最多的炸弹"><a href="#2101-引爆最多的炸弹" class="headerlink" title="2101. 引爆最多的炸弹"></a>2101. 引爆最多的炸弹</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solve</span> &#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bombs;</span><br><span class="line">        <span class="type">int</span> bombsNum;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isICanBoomJ</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">0</span>] - bombs[j][<span class="number">0</span>]) * (bombs[i][<span class="number">0</span>] - bombs[j][<span class="number">0</span>]) + ((<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">1</span>] - bombs[j][<span class="number">1</span>]) * (bombs[i][<span class="number">1</span>] - bombs[j][<span class="number">1</span>]) &lt;= (<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">2</span>] * bombs[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">cntNodes</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">            vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(bombsNum, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cntNodes</span>(start, visited);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">cntNodes</span><span class="params">(<span class="type">int</span> start, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">            visited[start] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> child = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> subNode : graph[start]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[subNode]) &#123;</span><br><span class="line">                    visited[subNode] = <span class="literal">true</span>;</span><br><span class="line">                    child += <span class="built_in">cntNodes</span>(subNode, visited);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Solve</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bombs) </span><br><span class="line">            : <span class="built_in">bombs</span>(bombs), <span class="built_in">bombsNum</span>(bombs.<span class="built_in">size</span>()) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; bombsNum; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; bombsNum; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">isICanBoomJ</span>(i, j)) &#123;</span><br><span class="line">                        graph[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> maxBoom = INT_MIN;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; bombsNum; i++) &#123;</span><br><span class="line">                maxBoom = <span class="built_in">max</span>(maxBoom, <span class="built_in">cntNodes</span>(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxBoom;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumDetonation</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bombs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Solve</span>(bombs).<span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumDetonation</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bombs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> bombsNum = bombs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">auto</span> isICanBoomJ = [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="built_in">return</span> ((<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">0</span>] - bombs[j][<span class="number">0</span>]) * (bombs[i][<span class="number">0</span>] - bombs[j][<span class="number">0</span>]) + ((<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">1</span>] - bombs[j][<span class="number">1</span>]) * (bombs[i][<span class="number">1</span>] - bombs[j][<span class="number">1</span>]) &lt;= (<span class="type">long</span> <span class="type">long</span>)bombs[i][<span class="number">2</span>] * bombs[i][<span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, vector&lt;<span class="type">bool</span>&gt;&amp;)&gt; _cntNodes = [&amp;](<span class="type">int</span> start, vector&lt;<span class="type">bool</span>&gt;&amp; visited) &#123;</span><br><span class="line">            visited[start] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> child = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> subNode : graph[start]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[subNode]) &#123;</span><br><span class="line">                    visited[subNode] = <span class="literal">true</span>;</span><br><span class="line">                    child += _cntNodes(subNode, visited);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+child;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> cntNodes = [&amp;](<span class="type">int</span> start) &#123;</span><br><span class="line">            vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(bombsNum, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> _cntNodes(start, visited);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; bombsNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; bombsNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isICanBoomJ</span>(i, j)) &#123;</span><br><span class="line">                    graph[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxBoom = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; bombsNum; i++) &#123;</span><br><span class="line">            maxBoom = <span class="built_in">max</span>(maxBoom, <span class="built_in">cntNodes</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxBoom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>注意计算距离时int可能会溢出</li></ul><h2 id="1186-删除一次得到子数组最大和"><a href="#1186-删除一次得到子数组最大和" class="headerlink" title="1186. 删除一次得到子数组最大和"></a>1186. 删除一次得到子数组最大和</h2><h2 id="3133-数组最后一个元素的最小值"><a href="#3133-数组最后一个元素的最小值" class="headerlink" title="3133. 数组最后一个元素的最小值"></a>3133. 数组最后一个元素的最小值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minEnd</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mask_n = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mask_x = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mask_res = <span class="number">1l</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">while</span>(mask_n &lt; <span class="number">0x8000&#x27;0000</span> &amp;&amp; mask_x &lt; <span class="number">0x8000&#x27;0000</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x &amp; mask_x) &#123;</span><br><span class="line">                res |= mask_res;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(n &amp; mask_n) res |= mask_res;</span><br><span class="line">                mask_n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mask_res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            mask_x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(mask_n &lt; <span class="number">0x8000&#x27;0000</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; mask_n) res |= mask_res;</span><br><span class="line">            mask_res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            mask_n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(mask_x &lt; <span class="number">0x8000&#x27;0000</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x &amp; mask_x) &#123;</span><br><span class="line">                res |= mask_res;</span><br><span class="line">            &#125;</span><br><span class="line">            mask_res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            mask_x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>首先所有的数相与后的结果需要为x,先随便来一个二进制数，看看满足这样的数有什么规律</p><p>以<code>x = 001101101001</code>为例</p><p>对于数组中的二进制数，如果x的第i位为0，则对应数组中的数的第i位可以是0也可以是1；如果果x的第i位为1，则对应数组中的数的第i位必须是1</p><p>也就是数组中的数满足 $ a_i &#x3D; ??11?11?1??1 $</p><p>现在希望数组中有n个数</p><p>以<code>n = 9 = 000000001001</code>为例，先不管相与为x的限制，数组中的数可以是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0001</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0100</span><br><span class="line">0101</span><br><span class="line">0110</span><br><span class="line">0111</span><br><span class="line">1000</span><br><span class="line">1001</span><br></pre></td></tr></table></figure><p>前面提到数组中的数必须满足$ a_i &#x3D; ??11?11?1??1 $, 可以把这些数安排到?处，这样可以保证相与为x，也可以保证数目<br>那么数组中最大数<code>9</code>，把他填入?处可得:<code>001111101011</code><br>那么数组中最小数<code>1</code>，把他填入?处可得:<code>001101101011</code></p><p>考虑到x&amp;x &#x3D; x, 所以数组中最小数可以是0，所以对于<code>x = 001101101001</code>, <code>n = 9 = 000000001001</code>, 数组中最小数为<code>x</code>，最大数为将8填入?处，得<code>001111101001</code></p><h2 id="2850-将石头分散到网格图的最少移动次数"><a href="#2850-将石头分散到网格图的最少移动次数" class="headerlink" title="2850. 将石头分散到网格图的最少移动次数"></a>2850. 将石头分散到网格图的最少移动次数</h2><h3 id="暴力分子"><a href="#暴力分子" class="headerlink" title="暴力分子"></a>暴力分子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> minMove = INT_MAX;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; grid, <span class="type">int</span> moveCnt)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> minDist = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i/<span class="number">3</span>][i%<span class="number">3</span>] &lt;= <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(grid[j/<span class="number">3</span>][j%<span class="number">3</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    minDist = <span class="built_in">min</span>(minDist, <span class="built_in">abs</span>(i/<span class="number">3</span> - j/<span class="number">3</span>) + <span class="built_in">abs</span>(i%<span class="number">3</span> - j%<span class="number">3</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            minMove = <span class="built_in">min</span>(minMove, moveCnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i/<span class="number">3</span>][i%<span class="number">3</span>] &lt;= <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(grid[j/<span class="number">3</span>][j%<span class="number">3</span>] == <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(i/<span class="number">3</span> - j/<span class="number">3</span>) + <span class="built_in">abs</span>(i%<span class="number">3</span> - j%<span class="number">3</span>) == minDist) &#123;</span><br><span class="line">                    grid[j/<span class="number">3</span>][j%<span class="number">3</span>]++;</span><br><span class="line">                    grid[i/<span class="number">3</span>][i%<span class="number">3</span>]--;</span><br><span class="line">                    <span class="built_in">move</span>(grid, moveCnt + <span class="built_in">abs</span>(i/<span class="number">3</span> - j/<span class="number">3</span>) + <span class="built_in">abs</span>(i%<span class="number">3</span> - j%<span class="number">3</span>));</span><br><span class="line">                    grid[j/<span class="number">3</span>][j%<span class="number">3</span>]--;</span><br><span class="line">                    grid[i/<span class="number">3</span>][i%<span class="number">3</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumMoves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">move</span>(grid, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> minMove;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>硬搜</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; m; <span class="comment">// int64表示的grid to 到达 初始状态的最小步数</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> initState = <span class="number">0x00&#x27;00&#x27;00&#x27;01&#x27;11&#x27;11&#x27;11&#x27;11</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> initMap = []()&#123;</span><br><span class="line">    queue&lt;<span class="type">long</span> <span class="type">long</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(initState);</span><br><span class="line">    m[initState] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> state = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="type">int</span> step = m[state];</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> numI = (state &gt;&gt; (i &lt;&lt; <span class="number">2</span>)) &amp; <span class="number">0x0f</span>;</span><br><span class="line">            <span class="keyword">if</span>(numI != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> numJ = (state &gt;&gt; (j &lt;&lt; <span class="number">2</span>)) &amp; <span class="number">0x0f</span>;</span><br><span class="line">                <span class="keyword">if</span>(numJ == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> newStep = step + <span class="built_in">abs</span>(i / <span class="number">3</span> - j / <span class="number">3</span>) + <span class="built_in">abs</span>(i % <span class="number">3</span> - j % <span class="number">3</span>);</span><br><span class="line">                numJ++;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> newState = state;</span><br><span class="line">                newState = newState &amp; ~(<span class="number">0x0f</span>l &lt;&lt; (i &lt;&lt; <span class="number">2</span>));</span><br><span class="line">                newState = newState &amp; ~(<span class="number">0x0f</span>l &lt;&lt; (j &lt;&lt; <span class="number">2</span>));</span><br><span class="line">                newState = newState | (numJ &lt;&lt; (j &lt;&lt; <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">if</span>(!m.<span class="built_in">count</span>(newState) || m[newState] &gt; newStep) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(newState);</span><br><span class="line">                    m[newState] = newStep;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">grid2Int64</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> int64Grid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                int64Grid &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">                int64Grid += grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> int64Grid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumMoves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m[<span class="built_in">grid2Int64</span>(grid)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用longlong表示grid，从全1的grid开始，找出所有grid情况，计算出他变成全1的step，缓存起来，用的时候查</p><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumMoves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; more, less;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num = grid[i / <span class="number">3</span>][i % <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">                    more.<span class="built_in">push_back</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;</span><br><span class="line">                less.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = more.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> minStep = INT_MAX;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                step += <span class="built_in">abs</span>(more[i] / <span class="number">3</span> - less[i] / <span class="number">3</span>) + <span class="built_in">abs</span>(more[i] % <span class="number">3</span> - less[i] % <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            minStep = <span class="built_in">min</span>(minStep, step);</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="built_in">next_permutation</span>(more.<span class="built_in">begin</span>(), more.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> minStep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>抄的题解</li><li>每个大于1的格子最后都会变成1，填补到0上，大于1的格子的值-1之和等于0的格子数量是相等的</li><li>构造两个数组，一个存全0的格子下标，一个将大于1的格子存n-1次，两个数组长度一致</li><li>(more[i],less[i])表示将i格子上的一块石头搬到less上，只要对more进行全排列，就可以找出所有移动的方法，然后算出所需的总步数，然后算出最小步数</li></ul><h2 id="3096-得到更多分数的最少关卡数目"><a href="#3096-得到更多分数的最少关卡数目" class="headerlink" title="3096. 得到更多分数的最少关卡数目"></a>3096. 得到更多分数的最少关卡数目</h2><p>又是博弈问题，不会</p><h2 id="3112-访问消失节点的最少时间"><a href="#3112-访问消失节点的最少时间" class="headerlink" title="3112. 访问消失节点的最少时间"></a>3112. 访问消失节点的最少时间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minimumTime</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="type">int</span>&gt;&amp; disappear)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">graph</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : edges) &#123;</span><br><span class="line">            graph[edge[<span class="number">0</span>]].<span class="built_in">emplace_back</span>(edge[<span class="number">1</span>], edge[<span class="number">2</span>]);</span><br><span class="line">            graph[edge[<span class="number">1</span>]].<span class="built_in">emplace_back</span>(edge[<span class="number">0</span>], edge[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n, INT_MAX / <span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; i , <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; j)&#123;</span><br><span class="line">            <span class="keyword">return</span> i.second &gt; j.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [min_index, len] = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(len &gt; ans[min_index]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> [child, len] : graph[min_index]) &#123;</span><br><span class="line">                <span class="type">int</span> newLen = ans[min_index] + len &gt;= disappear[child] ? INT_MAX / <span class="number">2</span> : ans[min_index] + len;</span><br><span class="line">                <span class="keyword">if</span>(newLen &lt; ans[child] &amp;&amp; newLen &lt; INT_MAX / <span class="number">2</span>) &#123;</span><br><span class="line">                    ans[child] = newLen;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(child, ans[child]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] &gt;= INT_MAX / <span class="number">2</span>) ans[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>就是带限制的dijkstra，但是很坑<ul><li>两个顶点之间可能存在多个长度不同的边，显然要选最小的，但不能用n*n的vector存图，会超内存</li><li>必须用优先队列选点，否则时间超</li></ul></li></ul><h2 id="3145-大数组元素的乘积"><a href="#3145-大数组元素的乘积" class="headerlink" title="3145. 大数组元素的乘积"></a>3145. 大数组元素的乘积</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> uint64;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function">uint64 <span class="title">fastPower</span><span class="params">(uint64 a, uint64 n, uint64 mod)</span> </span>&#123;</span><br><span class="line">        uint64 res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                res = (res * a) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a = (a * a) % mod;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res % mod;</span><br><span class="line">    &#125; <span class="comment">// 快速幂</span></span><br><span class="line">    <span class="function">uint64 <span class="title">powerOfproduct</span><span class="params">(uint64 k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> mask_off = <span class="number">64</span>; mask_off &gt;= <span class="number">1</span>; mask_off--) &#123;</span><br><span class="line">            uint64 mask = <span class="number">1l</span> &lt;&lt; (mask_off - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!(mask &amp; k)) <span class="keyword">continue</span>;</span><br><span class="line">            k = k &amp; ~mask;</span><br><span class="line">            value += ((k|mask) - mask + <span class="number">1</span>) * (mask_off - <span class="number">1</span>);</span><br><span class="line">            value += mask / <span class="number">2</span> * ((mask_off - <span class="number">1</span>)*(mask_off - <span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="comment">// 小于等于k的所有数的指数和</span></span><br><span class="line"></span><br><span class="line">    <span class="function">uint64 <span class="title">totalOneOf</span><span class="params">(uint64 k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> mask_off = <span class="number">64</span>; mask_off &gt;= <span class="number">1</span>; mask_off--) &#123;</span><br><span class="line">            uint64 mask = <span class="number">1l</span> &lt;&lt; (mask_off - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!(mask &amp; k)) <span class="keyword">continue</span>;</span><br><span class="line">            k = k &amp; ~mask;</span><br><span class="line">            value += ((k|mask) - mask + <span class="number">1</span>);</span><br><span class="line">            value += mask / <span class="number">2</span> * (mask_off - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="comment">// 小于等于k的所有数的1的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function">uint64 <span class="title">findLeftRange</span><span class="params">(uint64 pos)</span> </span>&#123;</span><br><span class="line">        uint64 l = <span class="number">0</span>, r = pos;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            uint64 mid = (r - l + <span class="number">1</span>) / <span class="number">2</span> + l;</span><br><span class="line">            uint64 totalOnOfPos = <span class="built_in">totalOneOf</span>(mid);</span><br><span class="line">            <span class="keyword">if</span>(totalOnOfPos &lt; pos) &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l; </span><br><span class="line">    &#125; <span class="comment">// 二分查找下标在数组中对应的数的前一个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function">uint64 <span class="title">powerSumTo</span><span class="params">(uint64 k, uint64 pos)</span> </span>&#123;</span><br><span class="line">        uint64 powerSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> off = <span class="number">0</span>; off &lt; <span class="number">64</span>; off++) &#123;</span><br><span class="line">            uint64 mask = <span class="number">1l</span> &lt;&lt; off;</span><br><span class="line">            <span class="keyword">if</span>(k &amp; mask) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(cnt &lt;= pos) &#123;</span><br><span class="line">                    powerSum += off;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> powerSum;</span><br><span class="line">    &#125; <span class="comment">// 计算k的前pos个1对应的指数和</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findProductsOfElements</span><span class="params">(vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; anwser;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; query: queries) &#123;</span><br><span class="line">            uint64 leftRange0 = <span class="built_in">findLeftRange</span>(query[<span class="number">0</span>]+<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            uint64 leftRange1 = <span class="built_in">findLeftRange</span>(query[<span class="number">1</span>]+<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            uint64 totalOneOf0 = <span class="built_in">totalOneOf</span>(leftRange0 - <span class="number">1</span>);</span><br><span class="line">            uint64 totalOneOf1 = <span class="built_in">totalOneOf</span>(leftRange1 - <span class="number">1</span>);</span><br><span class="line">            uint64 powerSum0 = <span class="built_in">powerSumTo</span>(leftRange0, query[<span class="number">0</span>] - totalOneOf0);</span><br><span class="line">            uint64 powerSum1 = <span class="built_in">powerSumTo</span>(leftRange1, query[<span class="number">1</span>]+<span class="number">1</span> - totalOneOf1);</span><br><span class="line">            uint64 power = (<span class="built_in">powerOfproduct</span>(leftRange1 - <span class="number">1</span>) - <span class="built_in">powerOfproduct</span>(leftRange0 - <span class="number">1</span>) + powerSum1 - powerSum0);</span><br><span class="line">            anwser.<span class="built_in">push_back</span>(<span class="built_in">fastPower</span>(<span class="number">2</span>, power, query[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> anwser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用和<a href="#3007-%E4%BB%B7%E5%80%BC%E5%92%8C%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E-k-%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97">3007. 价值和小于等于 K 的最大数字</a>相同的思路，找到<code>O(1)</code>的计算小于等于N的1的个数</li><li>通过二分查找就可以找到big_nums下标对应的数，由于所求数是2的幂的积，所以再计算这个数之前的所有数的乘积的指数，两个指数相减，再模n快速幂即可求得最终答案</li></ul><h2 id="2956-找到两个数组中的公共元素"><a href="#2956-找到两个数组中的公共元素" class="headerlink" title="2956. 找到两个数组中的公共元素"></a>2956. 找到两个数组中的公共元素</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findIntersectionValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m1, m2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num1 : nums1) &#123;</span><br><span class="line">            m1[num1]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num2 : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m1.<span class="built_in">count</span>(num2)) &#123;</span><br><span class="line">                ans2++;</span><br><span class="line">            &#125;</span><br><span class="line">            m2[num2]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num1 : nums1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m2.<span class="built_in">count</span>(num1)) &#123;</span><br><span class="line">                ans1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;ans1, ans2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;551-学生出勤记录-I&quot;&gt;&lt;a href=&quot;#551-学生出勤记录-I&quot; class=&quot;headerlink&quot; title=&quot;551. 学生出勤记录 I&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/student-attendance-record-i/description/?envType=daily-question&amp;envId=2024-08-18&quot;&gt;551. 学生出勤记录 I&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkRecord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max_seq_late = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; seq_late = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; c : s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c == &lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;) count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c == &lt;span class=&quot;string&quot;&gt;&amp;#x27;L&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                seq_late++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                max_seq_late = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(max_seq_late, seq_late);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                seq_late = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        max_seq_late = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(max_seq_late, seq_late);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; max_seq_late &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;连续相同的值的个数&lt;/li&gt;
&lt;li&gt;统计元素出现的次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3137-K-周期字符串需要的最少操作次数&quot;&gt;&lt;a href=&quot;#3137-K-周期字符串需要的最少操作次数&quot; class=&quot;headerlink&quot; title=&quot;3137. K 周期字符串需要的最少操作次数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-number-of-operations-to-make-word-k-periodic/description/?envType=daily-question&amp;envId=2024-08-17&quot;&gt;3137. K 周期字符串需要的最少操作次数&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minimumOperationsToMakeKPeriodic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string word, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unordered_map&amp;lt;string, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; subStrCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = word.&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i += k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            subStrCount[word.&lt;span class=&quot;built_in&quot;&gt;substr&lt;/span&gt;(i, k)]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; minOpCnt = len / k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; ite : subStrCount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minOpCnt = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(minOpCnt, len / k - ite.second);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minOpCnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;翻译一下规则，就是把长度为&lt;code&gt;nk&lt;/code&gt;的字符串切割成&lt;code&gt;n&lt;/code&gt;个长度为&lt;code&gt;k&lt;/code&gt;的子串，一次操作可以把一个子串替换成另一个字串，求如何替换，将所有字串都相同。&lt;/li&gt;
&lt;li&gt;翻译好需求，就很清楚了，直接统计每个字串出现的次数，取出现次数最大的，替换次数最少，为&lt;code&gt;n - cnt[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://jingtianer.github.io/home/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础05-Navigation</title>
    <link href="https://jingtianer.github.io/home/2024/08/07/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8005-Navigation/"/>
    <id>https://jingtianer.github.io/home/2024/08/07/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8005-Navigation/</id>
    <published>2024-08-07T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>NavController</code>是中央导航 API。它会跟踪用户访问过的目的地，并允许用户在目的地之间移动。</p><h3 id="获取NavController"><a href="#获取NavController" class="headerlink" title="获取NavController"></a>获取<code>NavController</code></h3><ul><li>fragment</li></ul><p>如果是NavHostFragment</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navController = <span class="keyword">this</span>.navController</span><br></pre></td></tr></table></figure><p>如果是普通Fragment</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navController = <span class="keyword">this</span>.findNavController()</span><br></pre></td></tr></table></figure><ul><li>compose</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navController = rememberNavController()</span><br></pre></td></tr></table></figure><p><code>NavHostFragment</code>实现了<code>NavHost</code>接口，可以直接获取<code>NavController</code>。</p><ul><li>view</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navController = view.findNavController()</span><br><span class="line"><span class="comment">// 这个view必须在一个NavHost之中</span></span><br></pre></td></tr></table></figure><ul><li>activity</li></ul><p>先获取<code>Activity</code>中的<code>NavHostFragment</code>，再获取<code>NavController</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navHostFragment =</span><br><span class="line">    supportFragmentManager.findFragmentById(R.id.nav_host_fragment) <span class="keyword">as</span> NavHostFragment</span><br><span class="line"><span class="keyword">val</span> navController = navHostFragment.navController</span><br></pre></td></tr></table></figure><p>使用Activity的扩展函数<code>findNavController</code>，可以获取<code>NavController</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navController = activity.findNavController(R.id.view_within_navhost)</span><br><span class="line"><span class="comment">// R.id.view_within_navhost这个view必须在一个NavHost之中</span></span><br></pre></td></tr></table></figure><h4 id="Fragment-findNavController"><a href="#Fragment-findNavController" class="headerlink" title="Fragment.findNavController"></a>Fragment.findNavController</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> Fragment.<span class="title">findNavController</span><span class="params">()</span></span>: NavController =</span><br><span class="line">    NavHostFragment.findNavController(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">findNavController</span><span class="params">(fragment: <span class="type">Fragment</span>)</span></span>: NavController &#123;</span><br><span class="line">    <span class="keyword">var</span> findFragment: Fragment? = fragment</span><br><span class="line">    <span class="keyword">while</span> (findFragment != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (findFragment <span class="keyword">is</span> NavHostFragment) &#123;</span><br><span class="line">            <span class="keyword">return</span> findFragment.navHostController</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> primaryNavFragment = findFragment.parentFragmentManager</span><br><span class="line">            .primaryNavigationFragment</span><br><span class="line">        <span class="keyword">if</span> (primaryNavFragment <span class="keyword">is</span> NavHostFragment) &#123;</span><br><span class="line">            <span class="keyword">return</span> primaryNavFragment.navHostController</span><br><span class="line">        &#125;</span><br><span class="line">        findFragment = findFragment.parentFragment</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try looking for one associated with the view instead, if applicable</span></span><br><span class="line">    <span class="keyword">val</span> view = fragment.view</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Navigation.findNavController(view)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For DialogFragments, look at the dialog&#x27;s decor view</span></span><br><span class="line">    <span class="keyword">val</span> dialogDecorView = (fragment <span class="keyword">as</span>? DialogFragment)?.dialog?.window?.decorView</span><br><span class="line">    <span class="keyword">if</span> (dialogDecorView != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Navigation.findNavController(dialogDecorView)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;Fragment <span class="variable">$fragment</span> does not have a NavController set&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从当前fragment开始寻找<ul><li>如果有<code>NavHostFragment</code>，就返回他的<code>NavController</code></li><li>如果没有，就找<code>parentFragmentManager</code>的<code>primaryNavigationFragment</code><ul><li>如果是<code>NavHostFragment</code>，就返回他的<code>NavController</code></li><li>如果不是，就把当前<code>fragment</code>设置为<code>parentFragment</code>，重复上面过程，直到找到一个<code>NavHostFragment</code>或没有<code>parentFragment</code>为止</li></ul></li></ul></li><li>如果当前fragment及父fragment中找不到<code>NavHostFragment</code>，就尝试从当前fragment的<code>view</code>中寻找</li><li>如果还是找不到，尝试判断当前<code>fragment</code>是否为<code>DialogFragment</code>，如果是，则从<code>DialogFragment</code>的<code>decorView</code>中查找</li><li>如果还是找不到，就抛出异常</li></ul><h4 id="View-findNavController"><a href="#View-findNavController" class="headerlink" title="View.findNavController"></a>View.findNavController</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> View.<span class="title">findNavController</span><span class="params">()</span></span>: NavController =</span><br><span class="line">    Navigation.findNavController(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><h4 id="Activity-findNavController"><a href="#Activity-findNavController" class="headerlink" title="Activity.findNavController"></a>Activity.findNavController</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> Activity.<span class="title">findNavController</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@IdRes</span> viewId: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: NavController = Navigation.findNavController(<span class="keyword">this</span>, viewId)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">findNavController</span><span class="params">(activity: <span class="type">Activity</span>, <span class="meta">@IdRes</span> viewId: <span class="type">Int</span>)</span></span>: NavController &#123;</span><br><span class="line">    <span class="keyword">val</span> view = ActivityCompat.requireViewById&lt;View&gt;(activity, viewId)</span><br><span class="line">    <span class="keyword">return</span> findViewNavController(view)</span><br><span class="line">        ?: <span class="keyword">throw</span> IllegalStateException(</span><br><span class="line">            <span class="string">&quot;Activity <span class="variable">$activity</span> does not have a NavController set on <span class="variable">$viewId</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Activity就是比View多了一步<code>findViewById</code></li></ul><h4 id="findViewNavController-view-View"><a href="#findViewNavController-view-View" class="headerlink" title="findViewNavController(view: View)"></a><code>findViewNavController(view: View)</code></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findViewNavController</span><span class="params">(view: <span class="type">View</span>)</span></span>: NavController? =</span><br><span class="line">    generateSequence(view) &#123;</span><br><span class="line">        it.parent <span class="keyword">as</span>? View?</span><br><span class="line">    &#125;.mapNotNull &#123;</span><br><span class="line">        getViewNavController(it)</span><br><span class="line">    &#125;.firstOrNull()</span><br></pre></td></tr></table></figure><ul><li>其实就是从当前view开始，一直找到根view，如果过程中有<code>NavController</code>，就返回</li><li>其中一个设置<code>nav_controller_view_tag</code>的地方可以看<a href="#onviewcreated">NavHostFragment#onviewcreated</a></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getViewNavController</span><span class="params">(view: <span class="type">View</span>)</span></span>: NavController? &#123;</span><br><span class="line">    <span class="keyword">val</span> tag = view.getTag(R.id.nav_controller_view_tag)</span><br><span class="line">    <span class="keyword">var</span> controller: NavController? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (tag <span class="keyword">is</span> WeakReference&lt;*&gt;) &#123;</span><br><span class="line">        controller = (tag <span class="keyword">as</span> WeakReference&lt;NavController&gt;).<span class="keyword">get</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">is</span> NavController) &#123;</span><br><span class="line">        controller = tag</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> controller</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.LowPriorityInOverloadResolution</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> <span class="title">generateSequence</span><span class="params">(seed: <span class="type">T</span>?, nextFunction: (<span class="type">T</span>) -&gt; <span class="type">T</span>?)</span></span>: Sequence&lt;T&gt; =</span><br><span class="line">    <span class="keyword">if</span> (seed == <span class="literal">null</span>)</span><br><span class="line">        EmptySequence</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        GeneratorSequence(&#123; seed &#125;, nextFunction)</span><br></pre></td></tr></table></figure><h3 id="导航图"><a href="#导航图" class="headerlink" title="导航图"></a>导航图</h3><h4 id="使用kotlin-DSL"><a href="#使用kotlin-DSL" class="headerlink" title="使用kotlin DSL"></a>使用kotlin DSL</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> NavController.<span class="title">createGraph</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    startDestination: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    route: <span class="type">String</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    builder: <span class="type">NavGraphBuilder</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: NavGraph = navigatorProvider.navigation(startDestination, route, builder)</span><br></pre></td></tr></table></figure><h4 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h4><p>首先，创建一个 NavHostFragment。它充当包含实际导航图的导航宿主。</p><p>NavHostFragment 的最小实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.fragment.app.FragmentContainerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_host_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/nav_graph&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>NavHostFragment 包含 app:navGraph 属性。使用此属性可将导航图连接到导航宿主。以下示例展示了如何实现该图：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_graph&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/profile&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Action back to destination which launched into this profile --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_global_profile&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">app:popUpTo</span>=<span class="string">&quot;@id/profile&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">app:popUpToInclusive</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/profile&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.ProfileFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;Profile&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Action to navigate from Profile to Friends List. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_profile_to_friendslist&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:destination</span>=<span class="string">&quot;@id/friendslist&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/friendslist&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.FriendsListFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;Friends List&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 深层链接 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://developer.android.com/guide/navigation/design/deep-link?hl=zh-cn --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deepLink</span> <span class="attr">app:uri</span>=<span class="string">&quot;www.example.com&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:action</span>=<span class="string">&quot;android.intent.action.MY_ACTION&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:mimeType</span>=<span class="string">&quot;type/subtype&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Add other fragment destinations similarly. --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对话框目的地 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dialog</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_dialog_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.myapp.MyDialogFragment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">argument</span> <span class="attr">android:name</span>=<span class="string">&quot;myarg&quot;</span> <span class="attr">android:defaultValue</span>=<span class="string">&quot;@null&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/myaction&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:destination</span>=<span class="string">&quot;@+id/another_destination&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Activity目的地 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/sampleActivityDestination&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.android.navigation.activity.DestinationActivity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/sampleActivityTitle&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 嵌套图 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用中的登录流程、向导或其他子流程通常是嵌套导航图的最佳表示形式。通过以这种方式嵌套独立的子导航流程，您可以更轻松地理解和管理应用界面的主流程。 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigation</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/sendMoneyGraph&quot;</span> <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/chooseRecipient&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:id</span>=<span class="string">&quot;@+id/chooseRecipient&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.example.cashdog.cashdog.ChooseRecipient&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:label</span>=<span class="string">&quot;fragment_choose_recipient&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_choose_recipient&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_chooseRecipient_to_chooseAmountFragment&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">app:destination</span>=<span class="string">&quot;@id/chooseAmountFragment&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:id</span>=<span class="string">&quot;@+id/chooseAmountFragment&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.example.cashdog.cashdog.ChooseAmountFragment&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:label</span>=<span class="string">&quot;fragment_choose_amount&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_choose_amount&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="NavHostFragment"><a href="#NavHostFragment" class="headerlink" title="NavHostFragment"></a>NavHostFragment</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavHostFragment</span> : <span class="type">Fragment</span>(), NavHost &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了<code>navHost</code>接口，也就是有了一个<code>navHostController</code>属性</p><h3 id="navHostController"><a href="#navHostController" class="headerlink" title="navHostController"></a>navHostController</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">override</span> <span class="keyword">val</span> navController: NavController</span><br><span class="line">        <span class="keyword">get</span>() = navHostController</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> navHostController: NavHostController <span class="keyword">by</span> lazy &#123; <span class="comment">// 1: lazy</span></span><br><span class="line">    <span class="keyword">val</span> context = checkNotNull(context) &#123; <span class="comment">// 2: 获取context并判空</span></span><br><span class="line">        <span class="string">&quot;NavController cannot be created before the fragment is attached&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    NavHostController(context).apply &#123; <span class="comment">// 3: 生成实例</span></span><br><span class="line">        setLifecycleOwner(<span class="keyword">this</span><span class="symbol">@NavHostFragment</span>) <span class="comment">// 4: 传递fragment为lifecycleOwner</span></span><br><span class="line">        setViewModelStore(viewModelStore) <span class="comment">// 5: 传递fragment的viewModelStore</span></span><br><span class="line">        onCreateNavHostController(<span class="keyword">this</span>) <span class="comment">// 6: 回调通知fragment</span></span><br><span class="line">        savedStateRegistry.consumeRestoredStateForKey(KEY_NAV_CONTROLLER_STATE)?.let &#123;</span><br><span class="line">            restoreState(it)</span><br><span class="line">        &#125;</span><br><span class="line">        savedStateRegistry.registerSavedStateProvider(KEY_NAV_CONTROLLER_STATE) &#123;</span><br><span class="line">            saveState() ?: Bundle.EMPTY</span><br><span class="line">        &#125;</span><br><span class="line">        savedStateRegistry.consumeRestoredStateForKey(KEY_GRAPH_ID)?.let &#123; bundle -&gt;</span><br><span class="line">            graphId = bundle.getInt(KEY_GRAPH_ID)</span><br><span class="line">        &#125;</span><br><span class="line">        savedStateRegistry.registerSavedStateProvider(KEY_GRAPH_ID) &#123;</span><br><span class="line">            <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">                bundleOf(KEY_GRAPH_ID to graphId)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Bundle.EMPTY</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// 7: savedState相关的看不懂，todo: 以后再看</span></span><br><span class="line">        <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123; <span class="comment">// // 8: setGraph</span></span><br><span class="line">            <span class="comment">// Set from onInflate()</span></span><br><span class="line">            setGraph(graphId) <span class="comment">// 8.1: 导航图id不为0，有效，设置导航图</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// See if it was set by NavHostFragment.create()</span></span><br><span class="line">            <span class="keyword">val</span> args = arguments</span><br><span class="line">            <span class="keyword">val</span> graphId = args?.getInt(KEY_GRAPH_ID) ?: <span class="number">0</span></span><br><span class="line">            <span class="keyword">val</span> startDestinationArgs = args?.getBundle(KEY_START_DESTINATION_ARGS)</span><br><span class="line">            <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123; <span class="comment">// 8.2: 尝试从fragment的`arguments`获取导航图和startDestinationArgs</span></span><br><span class="line">                setGraph(graphId, startDestinationArgs)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是创建了一个<code>navHostController</code>,详细内容看<a href="#navhostcontroller%E7%B1%BB">NavHostController类</a></p><h4 id="1-lazy"><a href="#1-lazy" class="headerlink" title="1: lazy"></a>1: lazy</h4><p>这个没啥说的，就是懒加载</p><h4 id="2-获取context并判空"><a href="#2-获取context并判空" class="headerlink" title="2: 获取context并判空"></a>2: 获取context并判空</h4><ul><li><code>fragment</code>的<code>getContext</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Context getContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> mHost == <span class="literal">null</span> ? <span class="literal">null</span> : mHost.getContext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>mHost</code>会在<code>FragmentStateManager</code>调用<code>moveToExpectedState</code>时，如果移动到<code>Fragment.ATTACHED</code>状态，调用<code>attach</code>方法时，进行初始化</p><p>&#x2F;&#x2F; todo: 再挖个坑以后学习</p></blockquote><h4 id="6-回调通知fragment"><a href="#6-回调通知fragment" class="headerlink" title="6: 回调通知fragment"></a>6: 回调通知fragment</h4><ul><li>这里调用的是<code>NavHostFragment</code>的方法<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;DEPRECATION&quot;</span>)</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateNavHostController</span><span class="params">(navHostController: <span class="type">NavHostController</span>)</span></span> &#123;</span><br><span class="line">    onCreateNavController(navHostController)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Callback for when the [NavController][getNavController] is created. If you</span></span><br><span class="line"><span class="comment">* support any custom destination types, their [Navigator] should be added here to</span></span><br><span class="line"><span class="comment">* ensure it is available before the navigation graph is inflated / set.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* By default, this adds a [DialogFragmentNavigator] and [FragmentNavigator].</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* This is only called once when the navController is called. This will be called in [onCreate]</span></span><br><span class="line"><span class="comment">* if the navController has not yet been called. This should not be called directly by</span></span><br><span class="line"><span class="comment">* subclasses.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> navController The newly created [NavController].</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;DEPRECATION&quot;</span>)</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="meta">@Deprecated(</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;&quot;&quot;Override &#123;@link #onCreateNavHostController(NavHostController)&#125; to gain</span></span></span><br><span class="line"><span class="string"><span class="meta">    access to the full &#123;@link NavHostController&#125; that is created by this NavHostFragment.&quot;&quot;&quot;</span></span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateNavController</span><span class="params">(navController: <span class="type">NavController</span>)</span></span> &#123;</span><br><span class="line">    navController.navigatorProvider +=</span><br><span class="line">        DialogFragmentNavigator(requireContext(), childFragmentManager)</span><br><span class="line">    navController.navigatorProvider.addNavigator(createFragmentNavigator())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>创建<code>getNavController</code>时的回调函数。如果您支持任何自定义目标类型，则应将其导航器添加到此处，以确保在导航图<code>inflate/set</code>之前可用。 </li><li>默认情况下，这会添加一个<code>DialogFragmentNavigator</code>和<code>FragmentNavigator</code>。 </li><li>它只在<code>navController</code>被调用时被调用一次。如果<code>navController</code>还没有被调用，这个函数会在<code>onCreate</code>中被调用。子类不应该直接调用这个方法。</li></ol></blockquote><p>翻译一下这个函数的注释</p><ol><li>第一句是说子类可以重写这个方法，添加自定义的Navigator</li><li>第二句是说默认会添加<code>DialogFragmentNavigator</code>和<code>FragmentNavigator</code></li><li>要理解第三句先看下面代码，<code>navHostController</code>时lazy，但是在<code>Fragment#onCreate</code>时会主动出发他的创建过程<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="comment">// We are accessing the NavController here to ensure that it is always created by this point</span></span><br><span class="line">    navHostController</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, <span class="literal">false</span>)) &#123;</span><br><span class="line">            defaultNavHost = <span class="literal">true</span></span><br><span class="line">            parentFragmentManager.beginTransaction()</span><br><span class="line">                .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                .commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We purposefully run this last as this will trigger the onCreate() of</span></span><br><span class="line">    <span class="comment">// child fragments, which may be relying on having the NavController already</span></span><br><span class="line">    <span class="comment">// created and having its state restored by that point.</span></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="7-savedState相关的看不懂，todo-以后再看"><a href="#7-savedState相关的看不懂，todo-以后再看" class="headerlink" title="7: savedState相关的看不懂，todo: 以后再看"></a>7: savedState相关的看不懂，todo: 以后再看</h4><p>&#x2F;&#x2F; todo: 占坑，以后再看</p><h4 id="8-setGraph"><a href="#8-setGraph" class="headerlink" title="8: setGraph"></a>8: setGraph</h4><ul><li>导航图id不为0，有效，设置导航图</li><li>导航图id为0, 尝试从fragment的<code>arguments</code>获取<code>导航图id</code>和<code>startDestinationArgs</code></li><li>setArguments是父类<code>Fragment</code>的一个方法，<code>mArguments</code>就是一个<code>Bundle</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArguments</span><span class="params">(<span class="meta">@Nullable</span> Bundle args)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mFragmentManager != <span class="literal">null</span> &amp;&amp; isStateSaved()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Fragment already added and state has been saved&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mArguments = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建NavHostFragment"><a href="#创建NavHostFragment" class="headerlink" title="创建NavHostFragment"></a>创建NavHostFragment</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@NavigationRes</span> graphResId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    startDestinationArgs: <span class="type">Bundle</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: NavHostFragment &#123;</span><br><span class="line">    <span class="keyword">var</span> b: Bundle? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (graphResId != <span class="number">0</span>) &#123;</span><br><span class="line">        b = Bundle()</span><br><span class="line">        b.putInt(KEY_GRAPH_ID, graphResId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (startDestinationArgs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">            b = Bundle()</span><br><span class="line">        &#125;</span><br><span class="line">        b.putBundle(KEY_START_DESTINATION_ARGS, startDestinationArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = NavHostFragment()</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">        result.arguments = b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到, <code>KEY_GRAPH_ID</code>和<code>KEY_START_DESTINATION_ARGS</code></li></ul><h3 id="几个key的定义"><a href="#几个key的定义" class="headerlink" title="几个key的定义"></a>几个key的定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">val</span> KEY_GRAPH_ID: String = <span class="string">&quot;android-support-nav:fragment:graphId&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">val</span> KEY_START_DESTINATION_ARGS: String =</span><br><span class="line">        <span class="string">&quot;android-support-nav:fragment:startDestinationArgs&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> KEY_NAV_CONTROLLER_STATE =</span><br><span class="line">        <span class="string">&quot;android-support-nav:fragment:navControllerState&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> KEY_DEFAULT_NAV_HOST = <span class="string">&quot;android-support-nav:fragment:defaultHost&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>KEY_GRAPH_ID</code>和<code>KEY_START_DESTINATION_ARGS</code>被限制在同组lib中使用，也就是不推荐我们自己手动通过这两个key来设置<code>导航图id</code>和<code>args</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> graphId = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>graphId</code>也是<code>private</code>的，也无法通过继承的方式修改他的值</p><h3 id="onInflate"><a href="#onInflate" class="headerlink" title="onInflate"></a>onInflate</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInflate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    attrs: <span class="type">AttributeSet</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onInflate(context, attrs, savedInstanceState)</span><br><span class="line">    context.obtainStyledAttributes(</span><br><span class="line">        attrs,</span><br><span class="line">        androidx.navigation.R.styleable.NavHost</span><br><span class="line">    ).use &#123; navHost -&gt;</span><br><span class="line">        <span class="keyword">val</span> graphId = navHost.getResourceId(</span><br><span class="line">            androidx.navigation.R.styleable.NavHost_navGraph, <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.graphId = graphId</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    context.obtainStyledAttributes(attrs, R.styleable.NavHostFragment).use &#123; array -&gt;</span><br><span class="line">        <span class="keyword">val</span> defaultHost = array.getBoolean(R.styleable.NavHostFragment_defaultNavHost, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">if</span> (defaultHost) &#123;</span><br><span class="line">            defaultNavHost = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导航图和<code>defaultNavHost</code>可以在<code>FragmentContainerView</code>的<code>xml</code>中使用<code>navGraph</code>和<code>defaultNavHost</code>定义</p><h3 id="onSaveInstanceState"><a href="#onSaveInstanceState" class="headerlink" title="onSaveInstanceState"></a>onSaveInstanceState</h3><ul><li><code>onSaveInstanceState</code>时如果<code>defaultNavHost</code>是<code>true</code>会把这个状态存起来，<code>onCreate</code>时恢复<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSaveInstanceState</span><span class="params">(outState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState)</span><br><span class="line">    <span class="keyword">if</span> (defaultNavHost) &#123;</span><br><span class="line">        outState.putBoolean(KEY_DEFAULT_NAV_HOST, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="comment">// We are accessing the NavController here to ensure that it is always created by this point</span></span><br><span class="line">    navHostController</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, <span class="literal">false</span>)) &#123;</span><br><span class="line">            defaultNavHost = <span class="literal">true</span></span><br><span class="line">            parentFragmentManager.beginTransaction()</span><br><span class="line">                .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                .commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We purposefully run this last as this will trigger the onCreate() of</span></span><br><span class="line">    <span class="comment">// child fragments, which may be relying on having the NavController already</span></span><br><span class="line">    <span class="comment">// created and having its state restored by that point.</span></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onViewCreated"><a href="#onViewCreated" class="headerlink" title="onViewCreated"></a>onViewCreated</h3><ul><li>会给view设置<code>navHostController</code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">    check(view <span class="keyword">is</span> ViewGroup) &#123; <span class="string">&quot;created host view <span class="variable">$view</span> is not a ViewGroup&quot;</span> &#125;</span><br><span class="line">    Navigation.setViewNavController(view, navHostController)</span><br><span class="line">    <span class="comment">// When added programmatically, we need to set the NavController on the parent - i.e.,</span></span><br><span class="line">    <span class="comment">// the View that has the ID matching this NavHostFragment.</span></span><br><span class="line">    <span class="keyword">if</span> (view.getParent() != <span class="literal">null</span>) &#123;</span><br><span class="line">        viewParent = view.getParent() <span class="keyword">as</span> View</span><br><span class="line">        <span class="keyword">if</span> (viewParent!!.id == id) &#123;</span><br><span class="line">            Navigation.setViewNavController(viewParent!!, navHostController)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过view的<code>setTag</code>设置<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">setViewNavController</span><span class="params">(view: <span class="type">View</span>, controller: <span class="type">NavController</span>?)</span></span> &#123;</span><br><span class="line">    view.setTag(R.id.nav_controller_view_tag, controller)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="onDestroyView"><a href="#onDestroyView" class="headerlink" title="onDestroyView"></a>onDestroyView</h3><ul><li>非常对称的，在onDestroyView时，会把<code>viewParent</code>中的<code>navHostController</code>设置为<code>null</code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">    viewParent?.let &#123; it -&gt;</span><br><span class="line">        <span class="keyword">if</span> (Navigation.findNavController(it) === navHostController) &#123;</span><br><span class="line">            Navigation.setViewNavController(it, <span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    viewParent = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="defaultNavHost"><a href="#defaultNavHost" class="headerlink" title="defaultNavHost"></a>defaultNavHost</h3><p>如果在<code>attach</code>时发现是<code>defaultNavHost</code>，会提交一个<code>setPrimaryNavigationFragment</code>的<code>transaction</code>，追踪这个操作，他具体做了以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setPrimaryNavigationFragment</span><span class="params">(<span class="meta">@Nullable</span> Fragment f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (f != <span class="literal">null</span> &amp;&amp; (!f.equals(findActiveFragment(f.mWho))</span><br><span class="line">            || (f.mHost != <span class="literal">null</span> &amp;&amp; f.mFragmentManager != <span class="built_in">this</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Fragment &quot;</span> + f</span><br><span class="line">                + <span class="string">&quot; is not an active fragment of FragmentManager &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Fragment</span> <span class="variable">previousPrimaryNav</span> <span class="operator">=</span> mPrimaryNav;</span><br><span class="line">    mPrimaryNav = f;</span><br><span class="line">    dispatchParentPrimaryNavigationFragmentChanged(previousPrimaryNav);</span><br><span class="line">    dispatchParentPrimaryNavigationFragmentChanged(mPrimaryNav);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchParentPrimaryNavigationFragmentChanged</span><span class="params">(<span class="meta">@Nullable</span> Fragment f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (f != <span class="literal">null</span> &amp;&amp; f.equals(findActiveFragment(f.mWho))) &#123;</span><br><span class="line">        f.performPrimaryNavigationFragmentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>找到前一个<code>primaryNavigationFragment</code>，和将要设置为<code>defaultNav</code>的<code>fragment</code>,调用其<code>performPrimaryNavigationFragmentChanged</code>操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performPrimaryNavigationFragmentChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isPrimaryNavigationFragment</span> <span class="operator">=</span> mFragmentManager.isPrimaryNavigation(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// Only send out the callback / dispatch if the state has changed</span></span><br><span class="line">    <span class="keyword">if</span> (mIsPrimaryNavigationFragment == <span class="literal">null</span></span><br><span class="line">            || mIsPrimaryNavigationFragment != isPrimaryNavigationFragment) &#123;</span><br><span class="line">        mIsPrimaryNavigationFragment = isPrimaryNavigationFragment;</span><br><span class="line">        onPrimaryNavigationFragmentChanged(isPrimaryNavigationFragment);</span><br><span class="line">        mChildFragmentManager.dispatchPrimaryNavigationFragmentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>更新Fragment中的<code>mIsPrimaryNavigationFragment</code>这个flag，并且找到子fragment，也去更新其状态</li><li>调用钩子函数<code>onPrimaryNavigationFragmentChanged</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void onPrimaryNavigationFragmentChanged(boolean isPrimaryNavigationFragment) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>他是一个空的方法，子类可以重写，<code>NavHostFragment</code>也没有实现它，看来是给程序员自由发挥的。</li><li>官方文档中<a href="https://developer.android.com/guide/navigation/use-graph/programmatic?hl=zh-cn#create_a_navhostfragment">创建 NavHostFragment</a>提到这个操作会<code>&quot;允许您的 NavHost 截获对系统“返回”按钮的按下操作&quot;</code>。上面的代码好像并没有体现出来。</li></ul><h2 id="NavHostController类"><a href="#NavHostController类" class="headerlink" title="NavHostController类"></a>NavHostController类</h2><ul><li><code>NavHostController</code>继承自<code>NavController</code>，其中没有什么代码，其本身是open的，但它把父类的几个方法设置为<code>final</code>，包括：<ul><li>setLifecycleOwner</li><li>setOnBackPressedDispatcher</li><li>enableOnBackPressed</li><li>setViewModelStore</li></ul></li></ul><h2 id="NavController"><a href="#NavController" class="headerlink" title="NavController"></a>NavController</h2><h3 id="3-生成实例"><a href="#3-生成实例" class="headerlink" title="3: 生成实例"></a>3: 生成实例</h3><p>NavHostController构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavHostController</span>(context: Context) </span><br><span class="line">    : NavController(context) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavController</span>(</span><br><span class="line">    <span class="comment">/** <span class="doctag">@suppress</span> */</span></span><br><span class="line">    <span class="meta">@get:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> context: Context</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        _navigatorProvider.addNavigator(NavGraphNavigator(_navigatorProvider))</span><br><span class="line">        _navigatorProvider.addNavigator(ActivityNavigator(context))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>传递<code>context</code>就是存起来以后会用</p></li><li><p>通过<code>context</code>创建<code>ActivityNavigator</code></p></li><li><p>可以先剧透一下，<code>Navigator</code>就是一个具体实施跳转等操作的类</p><ul><li>比如<code>ActivityNavigator</code>就会调用<code>startActivity</code></li><li><code>FragmentNavigator</code>就会构造<code>FragmentTransaction</code>来跳转<code>fragment</code></li></ul></li></ul><h3 id="4-传递fragment为lifecycleOwner"><a href="#4-传递fragment为lifecycleOwner" class="headerlink" title="4: 传递fragment为lifecycleOwner"></a>4: 传递fragment为lifecycleOwner</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setLifecycleOwner</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.setLifecycleOwner(owner)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setLifecycleOwner</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (owner == lifecycleOwner) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    lifecycleOwner?.lifecycle?.removeObserver(lifecycleObserver)</span><br><span class="line">    lifecycleOwner = owner</span><br><span class="line">    owner.lifecycle.addObserver(lifecycleObserver)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>去掉原来的owner，添加新的owner，并添加观察者<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> lifecycleObserver: LifecycleObserver = LifecycleEventObserver &#123; _, event -&gt;</span><br><span class="line">    hostLifecycleState = event.targetState</span><br><span class="line">    <span class="keyword">if</span> (_graph != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (entry <span class="keyword">in</span> backQueue) &#123;</span><br><span class="line">            entry.handleLifecycleEvent(event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>hostLifecycleState就是存对应的生命周期状态</li><li>_graph是一个<code>NavGraph</code>, 在<code>setGraph</code>中初始化</li><li>backQueue是存放<code>NavBackStackEntry</code>的双端队列</li></ul><h3 id="5-传递fragment的viewModelStore"><a href="#5-传递fragment的viewModelStore" class="headerlink" title="5: 传递fragment的viewModelStore"></a>5: 传递fragment的viewModelStore</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setViewModelStore</span><span class="params">(viewModelStore: <span class="type">ViewModelStore</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.setViewModelStore(viewModelStore)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setViewModelStore</span><span class="params">(viewModelStore: <span class="type">ViewModelStore</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (viewModel == NavControllerViewModel.getInstance(viewModelStore)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    check(backQueue.isEmpty()) &#123; <span class="string">&quot;ViewModelStore should be set before setGraph call&quot;</span> &#125;</span><br><span class="line">    viewModel = NavControllerViewModel.getInstance(viewModelStore)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>就是创建了一个<code>viewModel</code>，以后会用</li></ul><h3 id="8-setGraph-1"><a href="#8-setGraph-1" class="headerlink" title="8: setGraph"></a>8: setGraph</h3><ul><li><p>如果导航图id不为0，有效，设置导航图</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> graphResId: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    setGraph(navInflater.inflate(graphResId), <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果导航图为0，则尝试从<code>fragment</code>的<code>arguments</code>中获取<code>导航图id</code>和<code>startDestinationArgs</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> graphResId: <span class="type">Int</span>, startDestinationArgs: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    setGraph(navInflater.inflate(graphResId), startDestinationArgs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终都调用了<code>setGraph(graph: NavGraph, startDestinationArgs: Bundle?)</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Sets the [navigation graph][NavGraph] to the specified graph.</span></span><br><span class="line"><span class="comment">* Any current navigation graph data (including back stack) will be replaced.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* The graph can be retrieved later via [graph].</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> graph graph to set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> NavController.setGraph</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> NavController.graph</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setGraph</span><span class="params">(graph: <span class="type">NavGraph</span>, startDestinationArgs: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_graph != graph) &#123;</span><br><span class="line">        _graph?.let &#123; previousGraph -&gt;</span><br><span class="line">            <span class="comment">// Clear all saved back stacks by iterating through a copy of the saved keys,</span></span><br><span class="line">            <span class="comment">// thus avoiding any concurrent modification exceptions</span></span><br><span class="line">            <span class="keyword">val</span> savedBackStackIds = ArrayList(backStackMap.keys)</span><br><span class="line">            savedBackStackIds.forEach &#123; id -&gt;</span><br><span class="line">                clearBackStackInternal(id)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Pop everything from the old graph off the back stack</span></span><br><span class="line">            NavControllerInternal(previousGraph.id, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        _graph = graph</span><br><span class="line">        onGraphCreated(startDestinationArgs)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// first we update _graph with new instances from graph</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until graph.nodes.size()) &#123;</span><br><span class="line">            <span class="keyword">val</span> newDestination = graph.nodes.valueAt(i)</span><br><span class="line">            <span class="keyword">val</span> key = _graph!!.nodes.keyAt(i)</span><br><span class="line">            _graph!!.nodes.replace(key, newDestination)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// then we update backstack with the new instances</span></span><br><span class="line">        backQueue.forEach &#123; entry -&gt;</span><br><span class="line">            <span class="comment">// we will trace this hierarchy in new graph to get new destination instance</span></span><br><span class="line">            <span class="keyword">val</span> hierarchy = entry.destination.hierarchy.toList().asReversed()</span><br><span class="line">            <span class="keyword">val</span> newDestination = hierarchy.fold(_graph!!) &#123;</span><br><span class="line">                    newDest: NavDestination, oldDest: NavDestination -&gt;</span><br><span class="line">                <span class="keyword">if</span> (oldDest == _graph &amp;&amp; newDest == graph) &#123;</span><br><span class="line">                    <span class="comment">// if root graph, it is already the node that matches with oldDest</span></span><br><span class="line">                    newDest</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newDest <span class="keyword">is</span> NavGraph) &#123;</span><br><span class="line">                    <span class="comment">// otherwise we walk down the hierarchy to the next child</span></span><br><span class="line">                    newDest.findNode(oldDest.id)!!</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// final leaf node found</span></span><br><span class="line">                    newDest</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            entry.destination = newDestination</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>考虑了两种情况，setGraph前后<code>_graph</code>和<code>graph</code>是否相等<ul><li>注意kt代码有运算符重载，实际上调用的是<code>NavGraph</code>的<code>equals</code></li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === other) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (other == <span class="literal">null</span> || other !<span class="keyword">is</span> NavGraph) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.equals(other) &amp;&amp;</span><br><span class="line">        nodes.size == other.nodes.size &amp;&amp;</span><br><span class="line">        startDestinationId == other.startDestinationId &amp;&amp;</span><br><span class="line">        nodes.valueIterator().asSequence().all &#123; it == other.nodes.<span class="keyword">get</span>(it.id) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="navigate"><a href="#navigate" class="headerlink" title="navigate"></a>navigate</h3><h4 id="通过action的资源id跳转的"><a href="#通过action的资源id跳转的" class="headerlink" title="通过action的资源id跳转的"></a>通过action的资源id跳转的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id1: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(<span class="meta">@IdRes</span> resId: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    navigate(resId, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// id2: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(<span class="meta">@IdRes</span> resId: <span class="type">Int</span>, args: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    navigate(resId, args, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// id3: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(<span class="meta">@IdRes</span> resId: <span class="type">Int</span>, args: <span class="type">Bundle</span>?, navOptions: <span class="type">NavOptions</span>?)</span></span> &#123;</span><br><span class="line">    navigate(resId, args, navOptions, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// id4: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@IdRes</span> resId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个参数的调两个参数的，两个参数的调三个参数的<br>四个参数的巨长但也不是核心的方法，还会调用核心的navigate方法</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id4:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@IdRes</span> resId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> finalNavOptions = navOptions <span class="comment">// 1: navOptions</span></span><br><span class="line">    <span class="keyword">val</span> currentNode = (</span><br><span class="line">        <span class="keyword">if</span> (backQueue.isEmpty())</span><br><span class="line">            _graph</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            backQueue.last().destination</span><br><span class="line">        ) ?: <span class="keyword">throw</span> IllegalStateException(</span><br><span class="line">            <span class="string">&quot;No current destination found. Ensure a navigation graph has been set for &quot;</span> +</span><br><span class="line">                <span class="string">&quot;NavController <span class="variable">$this</span>.&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IdRes</span></span><br><span class="line">    <span class="keyword">var</span> destId = resId</span><br><span class="line">    <span class="keyword">val</span> navAction = currentNode.getAction(resId)</span><br><span class="line">    <span class="keyword">var</span> combinedArgs: Bundle? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (navAction != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (finalNavOptions == <span class="literal">null</span>) &#123; <span class="comment">// 1.2: navOptions空的情况</span></span><br><span class="line">            finalNavOptions = navAction.navOptions</span><br><span class="line">        &#125;</span><br><span class="line">        destId = navAction.destinationId <span class="comment">// 3: destId</span></span><br><span class="line">        <span class="keyword">val</span> navActionArgs = navAction.defaultArguments</span><br><span class="line">        <span class="keyword">if</span> (navActionArgs != <span class="literal">null</span>) &#123;</span><br><span class="line">            combinedArgs = Bundle()</span><br><span class="line">            combinedArgs.putAll(navActionArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (combinedArgs == <span class="literal">null</span>) &#123;</span><br><span class="line">            combinedArgs = Bundle()</span><br><span class="line">        &#125;</span><br><span class="line">        combinedArgs.putAll(args) <span class="comment">// 2: 合并args</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (destId == <span class="number">0</span> &amp;&amp; finalNavOptions != <span class="literal">null</span> &amp;&amp; (finalNavOptions.popUpToId != -<span class="number">1</span> ||</span><br><span class="line">            finalNavOptions.popUpToRoute != <span class="literal">null</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123; <span class="comment">// 5: popUpTo</span></span><br><span class="line">            finalNavOptions.popUpToRoute != <span class="literal">null</span> -&gt;</span><br><span class="line">                NavController(</span><br><span class="line">                    finalNavOptions.popUpToRoute!!, finalNavOptions.isPopUpToInclusive()</span><br><span class="line">                )</span><br><span class="line">            finalNavOptions.popUpToId != -<span class="number">1</span> -&gt;</span><br><span class="line">                NavController(</span><br><span class="line">                    finalNavOptions.popUpToId, finalNavOptions.isPopUpToInclusive()</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    require(destId != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="string">&quot;Destination id == 0 can only be used in conjunction with a valid navOptions.popUpTo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> node = findDestination(destId) <span class="comment">// 4: 找到destination的node</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> dest = NavDestination.getDisplayName(context, destId)</span><br><span class="line">        require(navAction == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="string">&quot;Navigation destination <span class="variable">$dest</span> referenced from action &quot;</span> +</span><br><span class="line">                <span class="string">&quot;<span class="subst">$&#123;NavDestination.getDisplayName(context, resId)&#125;</span> cannot be found from &quot;</span> +</span><br><span class="line">                <span class="string">&quot;the current destination <span class="variable">$currentNode</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(</span><br><span class="line">            <span class="string">&quot;Navigation action/destination <span class="variable">$dest</span> cannot be found from the current &quot;</span> +</span><br><span class="line">                <span class="string">&quot;destination <span class="variable">$currentNode</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    navigate(node, combinedArgs, finalNavOptions, navigatorExtras) <span class="comment">// 6:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>大概做了下面几件事</p><ul><li>1: 如果调用<code>navigate</code>时<ul><li>1.1: <code>NavOptions</code>参数不空，则忽略当前<code>node</code>的<code>action</code>中存储的<code>NavOptions</code></li><li>1.2: 如果空，则使用当前<code>node</code>的<code>action</code>中存储的<code>NavOptions</code></li></ul></li><li>2: 将action的<code>defaultArguments</code>和参数中的<code>args</code>合并，并传递给核心的<code>navigate</code></li><li>3: 从action中获取<code>destinationId</code></li><li>4: 从当前图中找到<code>destinationId</code>对应的node</li><li>5: 弹出导航栈，直到遇到对应的route或id</li><li>6: 将<code>node</code>和合并的<code>args</code>, <code>NavOptions</code>, 还有<code>navigatorExtras</code>传递给核心的<code>navigate</code>方法</li></ul></blockquote><h4 id="通过NavDirections跳转的"><a href="#通过NavDirections跳转的" class="headerlink" title="通过NavDirections跳转的"></a>通过NavDirections跳转的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NavDirections1:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(directions: <span class="type">NavDirections</span>)</span></span> &#123;</span><br><span class="line">    navigate(directions.actionId, directions.arguments, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NavDirections2:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(directions: <span class="type">NavDirections</span>, navOptions: <span class="type">NavOptions</span>?)</span></span> &#123;</span><br><span class="line">    navigate(directions.actionId, directions.arguments, navOptions)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NavDirections3:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(directions: <span class="type">NavDirections</span>, navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>)</span></span> &#123;</span><br><span class="line">    navigate(directions.actionId, directions.arguments, <span class="literal">null</span>, navigatorExtras)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看一下NavDirections是啥</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NavDirections</span> &#123;</span><br><span class="line">    <span class="meta">@get:IdRes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> actionId: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> arguments: Bundle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是把action-id和arguments包装了一下，最终也会调用<code>id4</code></p><h4 id="通过Uri类型的DeepLink跳转的"><a href="#通过Uri类型的DeepLink跳转的" class="headerlink" title="通过Uri类型的DeepLink跳转的"></a>通过Uri类型的DeepLink跳转的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uri1:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(deepLink: <span class="type">Uri</span>)</span></span> &#123;</span><br><span class="line">    navigate(NavDeepLinkRequest(deepLink, <span class="literal">null</span>, <span class="literal">null</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// uri2:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(deepLink: <span class="type">Uri</span>, navOptions: <span class="type">NavOptions</span>?)</span></span> &#123;</span><br><span class="line">    navigate(NavDeepLinkRequest(deepLink, <span class="literal">null</span>, <span class="literal">null</span>), navOptions, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// uri3:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    deepLink: <span class="type">Uri</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    navigate(NavDeepLinkRequest(deepLink, <span class="literal">null</span>, <span class="literal">null</span>), navOptions, navigatorExtras)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们都会构造NavDeepLinkRequest对象然后调用<code>NavDeepLinkRequest3</code></p><h4 id="通过route跳转的"><a href="#通过route跳转的" class="headerlink" title="通过route跳转的"></a>通过route跳转的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route1:</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(route: <span class="type">String</span>, builder: <span class="type">NavOptionsBuilder</span>.() -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    navigate(route, navOptions(builder))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    route: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    navigate(</span><br><span class="line">        NavDeepLinkRequest.Builder.fromUri(createRoute(route).toUri()).build(), navOptions,</span><br><span class="line">        navigatorExtras</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过route跳转的，最后也会变成deeplink</li></ul><h4 id="通过NavDeepLinkRequest跳转的"><a href="#通过NavDeepLinkRequest跳转的" class="headerlink" title="通过NavDeepLinkRequest跳转的"></a>通过NavDeepLinkRequest跳转的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NavDeepLinkRequest1:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(request: <span class="type">NavDeepLinkRequest</span>)</span></span> &#123;</span><br><span class="line">    navigate(request, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NavDeepLinkRequest2:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(request: <span class="type">NavDeepLinkRequest</span>, navOptions: <span class="type">NavOptions</span>?)</span></span> &#123;</span><br><span class="line">    navigate(request, navOptions, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NavDeepLinkRequest3:</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    request: <span class="type">NavDeepLinkRequest</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    request: <span class="type">NavDeepLinkRequest</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    requireNotNull(_graph) &#123;</span><br><span class="line">        <span class="string">&quot;Cannot navigate to <span class="variable">$request</span>. Navigation graph has not been set for &quot;</span> +</span><br><span class="line">            <span class="string">&quot;NavController <span class="variable">$this</span>.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> deepLinkMatch = _graph!!.matchDeepLink(request)</span><br><span class="line">    <span class="keyword">if</span> (deepLinkMatch != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> destination = deepLinkMatch.destination</span><br><span class="line">        <span class="keyword">val</span> args = destination.addInDefaultArgs(deepLinkMatch.matchingArgs) ?: Bundle()</span><br><span class="line">        <span class="keyword">val</span> node = deepLinkMatch.destination</span><br><span class="line">        <span class="keyword">val</span> intent = Intent().apply &#123;</span><br><span class="line">            setDataAndType(request.uri, request.mimeType)</span><br><span class="line">            action = request.action</span><br><span class="line">        &#125;</span><br><span class="line">        args.putParcelable(KEY_DEEP_LINK_INTENT, intent)</span><br><span class="line">        navigate(node, args, navOptions, navigatorExtras)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(</span><br><span class="line">            <span class="string">&quot;Navigation destination that matches request <span class="variable">$request</span> cannot be found in the &quot;</span> +</span><br><span class="line">                <span class="string">&quot;navigation graph <span class="variable">$_graph</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过matchDeepLink方法找到match对象<ul><li>如果没有match，抛出异常</li><li>如果有match，从match对象中取出<code>destination</code>，和<code>id4</code>方法一样，最终都会调用核心的<code>navigate</code>方法，同样需要找到核心<code>navigate</code>方法所需的几个参数<ul><li>node: 从destination对象中获得</li><li>args: 从destination对象中获得</li><li>navOptions: 函数参数</li><li>navigatorExtras: 函数参数</li></ul></li><li>调用核心的<code>navigate</code>方法</li></ul></li></ul><h4 id="核心的navigate方法"><a href="#核心的navigate方法" class="headerlink" title="核心的navigate方法"></a>核心的navigate方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    node: <span class="type">NavDestination</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    navigatorState.values.forEach &#123; state -&gt;</span><br><span class="line">        state.isNavigating = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> popped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> launchSingleTop = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> navigated = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (navOptions != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123; <span class="comment">// 1: 根据navOptions的不同情况，pop栈</span></span><br><span class="line">            navOptions.popUpToRoute != <span class="literal">null</span> -&gt;</span><br><span class="line">                popped = NavControllerInternal(</span><br><span class="line">                    navOptions.popUpToRoute!!,</span><br><span class="line">                    navOptions.isPopUpToInclusive(),</span><br><span class="line">                    navOptions.shouldPopUpToSaveState()</span><br><span class="line">                )</span><br><span class="line">            navOptions.popUpToId != -<span class="number">1</span> -&gt;</span><br><span class="line">                popped = NavControllerInternal(</span><br><span class="line">                    navOptions.popUpToId,</span><br><span class="line">                    navOptions.isPopUpToInclusive(),</span><br><span class="line">                    navOptions.shouldPopUpToSaveState()</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> finalArgs = node.addInDefaultArgs(args)</span><br><span class="line">    <span class="comment">// Now determine what new destinations we need to add to the back stack</span></span><br><span class="line">    <span class="keyword">if</span> (navOptions?.shouldRestoreState() == <span class="literal">true</span> &amp;&amp; backStackMap.containsKey(node.id)) &#123;</span><br><span class="line">        navigated = restoreStateInternal(node.id, finalArgs, navOptions, navigatorExtras) <span class="comment">// 2: 需要恢复状态，且backStackMap中存在对应的node的情况</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        launchSingleTop = navOptions?.shouldLaunchSingleTop() == <span class="literal">true</span> &amp;&amp;</span><br><span class="line">            launchSingleTopInternal(node, args) <span class="comment">//3: singleTop的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!launchSingleTop) &#123; <span class="comment">// 不需要singleTop的情况</span></span><br><span class="line">            <span class="comment">// Not a single top operation, so we&#x27;re looking to add the node to the back stack</span></span><br><span class="line">            <span class="keyword">val</span> backStackEntry = NavBackStackEntry.create(</span><br><span class="line">                context, node, finalArgs, hostLifecycleState, viewModel</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">val</span> navigator = _navigatorProvider.getNavigator&lt;Navigator&lt;NavDestination&gt;&gt;(</span><br><span class="line">                node.navigatorName</span><br><span class="line">            )</span><br><span class="line">            navigator.navigateInternal(listOf(backStackEntry), navOptions, navigatorExtras) &#123;</span><br><span class="line">                navigated = <span class="literal">true</span></span><br><span class="line">                addEntryToBackStack(node, finalArgs, it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    updateOnBackPressedCallbackEnabled() <span class="comment">// 4: 看起来是设置一个flag</span></span><br><span class="line">    navigatorState.values.forEach &#123; state -&gt;</span><br><span class="line">        state.isNavigating = <span class="literal">false</span> <span class="comment">// 5: 又设置一个flag</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (popped || navigated || launchSingleTop) &#123;</span><br><span class="line">        dispatchOnDestinationChanged() <span class="comment">// 6: 调用回调</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        updateBackStackLifecycle() <span class="comment">// 7: 更新导航栈的生命周期</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据上面的注释，一共做了7件事</li></ul><h5 id="2-需要恢复状态，且backStackMap中存在对应的node的情况"><a href="#2-需要恢复状态，且backStackMap中存在对应的node的情况" class="headerlink" title="2: 需要恢复状态，且backStackMap中存在对应的node的情况"></a>2: 需要恢复状态，且backStackMap中存在对应的node的情况</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavOptions</span> <span class="keyword">internal</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> singleTop: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> restoreState: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldRestoreState</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restoreState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> singleTop = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> restoreState = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">setRestoreState</span><span class="params">(restoreState: <span class="type">Boolean</span>)</span></span>: Builder &#123;</span><br><span class="line">            <span class="keyword">this</span>.restoreState = restoreState</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>shouldRestoreState</code>返回的是<code>restoreState</code>，是在构造时确定的</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">restoreStateInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    id: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!backStackMap.containsKey(id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 1: 首先是防止backStackMap中没有对应的node</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> backStackId = backStackMap[id]</span><br><span class="line">    <span class="comment">// Clear out the state we&#x27;re going to restore so that it isn&#x27;t restored a second time</span></span><br><span class="line">    backStackMap.values.removeAll &#123; it == backStackId &#125; <span class="comment">// 2: 删除map中所有和backStackId相等的entry</span></span><br><span class="line">    <span class="keyword">val</span> backStackState = backStackStates.remove(backStackId) <span class="comment">// 3: 删除backStackStates中对应的entry</span></span><br><span class="line">    <span class="comment">// Now restore the back stack from its saved state</span></span><br><span class="line">    <span class="keyword">val</span> entries = instantiateBackStack(backStackState) <span class="comment">// 4: 更新backStackState中的NavBackStackEntryState</span></span><br><span class="line">    <span class="keyword">return</span> executeRestoreState(entries, args, navOptions, navigatorExtras) <span class="comment">// 5: 找到Navigator，导航到对应位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-删除backStackStates中对应的entry"><a href="#3-删除backStackStates中对应的entry" class="headerlink" title="3: 删除backStackStates中对应的entry"></a>3: 删除backStackStates中对应的entry</h6><p>看一下backStackStates的数据结构</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> backStackStates = mutableMapOf&lt;String, ArrayDeque&lt;NavBackStackEntryState&gt;&gt;()</span><br></pre></td></tr></table></figure><h6 id="4-更新backStackState中的"><a href="#4-更新backStackState中的" class="headerlink" title="4: 更新backStackState中的"></a>4: 更新backStackState中的</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">instantiateBackStack</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    backStackState: <span class="type">ArrayDeque</span>&lt;<span class="type">NavBackStackEntryState</span>&gt;?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: List&lt;NavBackStackEntry&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> backStack = mutableListOf&lt;NavBackStackEntry&gt;()</span><br><span class="line">    <span class="keyword">var</span> currentDestination = backQueue.lastOrNull()?.destination ?: graph</span><br><span class="line">    backStackState?.forEach &#123; state -&gt;</span><br><span class="line">        <span class="keyword">val</span> node = currentDestination.findDestination(state.destinationId)</span><br><span class="line">        checkNotNull(node) &#123;</span><br><span class="line">            <span class="keyword">val</span> dest = NavDestination.getDisplayName(</span><br><span class="line">                context, state.destinationId</span><br><span class="line">            )</span><br><span class="line">            <span class="string">&quot;Restore State failed: destination <span class="variable">$dest</span> cannot be found from the current &quot;</span> +</span><br><span class="line">                <span class="string">&quot;destination <span class="variable">$currentDestination</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        backStack += state.instantiate(context, node, hostLifecycleState, viewModel)</span><br><span class="line">        currentDestination = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> backStack</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个空的backStack，然后遍历backStackState</li><li>找到当前栈最后一个entry的destination</li><li>从currentDestination中找到<code>state.destinationId</code>对应的node</li><li>根据node重新创建state对象，添加到backStack中，返回该backStack</li></ul><h6 id="5-找到Navigator，导航到对应位置"><a href="#5-找到Navigator，导航到对应位置" class="headerlink" title="5: 找到Navigator，导航到对应位置"></a>5: 找到Navigator，导航到对应位置</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">executeRestoreState</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    entries: <span class="type">List</span>&lt;<span class="type">NavBackStackEntry</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">// Split up the entries by Navigator so we can restore them as an atomic operation</span></span><br><span class="line">    <span class="keyword">val</span> entriesGroupedByNavigator = mutableListOf&lt;MutableList&lt;NavBackStackEntry&gt;&gt;()</span><br><span class="line">    entries.filterNot &#123; entry -&gt;</span><br><span class="line">        <span class="comment">// Skip navigation graphs - they&#x27;ll be added by addEntryToBackStack()</span></span><br><span class="line">        entry.destination <span class="keyword">is</span> NavGraph</span><br><span class="line">    &#125;.forEach &#123; entry -&gt;</span><br><span class="line">        <span class="keyword">val</span> previousEntryList = entriesGroupedByNavigator.lastOrNull()</span><br><span class="line">        <span class="keyword">val</span> previousNavigatorName = previousEntryList?.last()?.destination?.navigatorName</span><br><span class="line">        <span class="keyword">if</span> (previousNavigatorName == entry.destination.navigatorName) &#123;</span><br><span class="line">            <span class="comment">// Group back to back entries associated with the same Navigator together</span></span><br><span class="line">            previousEntryList += entry</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Create a new group for the new Navigator</span></span><br><span class="line">            entriesGroupedByNavigator += mutableListOf(entry)</span><br><span class="line">        &#125; <span class="comment">// 1: 如果 navigatorName和前一个的相等，则添加到前一个的list中，否则添加到新建一个list中，最后会得到一个二维数组，每个数组中的元素都是具有相同NavigatorName的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> navigated = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// Now actually navigate to each set of entries</span></span><br><span class="line">    <span class="keyword">for</span> (entryList <span class="keyword">in</span> entriesGroupedByNavigator) &#123;</span><br><span class="line">        <span class="keyword">val</span> navigator = _navigatorProvider.getNavigator&lt;Navigator&lt;NavDestination&gt;&gt;(</span><br><span class="line">            entryList.first().destination.navigatorName</span><br><span class="line">        ) <span class="comment">// 2: 每个entryList都具有相同的navigatorName，找到对应的Navigator</span></span><br><span class="line">        <span class="keyword">var</span> lastNavigatedIndex = <span class="number">0</span></span><br><span class="line">        navigator.navigateInternal(entryList, navOptions, navigatorExtras) &#123; entry -&gt;</span><br><span class="line">            navigated = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// If this destination is part of the restored back stack,</span></span><br><span class="line">            <span class="comment">// pass all destinations between the last navigated entry and this one</span></span><br><span class="line">            <span class="comment">// to ensure that any navigation graphs are properly restored as well</span></span><br><span class="line">            <span class="keyword">val</span> entryIndex = entries.indexOf(entry)</span><br><span class="line">            <span class="keyword">val</span> restoredEntries = <span class="keyword">if</span> (entryIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                entries.subList(lastNavigatedIndex, entryIndex + <span class="number">1</span>).also &#123;</span><br><span class="line">                    lastNavigatedIndex = entryIndex + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                emptyList()</span><br><span class="line">            &#125;</span><br><span class="line">            addEntryToBackStack(entry.destination, args, entry, restoredEntries)</span><br><span class="line">        &#125; <span class="comment">// 执行导航操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> navigated</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Navigator<span class="type">&lt;out NavDestination&gt;</span>.<span class="title">navigateInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    entries: <span class="type">List</span>&lt;<span class="type">NavBackStackEntry</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Navigator</span>.<span class="type">Extras</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    handler: (<span class="type">backStackEntry</span>: <span class="type">NavBackStackEntry</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    addToBackStackHandler = handler <span class="comment">// 先把回调放到一边，稍后由NavControllerNavigatorState的push方法调用</span></span><br><span class="line">    navigate(entries, navOptions, navigatorExtras) <span class="comment">// 执行导航操作</span></span><br><span class="line">    addToBackStackHandler = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">navigate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    entries: <span class="type">List</span>&lt;<span class="type">NavBackStackEntry</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    navOptions: <span class="type">NavOptions</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigatorExtras: <span class="type">Extras</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    entries.asSequence().map &#123; backStackEntry -&gt; <span class="comment">// 遍历entries，把他进行变换</span></span><br><span class="line">        <span class="keyword">val</span> destination = backStackEntry.destination <span class="keyword">as</span>? D ?: <span class="keyword">return</span><span class="symbol">@map</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">val</span> navigatedToDestination = navigate(</span><br><span class="line">            destination, backStackEntry.arguments, navOptions, navigatorExtras</span><br><span class="line">        ) <span class="comment">// 由子类实现，执行真正的导航操作</span></span><br><span class="line">        <span class="keyword">when</span> (navigatedToDestination) &#123;</span><br><span class="line">            <span class="literal">null</span> -&gt; <span class="literal">null</span> <span class="comment">// 返回null，当前backStackEntry变成null</span></span><br><span class="line">            destination -&gt; backStackEntry <span class="comment">// 返回导航结果与destination相同，backStackEntry也不变</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                state.createBackStackEntry(</span><br><span class="line">                    navigatedToDestination,</span><br><span class="line">                    navigatedToDestination.addInDefaultArgs(backStackEntry.arguments)</span><br><span class="line">                ) <span class="comment">// 否则创建新的backStackEntry</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.filterNotNull().forEach &#123; backStackEntry -&gt;</span><br><span class="line">        state.push(backStackEntry)</span><br><span class="line">    &#125; <span class="comment">// 1: 对于不为null的，重新放入state中,注意这里调用的push方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的state定义如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">val</span> state: NavigatorState</span><br><span class="line">    <span class="keyword">get</span>() = checkNotNull(_state) &#123;</span><br><span class="line">        <span class="string">&quot;You cannot access the Navigator&#x27;s state until the Navigator is attached&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _state: NavigatorState? = <span class="literal">null</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAttach</span><span class="params">(state: <span class="type">NavigatorState</span>)</span></span> &#123; <span class="comment">// 在onAttach时会初始化</span></span><br><span class="line">    _state = state</span><br><span class="line">    isAttached = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在NavController的onGraphCreated方法中有</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> navigatorBackStack = navigatorState.getOrPut(navigator) &#123;</span><br><span class="line">    NavControllerNavigatorState(navigator)</span><br><span class="line">&#125;</span><br><span class="line">navigator.onAttach(navigatorBackStack)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中navigatorState是从navigator到NavControllerNavigatorState的map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> navigatorState =</span><br><span class="line">        mutableMapOf&lt;Navigator&lt;<span class="keyword">out</span> NavDestination&gt;, NavControllerNavigatorState&gt;()</span><br><span class="line"><span class="comment">// getOrPut方法就是当没有key时，调用后面的函数插入到map中并返回，有key时则返回查询到的value</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;K, V&gt;</span> MutableMap<span class="type">&lt;K, V&gt;</span>.<span class="title">getOrPut</span><span class="params">(key: <span class="type">K</span>, defaultValue: () -&gt; <span class="type">V</span>)</span></span>: V &#123;</span><br><span class="line">    <span class="keyword">val</span> value = <span class="keyword">get</span>(key)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> answer = defaultValue()</span><br><span class="line">        put(key, answer)</span><br><span class="line">        answer</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面<code>1:</code>出调用的push方法，就是NavControllerNavigatorState的push方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(backStackEntry: <span class="type">NavBackStackEntry</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> destinationNavigator: Navigator&lt;<span class="keyword">out</span> NavDestination&gt; =</span><br><span class="line">        _navigatorProvider[backStackEntry.destination.navigatorName]</span><br><span class="line">    <span class="keyword">if</span> (destinationNavigator == navigator) &#123;</span><br><span class="line">        <span class="keyword">val</span> handler = addToBackStackHandler <span class="comment">// 还记得前面存起来的回调吗，就会在这里调用</span></span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">            handler(backStackEntry)</span><br><span class="line">            addInternal(backStackEntry)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// TODO handle the Navigator calling add() outside of a call to navigate()</span></span><br><span class="line">            Log.i(</span><br><span class="line">                TAG,</span><br><span class="line">                <span class="string">&quot;Ignoring add of destination <span class="subst">$&#123;backStackEntry.destination&#125;</span> &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;outside of the call to navigate(). &quot;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> navigatorBackStack = checkNotNull(navigatorState[destinationNavigator]) &#123;</span><br><span class="line">            <span class="string">&quot;NavigatorBackStack for <span class="subst">$&#123;backStackEntry.destination.navigatorName&#125;</span> should &quot;</span> +</span><br><span class="line">                <span class="string">&quot;already be created&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        navigatorBackStack.push(backStackEntry)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>疑问，他跳转那么多干什么？</p></blockquote><h4 id="3-singleTop的情况"><a href="#3-singleTop的情况" class="headerlink" title="3: singleTop的情况"></a>3: singleTop的情况</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavOptions</span> <span class="keyword">internal</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> singleTop: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldLaunchSingleTop</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleTop</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shouldLaunchSingleTop返回的值是其构造时的一个标志位</p><p>在分析<code>launchSingleTopInternal</code>方法前，先看一下NavController中维护的一个父子关系</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> childToParentEntries = mutableMapOf&lt;NavBackStackEntry, NavBackStackEntry&gt;()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> parentToChildCount = mutableMapOf&lt;NavBackStackEntry, AtomicInteger&gt;()</span><br></pre></td></tr></table></figure><p>看起来NavBackStackEntry之间存在一个父子关系，可能是一张图的形式，一个map存储这种父子关系，一个map存储子节点的个数</p><blockquote><p>后面看了<code>NavDestination</code>和<code>NavBackStackEntry</code>后就知道，这里维护的就是<code>NavDestination</code>之间的父子关系。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkChildToParent</span><span class="params">(child: <span class="type">NavBackStackEntry</span>, parent: <span class="type">NavBackStackEntry</span>)</span></span> &#123;</span><br><span class="line">    childToParentEntries[child] = parent</span><br><span class="line">    <span class="keyword">if</span> (parentToChildCount[parent] == <span class="literal">null</span>) &#123;</span><br><span class="line">        parentToChildCount[parent] = AtomicInteger(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    parentToChildCount[parent]!!.incrementAndGet()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlinkChildFromParent</span><span class="params">(child: <span class="type">NavBackStackEntry</span>)</span></span>: NavBackStackEntry? &#123;</span><br><span class="line">    <span class="keyword">val</span> parent = childToParentEntries.remove(child) ?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">val</span> count = parentToChildCount[parent]?.decrementAndGet()</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> navGraphNavigator: Navigator&lt;<span class="keyword">out</span> NavGraph&gt; =</span><br><span class="line">            _navigatorProvider[parent.destination.navigatorName]</span><br><span class="line">        navigatorState[navGraphNavigator]?.markTransitionComplete(parent)</span><br><span class="line">        parentToChildCount.remove(parent)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两个函数用于维护NavBackStackEntry之间的父子关系<br>当一个NavBackStackEntry的child个数为0时，会调用markTransitionComplete，具体干啥的继续挖坑吧！<br>&#x2F;&#x2F; todo : markTransitionComplete</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">launchSingleTopInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    node: <span class="type">NavDestination</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    args: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> currentBackStackEntry = currentBackStackEntry</span><br><span class="line">    <span class="keyword">val</span> nodeId = <span class="keyword">if</span> (node <span class="keyword">is</span> NavGraph) node.findStartDestination().id <span class="keyword">else</span> node.id</span><br><span class="line">    <span class="keyword">if</span> (nodeId != currentBackStackEntry?.destination?.id) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> tempBackQueue: ArrayDeque&lt;NavBackStackEntry&gt; = ArrayDeque()</span><br><span class="line">    <span class="comment">// pop from startDestination back to original node and create a new entry for each</span></span><br><span class="line">    backQueue.indexOfLast &#123; it.destination === node &#125;.let &#123; nodeIndex -&gt; <span class="comment">// 找到queue中最后一个destination和node相等的index</span></span><br><span class="line">        <span class="keyword">while</span> (backQueue.lastIndex &gt;= nodeIndex) &#123; <span class="comment">// 如果queue中最后一个index大于nodeIndex，就删掉他，并创建一个新的entry，放到tempBackQueue中，直到lastIndex小于nodeIndex为止</span></span><br><span class="line">            <span class="keyword">val</span> oldEntry = backQueue.removeLast() </span><br><span class="line">            unlinkChildFromParent(oldEntry) <span class="comment">// 删除父子关系</span></span><br><span class="line">            <span class="keyword">val</span> newEntry = NavBackStackEntry(</span><br><span class="line">                oldEntry,</span><br><span class="line">                oldEntry.destination.addInDefaultArgs(args)</span><br><span class="line">            ) <span class="comment">// 创建新的entry</span></span><br><span class="line">            tempBackQueue.addFirst(newEntry) <span class="comment">// 添加到tempBackQueue中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add each new entry to backQueue starting from original node to startDestination</span></span><br><span class="line">    tempBackQueue.forEach &#123; newEntry -&gt;</span><br><span class="line">        <span class="keyword">val</span> parent = newEntry.destination.parent</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> newParent = getBackStackEntry(parent.id)</span><br><span class="line">            linkChildToParent(newEntry, newParent) <span class="comment">// 更新entry之间的父子关系</span></span><br><span class="line">        &#125;</span><br><span class="line">        backQueue.add(newEntry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we replace NavState entries here only after backQueue has been finalized</span></span><br><span class="line">    tempBackQueue.forEach &#123; newEntry -&gt;</span><br><span class="line">        <span class="keyword">val</span> navigator = _navigatorProvider.getNavigator&lt;Navigator&lt;*&gt;&gt;(</span><br><span class="line">            newEntry.destination.navigatorName</span><br><span class="line">        )</span><br><span class="line">        navigator.onLaunchSingleTop(newEntry) <span class="comment">// 拿到对应的Navigator，执行onLaunchSingleTop</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLaunchSingleTop</span><span class="params">(backStackEntry: <span class="type">NavBackStackEntry</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> destination = backStackEntry.destination <span class="keyword">as</span>? D ?: <span class="keyword">return</span></span><br><span class="line">    navigate(destination, <span class="literal">null</span>, navOptions &#123; launchSingleTop = <span class="literal">true</span> &#125;, <span class="literal">null</span>) <span class="comment">// 这个navigate执行真正的导航操作，老演员了，上面见过就不说了</span></span><br><span class="line">    state.onLaunchSingleTop(backStackEntry) <span class="comment">// 这个state在前面也介绍过，下面看看他的onLaunchSingleTop方法干了什么</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLaunchSingleTop</span><span class="params">(backStackEntry: <span class="type">NavBackStackEntry</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// We update the back stack here because we don&#x27;t want to leave it to the navigator since</span></span><br><span class="line">    <span class="comment">// it might be using transitions.</span></span><br><span class="line">    backStackLock.withLock &#123;</span><br><span class="line">        <span class="keyword">val</span> tempStack = backStack.value.toMutableList()</span><br><span class="line">        tempStack.indexOfLast &#123; it.id == backStackEntry.id &#125;.let &#123; idx -&gt;</span><br><span class="line">            tempStack[idx] = backStackEntry</span><br><span class="line">        &#125;</span><br><span class="line">        _backStack.value = tempStack</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是更新当前的返回栈<br>找到最后一个id与backStackEntry的id相等的index，将这个位置的entry替换为backStackEntry</p></blockquote><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><p>在没有开启LaunchSingleTop的情况，或launchSingleTopInternal没有成功的情况那，就会走到这个代码分支</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!launchSingleTop) &#123;</span><br><span class="line">    <span class="comment">// Not a single top operation, so we&#x27;re looking to add the node to the back stack</span></span><br><span class="line">    <span class="keyword">val</span> backStackEntry = NavBackStackEntry.create(</span><br><span class="line">        context, node, finalArgs, hostLifecycleState, viewModel</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> navigator = _navigatorProvider.getNavigator&lt;Navigator&lt;NavDestination&gt;&gt;(</span><br><span class="line">        node.navigatorName</span><br><span class="line">    )</span><br><span class="line">    navigator.navigateInternal(listOf(backStackEntry), navOptions, navigatorExtras) &#123;</span><br><span class="line">        navigated = <span class="literal">true</span></span><br><span class="line">        addEntryToBackStack(node, finalArgs, it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建新的backStackEntry条目，找到对应的Navigator，执行导航操作，如果成功了，就将其加入到返回栈中</p><h2 id="NavigatorProvider"><a href="#NavigatorProvider" class="headerlink" title="NavigatorProvider"></a>NavigatorProvider</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _navigators: MutableMap&lt;String, Navigator&lt;<span class="keyword">out</span> NavDestination&gt;&gt; = mutableMapOf()</span><br><span class="line"><span class="meta">@get:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">val</span> navigators: Map&lt;String, Navigator&lt;<span class="keyword">out</span> NavDestination&gt;&gt;</span><br><span class="line">    <span class="keyword">get</span>() = _navigators.toMap()</span><br></pre></td></tr></table></figure><ul><li>以上就是<code>NavigatorProvider</code>的全部数据结构了，就是一个<code>String to Navigator</code>的<code>Map</code></li><li>回想<a href="#%E6%A0%B8%E5%BF%83%E7%9A%84navigate%E6%96%B9%E6%B3%95">核心的navigate方法</a>中多次使用<code>NavDestination#navigatorName</code>从<code>NavigatorProvider</code>中获取<code>Navigator</code>，所以<code>NavigatorProvider</code>的就是一个用来保存<code>navigatorName</code>到<code>Navigator</code>实例的<code>Map</code></li></ul><h3 id="获取Navigator"><a href="#获取Navigator" class="headerlink" title="获取Navigator"></a>获取Navigator</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Navigator&lt;*&gt;</span>&gt; <span class="title">getNavigator</span><span class="params">(navigatorClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">val</span> name = getNameForNavigator(navigatorClass)</span><br><span class="line">    <span class="keyword">return</span> getNavigator(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Retrieves a registered [Navigator] by name.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name name of the navigator to return</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the registered navigator with the given name</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IllegalStateException if the Navigator has not been added</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> NavigatorProvider.addNavigator</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Navigator&lt;*&gt;</span>&gt; <span class="title">getNavigator</span><span class="params">(name: <span class="type">String</span>)</span></span>: T &#123;</span><br><span class="line">    require(validateName(name)) &#123; <span class="string">&quot;navigator name cannot be an empty string&quot;</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> navigator = _navigators[name]</span><br><span class="line">        ?: <span class="keyword">throw</span> IllegalStateException(</span><br><span class="line">            <span class="string">&quot;Could not find Navigator with name \&quot;<span class="variable">$name</span>\&quot;. You must call &quot;</span> +</span><br><span class="line">                <span class="string">&quot;NavController.addNavigator() for each navigation type.&quot;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> navigator <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getNameForNavigator"><a href="#getNameForNavigator" class="headerlink" title="getNameForNavigator"></a>getNameForNavigator</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> annotationNames = mutableMapOf&lt;Class&lt;*&gt;, String?&gt;()</span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">validateName</span><span class="params">(name: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="literal">null</span> &amp;&amp; name.isNotEmpty()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNameForNavigator</span><span class="params">(navigatorClass: <span class="type">Class</span>&lt;<span class="type">out</span> <span class="type">Navigator</span>&lt;*&gt;&gt;)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> name = annotationNames[navigatorClass]</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">annotation</span> = navigatorClass.getAnnotation(</span><br><span class="line">                Navigator.Name::<span class="keyword">class</span>.java</span><br><span class="line">            )</span><br><span class="line">            name = <span class="keyword">annotation</span>?.value</span><br><span class="line">            require(validateName(name)) &#123;</span><br><span class="line">                <span class="string">&quot;No @Navigator.Name annotation found for <span class="subst">$&#123;navigatorClass.simpleName&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            annotationNames[navigatorClass] = name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name!!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发现获取的name是一个运行时注解，所以需要先看看<code>Navigator.Name</code>这个注解</li><li><code>Navigator.Name</code>是<code>Navigator</code>中的一个运行时注解<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">annotation</span>.Retention(AnnotationRetention.RUNTIME)</span><br><span class="line"><span class="meta">@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">Name</span>(<span class="keyword">val</span> value: String)</span><br></pre></td></tr></table></figure></li><li>我们观察几个<code>Navigator</code>，发现他们都有<code>@Navigator.Name</code>注解，并传入了对应的参数<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. FragmentNavigator</span></span><br><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;fragment&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">FragmentNavigator</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fragmentManager: FragmentManager,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> containerId: <span class="built_in">Int</span></span><br><span class="line">) : Navigator&lt;Destination&gt;() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. ActivityNavigator</span></span><br><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;activity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">ActivityNavigator</span>(</span><br><span class="line">    <span class="comment">/** <span class="doctag">@suppress</span> */</span></span><br><span class="line">    <span class="meta">@get:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> context: Context</span><br><span class="line">) : Navigator&lt;ActivityNavigator.Destination&gt;() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. NavGraphNavigator</span></span><br><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;navigation&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavGraphNavigator</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> navigatorProvider: NavigatorProvider</span><br><span class="line">) : Navigator&lt;NavGraph&gt;() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这样就可以明确了，<code>Navigator</code>的<code>name</code>就是注解时的<code>value</code></li><li><code>FragmentNavigator</code>的<code>name</code>是<code>&quot;fragment&quot;</code></li><li><code>ActivityNavigator</code>的<code>name</code>是<code>&quot;activity&quot;</code></li><li>…</li></ul><h3 id="addNavigator"><a href="#addNavigator" class="headerlink" title="addNavigator"></a>addNavigator</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">addNavigator</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navigator: <span class="type">Navigator</span>&lt;<span class="type">out</span> <span class="type">NavDestination</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Navigator&lt;<span class="keyword">out</span> NavDestination&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> addNavigator(getNameForNavigator(navigator.javaClass), navigator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Register a navigator by name. [destinations][NavDestination] may refer to any</span></span><br><span class="line"><span class="comment">* registered navigator by name for inflation. If a navigator by this name is already</span></span><br><span class="line"><span class="comment">* registered, this new navigator will replace it.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name name for this navigator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> navigator navigator to add</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the previously added Navigator for the given name, if any</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">addNavigator</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigator: <span class="type">Navigator</span>&lt;<span class="type">out</span> <span class="type">NavDestination</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Navigator&lt;<span class="keyword">out</span> NavDestination&gt;? &#123;</span><br><span class="line">    require(validateName(name)) &#123; <span class="string">&quot;navigator name cannot be an empty string&quot;</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> previousNavigator = _navigators[name]</span><br><span class="line">    <span class="keyword">if</span> (previousNavigator == navigator) &#123;</span><br><span class="line">        <span class="keyword">return</span> navigator</span><br><span class="line">    &#125;</span><br><span class="line">    check(previousNavigator?.isAttached != <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="string">&quot;Navigator <span class="variable">$navigator</span> is replacing an already attached <span class="variable">$previousNavigator</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    check(!navigator.isAttached) &#123;</span><br><span class="line">        <span class="string">&quot;Navigator <span class="variable">$navigator</span> is already attached to another NavController&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _navigators.put(name, navigator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addNavigator</code>时，首先取出对应<code>name</code>的<code>Navigator</code><ul><li>如果<code>Navigator</code>和要放入的<code>Navigator</code>相同，则直接返回</li><li>如果前一个<code>Navigator</code>不空且没有被<code>attach</code>，则抛出异常<ul><li>这里判断方法为<code>previousNavigator?.isAttached != true</code>, <code>null</code>或者<code>bool</code>和<code>true</code>比较，十分简洁，值得学习！</li></ul></li><li>检查确认要放入的<code>Navigator</code>没有被<code>attach</code>，否则抛出异常</li><li>最后将<code>Navigator</code>放入<code>_navigators</code>中，并返回前一个<code>Navigator</code></li></ul></li><li>被替换的<code>Navigator</code>如果不空的话，不能是已经Attach的</li><li>想要放入的<code>Navigator</code>也不能被<code>attach</code></li></ul><h3 id="扩展get和set方法"><a href="#扩展get和set方法" class="headerlink" title="扩展get和set方法"></a>扩展get和set方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NOTHING_TO_INLINE&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Navigator&lt;out NavDestination&gt;</span>&gt; NavigatorProvider.<span class="title">get</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: T = getNavigator(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NOTHING_TO_INLINE&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Navigator&lt;out NavDestination&gt;</span>&gt; NavigatorProvider.<span class="title">get</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    clazz: <span class="type">KClass</span>&lt;<span class="type">T</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: T = getNavigator(clazz.java)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NOTHING_TO_INLINE&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> NavigatorProvider.<span class="title">set</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigator: <span class="type">Navigator</span>&lt;<span class="type">out</span> <span class="type">NavDestination</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Navigator&lt;<span class="keyword">out</span> NavDestination&gt;? = addNavigator(name, navigator)</span><br></pre></td></tr></table></figure><p>很简单</p><h3 id="扩展的-运算符"><a href="#扩展的-运算符" class="headerlink" title="扩展的+=运算符"></a>扩展的<code>+=</code>运算符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NOTHING_TO_INLINE&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> NavigatorProvider.<span class="title">plusAssign</span><span class="params">(navigator: <span class="type">Navigator</span>&lt;<span class="type">out</span> <span class="type">NavDestination</span>&gt;)</span></span> &#123;</span><br><span class="line">    addNavigator(navigator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也很简单</p><h2 id="NavBackStackEntry"><a href="#NavBackStackEntry" class="headerlink" title="NavBackStackEntry"></a>NavBackStackEntry</h2><h3 id="先看注释"><a href="#先看注释" class="headerlink" title="先看注释"></a>先看注释</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Representation of an entry <span class="keyword">in</span> the back stack of a androidx.navigation.NavController.</span><br><span class="line">The Lifecycle, ViewModelStore, and SavedStateRegistry provided via <span class="keyword">this</span> <span class="keyword">object</span> are valid <span class="keyword">for</span> the lifetime of <span class="keyword">this</span> destination on the back stack: <span class="keyword">when</span> <span class="keyword">this</span> destination <span class="keyword">is</span> popped off the back stack, the lifecycle will be destroyed, state will no longer be saved, and ViewModels will be cleared.</span><br></pre></td></tr></table></figure><ul><li>介绍了两件事情<ul><li>这个类代表的是<code>NavController</code>中返回栈的一个<code>entry</code></li><li>他能提供<code>Lifecycle, ViewModelStore, and SavedStateRegistry</code><ul><li>当这个<code>NavBackStackEntry</code>存在于返回栈时，他们的生命周期时有效的，当这个<code>NavBackStackEntry</code>被pop掉时，他们的生命周期会被销毁，状态会被清除，ViewModel会被清除</li></ul></li></ul></li></ul><h3 id="类定义和数据结构"><a href="#类定义和数据结构" class="headerlink" title="类定义和数据结构"></a>类定义和数据结构</h3><h4 id="lifeCycle部分"><a href="#lifeCycle部分" class="headerlink" title="lifeCycle部分"></a>lifeCycle部分</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavBackStackEntry</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context?,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The destination associated with this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The destination that is currently visible to users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@set:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> destination: NavDestination,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> immutableArgs: Bundle? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hostLifecycleState: Lifecycle.State = Lifecycle.State.CREATED,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModelStoreProvider: NavViewModelStoreProvider? = <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The unique ID that serves as the identity of this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the unique ID of this entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> id: String = UUID.randomUUID().toString(),</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> savedState: Bundle? = <span class="literal">null</span></span><br><span class="line">) : LifecycleOwner,</span><br><span class="line">    ViewModelStoreOwner,</span><br><span class="line">    HasDefaultViewModelProviderFactory,</span><br><span class="line">    SavedStateRegistryOwner &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _lifecycle = LifecycleRegistry(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> lifecycle: Lifecycle</span><br><span class="line">        <span class="keyword">get</span>() = _lifecycle</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="meta">@set:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> maxLifecycle: Lifecycle.State = Lifecycle.State.INITIALIZED</span><br><span class="line">        <span class="keyword">set</span>(maxState) &#123;</span><br><span class="line">            field = maxState</span><br><span class="line">            updateState()</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>很简单实现了<code>lifeCycle</code></li><li><code>maxLifecycle</code>是<code>Lifecycle.State</code>，保存当前的状态，默认是<code>Lifecycle.State.INITIALIZED</code></li><li>调用<code>maxLifecycle</code>的<code>set</code>属性时，会调用<code>updateState</code>方法<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateState</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!savedStateRegistryAttached) &#123;</span><br><span class="line">        savedStateRegistryController.performAttach()</span><br><span class="line">        savedStateRegistryAttached = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (viewModelStoreProvider != <span class="literal">null</span>) &#123;</span><br><span class="line">            enableSavedStateHandles()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Perform the restore just once, the first time updateState() is called</span></span><br><span class="line">        <span class="comment">// and specifically *before* we move up the Lifecycle</span></span><br><span class="line">        savedStateRegistryController.performRestore(savedState)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hostLifecycleState.ordinal &lt; maxLifecycle.ordinal) &#123;</span><br><span class="line">        _lifecycle.currentState = hostLifecycleState</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _lifecycle.currentState = maxLifecycle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先判断<code>savedStateRegistry</code>是否被<code>attach</code>, 如果没有，就执行<code>attach</code>,并回复状态</li><li>然后就是更新<code>lifeCycle</code>的状态，取<code>hostLifecycleState</code>和<code>maxLifecycle</code>之中较小的那一个</li></ul><p>这里看到一个<code>ordinal</code>不太熟悉，这个属于<code>java</code>基础</p><blockquote><p>继续挖坑<br>&#x2F;&#x2F; todo: enum, ordinal</p></blockquote><h4 id="ViewModel部分"><a href="#ViewModel部分" class="headerlink" title="ViewModel部分"></a>ViewModel部分</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavBackStackEntry</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context?,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The destination associated with this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The destination that is currently visible to users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@set:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> destination: NavDestination,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> immutableArgs: Bundle? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hostLifecycleState: Lifecycle.State = Lifecycle.State.CREATED,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModelStoreProvider: NavViewModelStoreProvider? = <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The unique ID that serves as the identity of this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the unique ID of this entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> id: String = UUID.randomUUID().toString(),</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> savedState: Bundle? = <span class="literal">null</span></span><br><span class="line">) : LifecycleOwner,</span><br><span class="line">    ViewModelStoreOwner,</span><br><span class="line">    HasDefaultViewModelProviderFactory,</span><br><span class="line">    SavedStateRegistryOwner &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> defaultFactory <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        SavedStateViewModelFactory((context?.applicationContext <span class="keyword">as</span>? Application), <span class="keyword">this</span>, arguments)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The [SavedStateHandle] for this entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> savedStateHandle: SavedStateHandle <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        check(savedStateRegistryAttached) &#123;</span><br><span class="line">            <span class="string">&quot;You cannot access the NavBackStackEntry&#x27;s SavedStateHandle until it is added to &quot;</span> +</span><br><span class="line">                <span class="string">&quot;the NavController&#x27;s back stack (i.e., the Lifecycle of the NavBackStackEntry &quot;</span> +</span><br><span class="line">                <span class="string">&quot;reaches the CREATED state).&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        check(lifecycle.currentState != Lifecycle.State.DESTROYED) &#123;</span><br><span class="line">            <span class="string">&quot;You cannot access the NavBackStackEntry&#x27;s SavedStateHandle after the &quot;</span> +</span><br><span class="line">                <span class="string">&quot;NavBackStackEntry is destroyed.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ViewModelProvider(</span><br><span class="line">            <span class="keyword">this</span>, NavResultSavedStateFactory(<span class="keyword">this</span>)</span><br><span class="line">        ).<span class="keyword">get</span>(SavedStateViewModel::<span class="keyword">class</span>.java).handle</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> defaultViewModelProviderFactory: ViewModelProvider.Factory = defaultFactory</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> defaultViewModelCreationExtras: CreationExtras</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">val</span> extras = MutableCreationExtras()</span><br><span class="line">            (context?.applicationContext <span class="keyword">as</span>? Application)?.let &#123; application -&gt;</span><br><span class="line">                extras[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY] = application</span><br><span class="line">            &#125;</span><br><span class="line">            extras[SAVED_STATE_REGISTRY_OWNER_KEY] = <span class="keyword">this</span></span><br><span class="line">            extras[VIEW_MODEL_STORE_OWNER_KEY] = <span class="keyword">this</span></span><br><span class="line">            arguments?.let &#123; args -&gt;</span><br><span class="line">                extras[DEFAULT_ARGS_KEY] = args</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> extras</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> savedStateRegistry: SavedStateRegistry</span><br><span class="line">        <span class="keyword">get</span>() = savedStateRegistryController.savedStateRegistry</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NavResultSavedStateFactory</span>(</span><br><span class="line">        owner: SavedStateRegistryOwner</span><br><span class="line">    ) : AbstractSavedStateViewModelFactory(owner, <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            key: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">            handle: <span class="type">SavedStateHandle</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">return</span> SavedStateViewModel(handle) <span class="keyword">as</span> T</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SavedStateViewModel</span>(<span class="keyword">val</span> handle: SavedStateHandle) : ViewModel()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里保留了<code>savedStateHandle</code>，和<code>viewModel</code>有一定的耦合</li><li>我们使用的<code>viewModel</code>就存了一个<code>SavedStateHandle</code></li><li>提供了默认的<code>ViewModelProvider.Factory</code>和<code>Extras</code></li><li>基本都是和<code>savedState</code>相关的，所以先不看了</li><li><code>viewModel</code>的作用<ul><li>提供<code>handle</code></li><li>提供<code>viewModelStore</code>(就是<code>viewModelName</code>到<code>viewModel</code>的<code>map</code>)</li></ul></li><li>&#x2F;&#x2F; todo: 学习saveState后再看</li><li>&#x2F;&#x2F; 疑问，为啥非要通过<code>viewModel</code>来获取<code>handle</code>呢？</li></ul><h4 id="savedState部分"><a href="#savedState部分" class="headerlink" title="savedState部分"></a>savedState部分</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavBackStackEntry</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context?,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The destination associated with this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The destination that is currently visible to users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@set:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> destination: NavDestination,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> immutableArgs: Bundle? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hostLifecycleState: Lifecycle.State = Lifecycle.State.CREATED,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModelStoreProvider: NavViewModelStoreProvider? = <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The unique ID that serves as the identity of this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the unique ID of this entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> id: String = UUID.randomUUID().toString(),</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> savedState: Bundle? = <span class="literal">null</span></span><br><span class="line">) : LifecycleOwner,</span><br><span class="line">    ViewModelStoreOwner,</span><br><span class="line">    HasDefaultViewModelProviderFactory,</span><br><span class="line">    SavedStateRegistryOwner &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> savedStateRegistryController = SavedStateRegistryController.create(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> savedStateRegistryAttached = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The [SavedStateHandle] for this entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> savedStateHandle: SavedStateHandle <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        check(savedStateRegistryAttached) &#123;</span><br><span class="line">            <span class="string">&quot;You cannot access the NavBackStackEntry&#x27;s SavedStateHandle until it is added to &quot;</span> +</span><br><span class="line">                <span class="string">&quot;the NavController&#x27;s back stack (i.e., the Lifecycle of the NavBackStackEntry &quot;</span> +</span><br><span class="line">                <span class="string">&quot;reaches the CREATED state).&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        check(lifecycle.currentState != Lifecycle.State.DESTROYED) &#123;</span><br><span class="line">            <span class="string">&quot;You cannot access the NavBackStackEntry&#x27;s SavedStateHandle after the &quot;</span> +</span><br><span class="line">                <span class="string">&quot;NavBackStackEntry is destroyed.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ViewModelProvider(</span><br><span class="line">            <span class="keyword">this</span>, NavResultSavedStateFactory(<span class="keyword">this</span>)</span><br><span class="line">        ).<span class="keyword">get</span>(SavedStateViewModel::<span class="keyword">class</span>.java).handle</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> savedStateRegistry: SavedStateRegistry</span><br><span class="line">        <span class="keyword">get</span>() = savedStateRegistryController.savedStateRegistry</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&#x2F;&#x2F; todo: 学习saveState后再看</li></ul><h4 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavBackStackEntry</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context?,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The destination associated with this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The destination that is currently visible to users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@set:RestrictTo</span>(RestrictTo.Scope.LIBRARY_GROUP)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> destination: NavDestination,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> immutableArgs: Bundle? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hostLifecycleState: Lifecycle.State = Lifecycle.State.CREATED,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModelStoreProvider: NavViewModelStoreProvider? = <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The unique ID that serves as the identity of this entry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the unique ID of this entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> id: String = UUID.randomUUID().toString(),</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> savedState: Bundle? = <span class="literal">null</span></span><br><span class="line">) : LifecycleOwner,</span><br><span class="line">    ViewModelStoreOwner,</span><br><span class="line">    HasDefaultViewModelProviderFactory,</span><br><span class="line">    SavedStateRegistryOwner &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> arguments: Bundle?</span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">if</span> (immutableArgs == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Bundle(immutableArgs)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>id: public的一个随机unique的id，应该是用于标识一个<code>NavBackStackEntry</code></li><li>arguments: 在前面的<code>defaultViewModelCreationExtras</code>和<code>defaultFactory</code>中有使用，将args提供给<code>extras</code>和<code>factory</code></li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">constructor</span>(entry: NavBackStackEntry, arguments: Bundle? = entry.arguments) : <span class="keyword">this</span>(</span><br><span class="line">    entry.context,</span><br><span class="line">    entry.destination,</span><br><span class="line">    arguments,</span><br><span class="line">    entry.hostLifecycleState,</span><br><span class="line">    entry.viewModelStoreProvider,</span><br><span class="line">    entry.id,</span><br><span class="line">    entry.savedState</span><br><span class="line">) &#123;</span><br><span class="line">    hostLifecycleState = entry.hostLifecycleState</span><br><span class="line">    maxLifecycle = entry.maxLifecycle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对外暴露的构造函数仅这一个，除了<code>arguments</code>其他都是从另一个<code>NavBackStackEntry</code>中获取的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        context: <span class="type">Context</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        destination: <span class="type">NavDestination</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        arguments: <span class="type">Bundle</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        hostLifecycleState: <span class="type">Lifecycle</span>.<span class="type">State</span> = Lifecycle.State.CREATED,</span></span></span><br><span class="line"><span class="params"><span class="function">        viewModelStoreProvider: <span class="type">NavViewModelStoreProvider</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        id: <span class="type">String</span> = UUID.randomUUID()</span></span>.toString(),</span><br><span class="line">        savedState: Bundle? = <span class="literal">null</span></span><br><span class="line">    ): NavBackStackEntry = NavBackStackEntry(</span><br><span class="line">        context, destination, arguments,</span><br><span class="line">        hostLifecycleState, viewModelStoreProvider, id, savedState</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过create方法暴露了另外一个私有的构造函数，猜测这么做的目的是为了限制该构造函数仅在<code>navigation</code>库的范围内使用吧？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>总的来说，这个类作为<code>NavController</code>返回栈的一个<code>entry</code>，同时提供了一些变量<ul><li>destination</li><li>id</li><li>arguments</li><li>savedStateHandle</li><li>maxLifecycle</li><li>viewModelStore</li></ul></li></ul><h2 id="NavDestination"><a href="#NavDestination" class="headerlink" title="NavDestination"></a>NavDestination</h2><h3 id="先看注释-1"><a href="#先看注释-1" class="headerlink" title="先看注释"></a>先看注释</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NavDestination represents one node within an overall navigation graph.</span><br><span class="line">Each destination <span class="keyword">is</span> associated with a Navigator which knows how to navigate to <span class="keyword">this</span> particular destination.</span><br><span class="line">Destinations declare a <span class="keyword">set</span> of actions that they support. These actions form a navigation API <span class="keyword">for</span> the destination; the same actions declared on different destinations that fill similar roles allow application code to navigate based on semantic intent.</span><br><span class="line">Each destination has a <span class="keyword">set</span> of arguments that will be applied <span class="keyword">when</span> navigating to that destination. Any default values <span class="keyword">for</span> those arguments can be overridden at the time of navigation.</span><br><span class="line">NavDestinations should be created via Navigator.createDestination.</span><br></pre></td></tr></table></figure><ul><li><code>NavDestination</code>代表一个导航图中的一个节点</li><li>每个<code>NavDestination</code>都关联一个<code>Navigator</code>，<code>Navigator</code>知道如何导航到这个<code>NavDestination</code></li><li>保存一组<code>action</code><ul><li>后半句有点难懂，不同<code>destinations</code>中相同的<code>action</code>发挥相同的作用，可以允许应用代码基于语义intent导航</li></ul></li><li>每个destination都有一组args，在导航到这个destination时可能会被覆盖</li><li><code>NavDestinations</code>应该通过<code>Navigator.createDestination</code>创建</li></ul><h3 id="类定义和数据结构-1"><a href="#类定义和数据结构-1" class="headerlink" title="类定义和数据结构"></a>类定义和数据结构</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavDestination</span>(</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name associated with this destination&#x27;s [Navigator].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> navigatorName: String</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@kotlin</span>.<span class="keyword">annotation</span>.Retention(AnnotationRetention.BINARY)</span><br><span class="line">    <span class="meta">@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">ClassType</span>(<span class="keyword">val</span> value: KClass&lt;*&gt;) <span class="comment">// 1. 注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> parent: NavGraph? = <span class="literal">null</span> <span class="comment">// 2. partent</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@suppress</span> */</span></span><br><span class="line">        <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">set</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> idName: String? = <span class="literal">null</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> label: CharSequence? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> deepLinks = mutableListOf&lt;NavDeepLink&gt;() <span class="comment">// 3. deepLinks</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> actions: SparseArrayCompat&lt;NavAction&gt; = SparseArrayCompat() <span class="comment">// 4. actions</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _arguments: MutableMap&lt;String, NavArgument&gt; = mutableMapOf() <span class="comment">// 5. args</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> arguments: Map&lt;String, NavArgument&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _arguments.toMap()</span><br><span class="line">    <span class="meta">@get:IdRes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> id: <span class="built_in">Int</span> = <span class="number">0</span> <span class="comment">// 6. id</span></span><br><span class="line">        <span class="keyword">set</span>(<span class="meta">@IdRes</span> id) &#123;</span><br><span class="line">            field = id</span><br><span class="line">            idName = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> route: String? = <span class="literal">null</span> <span class="comment">// 7. route</span></span><br><span class="line">        <span class="keyword">set</span>(route) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route == <span class="literal">null</span>) &#123;</span><br><span class="line">                id = <span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                require(route.isNotBlank()) &#123; <span class="string">&quot;Cannot have an empty route&quot;</span> &#125;</span><br><span class="line">                <span class="keyword">val</span> internalRoute = createRoute(route)</span><br><span class="line">                id = internalRoute.hashCode()</span><br><span class="line">                addDeepLink(internalRoute)</span><br><span class="line">            &#125;</span><br><span class="line">            deepLinks.remove(deepLinks.firstOrNull &#123; it.uriPattern == createRoute(field) &#125;)</span><br><span class="line">            field = route</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> displayName: String</span><br><span class="line">        <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">        <span class="keyword">get</span>() = idName ?: id.toString()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">val</span> NavDestination.hierarchy: Sequence&lt;NavDestination&gt; <span class="comment">// 8. hierarchy</span></span><br><span class="line">            <span class="keyword">get</span>() = generateSequence(<span class="keyword">this</span>) &#123; it.parent &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="1-注解"><a href="#1-注解" class="headerlink" title="1. 注解"></a><code>1. 注解</code></h4><p>在子类中使用，在<code>XXXNavigator</code>中会有内部类<code>Destination</code>继承<code>NavDestination</code>，并使用该注解标注其导航的<code>class</code></p><p>如，在<code>FragmentNavigator</code>中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NavDestination</span>.ClassType(Fragment::<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Destination</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">constructor</span>(fragmentNavigator: Navigator&lt;<span class="keyword">out</span> Destination&gt;) :</span><br><span class="line">    NavDestination(fragmentNavigator) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时没有找到获取并使用这个注解的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This optional <span class="keyword">annotation</span> allows tooling to offer auto-complete <span class="keyword">for</span> the android:name attribute. This should match the <span class="keyword">class</span> <span class="title class_">type</span> <span class="title">passed</span> <span class="title">to</span> <span class="title">parseClassFromName</span> <span class="title">when</span> <span class="title">parsing</span> <span class="title">the</span> <span class="title">android</span>:<span class="type">name</span> <span class="title">attribute</span>.</span><br></pre></td></tr></table></figure><p>看起来是xml自动补全的时候会用到</p><h4 id="2-parent"><a href="#2-parent" class="headerlink" title="2. parent"></a><code>2. parent</code></h4><p>parent是<code>NavGraph</code>，表示当前<code>NavDestination</code>的父节点，同时剧透一下, <code>NavGraph</code>是<code>NavDestination</code>的子类</p><h4 id="8-hierarchy"><a href="#8-hierarchy" class="headerlink" title="8. hierarchy"></a><code>8. hierarchy</code></h4><p><code>hierarchy</code>是一个扩展属性，从当前<code>NavDestination</code>开始，生成一个父节点的sequence</p><h4 id="3-deepLinks"><a href="#3-deepLinks" class="headerlink" title="3. deepLinks"></a><code>3. deepLinks</code></h4><p>deepLinks是一个list, 在<code>matchDeepLink</code>时会遍历该list，寻找到最佳match的<code>NavDeepLink</code></p><h4 id="4-actions"><a href="#4-actions" class="headerlink" title="4. actions"></a><code>4. actions</code></h4><p>action是一个SparseArrayCompat，也就是一个<code>Int</code>到<code>Object</code>的<code>Map</code></p><h4 id="7-route"><a href="#7-route" class="headerlink" title="7. route"></a><code>7. route</code></h4><p>代表当前Destination的route字符串，可以看到他也调用了<code>addDeepLink</code></p><h3 id="addDeepLink"><a href="#addDeepLink" class="headerlink" title="addDeepLink"></a>addDeepLink</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">addDeepLink</span><span class="params">(uriPattern: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    addDeepLink(NavDeepLink.Builder().setUriPattern(uriPattern).build())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">addDeepLink</span><span class="params">(navDeepLink: <span class="type">NavDeepLink</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> missingRequiredArguments = _arguments.missingRequiredArguments &#123; key -&gt;</span><br><span class="line">        key !<span class="keyword">in</span> navDeepLink.argumentsNames</span><br><span class="line">    &#125;</span><br><span class="line">    require(missingRequiredArguments.isEmpty()) &#123;</span><br><span class="line">        <span class="string">&quot;Deep link <span class="subst">$&#123;navDeepLink.uriPattern&#125;</span> can&#x27;t be used to open destination <span class="variable">$this</span>.\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;Following required arguments are missing: <span class="variable">$missingRequiredArguments</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deepLinks.add(navDeepLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个函数是给<code>route</code>使用的，将route字符串变成一个<code>NavDeepLink</code><br>第二个函数很简单，就是将<code>NavDeepLink</code>添加到<code>deepLinks</code>中，在放入之前会检查一下，保证<code>_arguments</code>中的key全部存在于<code>deepLink</code>的<code>argumentsNames</code>中</p><h3 id="route转换成NavDeepLinkRequest"><a href="#route转换成NavDeepLinkRequest" class="headerlink" title="route转换成NavDeepLinkRequest"></a>route转换成NavDeepLinkRequest</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">createRoute</span><span class="params">(route: <span class="type">String</span>?)</span></span>: String =</span><br><span class="line">    <span class="keyword">if</span> (route != <span class="literal">null</span>) <span class="string">&quot;android-app://androidx.navigation/<span class="variable">$route</span>&quot;</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NavDeepLinkRequest.Builder#build</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">build</span><span class="params">()</span></span>: NavDeepLinkRequest &#123;</span><br><span class="line">    <span class="keyword">return</span> NavDeepLinkRequest(uri, action, mimeType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是把route根据特定格式转换成一个uri，存到<code>NavDeepLinkRequest</code>这个类中，这个类也很简单</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavDeepLinkRequest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> uri: Uri?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> action: String?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> mimeType: String?</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是用来存这三个东西的</p><h3 id="matchDeepLink"><a href="#matchDeepLink" class="headerlink" title="matchDeepLink"></a>matchDeepLink</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchDeepLink</span><span class="params">(route: <span class="type">String</span>)</span></span>: DeepLinkMatch? &#123;</span><br><span class="line">    <span class="keyword">val</span> request = NavDeepLinkRequest.Builder.fromUri(createRoute(route).toUri()).build()</span><br><span class="line">    <span class="keyword">val</span> matchingDeepLink = <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">is</span> NavGraph) &#123;</span><br><span class="line">        matchDeepLinkExcludingChildren(request)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchDeepLink(request)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matchingDeepLink</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数是用来通过route来匹配DeepLink的，如果当前<code>NavDestination</code>是子类<code>NavGraph</code>，则会调用子类的函数<code>matchDeepLinkExcludingChildren</code>，否则调用<code>matchDeepLink</code>。<code>matchDeepLinkExcludingChildren</code>在后面介绍</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchDeepLink</span><span class="params">(navDeepLinkRequest: <span class="type">NavDeepLinkRequest</span>)</span></span>: DeepLinkMatch? &#123;</span><br><span class="line">    <span class="keyword">if</span> (deepLinks.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bestMatch: DeepLinkMatch? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (deepLink <span class="keyword">in</span> deepLinks) &#123;</span><br><span class="line">        <span class="keyword">val</span> uri = navDeepLinkRequest.uri</span><br><span class="line">        <span class="comment">// includes matching args for path, query, and fragment</span></span><br><span class="line">        <span class="keyword">val</span> matchingArguments =</span><br><span class="line">            <span class="keyword">if</span> (uri != <span class="literal">null</span>) deepLink.getMatchingArguments(uri, _arguments) <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">val</span> matchingPathSegments = deepLink.calculateMatchingPathSegments(uri)</span><br><span class="line">        <span class="keyword">val</span> requestAction = navDeepLinkRequest.action</span><br><span class="line">        <span class="keyword">val</span> matchingAction = requestAction != <span class="literal">null</span> &amp;&amp; requestAction ==</span><br><span class="line">            deepLink.action</span><br><span class="line">        <span class="keyword">val</span> mimeType = navDeepLinkRequest.mimeType</span><br><span class="line">        <span class="keyword">val</span> mimeTypeMatchLevel =</span><br><span class="line">            <span class="keyword">if</span> (mimeType != <span class="literal">null</span>) deepLink.getMimeTypeMatchRating(mimeType) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (matchingArguments != <span class="literal">null</span> || ((matchingAction || mimeTypeMatchLevel &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">                hasRequiredArguments(deepLink, uri, _arguments))</span><br><span class="line">        ) &#123; <span class="comment">// 2. match的条件</span></span><br><span class="line">            <span class="keyword">val</span> newMatch = DeepLinkMatch(</span><br><span class="line">                <span class="keyword">this</span>, matchingArguments,</span><br><span class="line">                deepLink.isExactDeepLink, matchingPathSegments, matchingAction,</span><br><span class="line">                mimeTypeMatchLevel</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> (bestMatch == <span class="literal">null</span> || newMatch &gt; bestMatch) &#123; <span class="comment">// 1. 比较match, 选择最好的一个match</span></span><br><span class="line">                bestMatch = newMatch</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bestMatch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>就是遍历所有deepLinks数组，找到最match的一个</li><li>&#x2F;&#x2F; todo: 2. match的条件</li></ul><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个destination的唯一id，必须是资源id</span></span><br><span class="line"><span class="meta">@get:IdRes</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> id: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">set</span>(<span class="meta">@IdRes</span> id) &#123;</span><br><span class="line">        field = id</span><br><span class="line">        idName = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就有疑问了，这里的id应该是导航图xml的id，如下所示，id在onInflate的时候被赋值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInflate</span><span class="params">(context: <span class="type">Context</span>, attrs: <span class="type">AttributeSet</span>)</span></span> &#123;</span><br><span class="line">    context.resources.obtainAttributes(attrs, R.styleable.Navigator).use &#123; array -&gt;</span><br><span class="line">        route = array.getString(R.styleable.Navigator_route)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array.hasValue(R.styleable.Navigator_android_id)) &#123;</span><br><span class="line">            id = array.getResourceId(R.styleable.Navigator_android_id, <span class="number">0</span>)</span><br><span class="line">            idName = getDisplayName(context, id)</span><br><span class="line">        &#125;</span><br><span class="line">        label = array.getText(R.styleable.Navigator_android_label)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在Compose中，并不使用xml的导航图，如何初始化这个id呢？</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> route: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">set</span>(route) &#123;</span><br><span class="line">        <span class="keyword">if</span> (route == <span class="literal">null</span>) &#123;</span><br><span class="line">            id = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            require(route.isNotBlank()) &#123; <span class="string">&quot;Cannot have an empty route&quot;</span> &#125;</span><br><span class="line">            <span class="keyword">val</span> internalRoute = createRoute(route)</span><br><span class="line">            id = internalRoute.hashCode()</span><br><span class="line">            addDeepLink(internalRoute)</span><br><span class="line">        &#125;</span><br><span class="line">        deepLinks.remove(deepLinks.firstOrNull &#123; it.uriPattern == createRoute(field) &#125;)</span><br><span class="line">        field = route</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到这里，如果是compose的route字符串，createRoute后，会使用hashCode为id赋值</p><h3 id="addInDefaultArgs"><a href="#addInDefaultArgs" class="headerlink" title="addInDefaultArgs"></a>addInDefaultArgs</h3><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>大概作用就是</p><ul><li>保存action对象，维护了一个map，保存action的resId到action对象</li><li>提供navigatorName，方便NavController根据name找到对应的Navigator</li><li>维护deeplink列表，提供deeplink匹配的方法</li><li>提供parent和hierarchy，提供嵌套图的支持</li><li>提供route到deeplinkRequest的转换</li></ul><h2 id="NavGraph"><a href="#NavGraph" class="headerlink" title="NavGraph"></a>NavGraph</h2><h3 id="先看注释-2"><a href="#先看注释-2" class="headerlink" title="先看注释"></a>先看注释</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NavGraph <span class="keyword">is</span> a collection of NavDestination nodes fetchable <span class="keyword">by</span> ID.</span><br><span class="line">A NavGraph serves <span class="keyword">as</span> a <span class="string">&#x27;virtual&#x27;</span> destination: <span class="keyword">while</span> the NavGraph itself will not appear on the back stack, navigating to the NavGraph will cause the starting destination to be added to the back stack.</span><br><span class="line">Construct a new NavGraph. This NavGraph <span class="keyword">is</span> not valid until you add a destination and <span class="keyword">set</span> the starting destination.</span><br><span class="line">Params:</span><br><span class="line">navGraphNavigator - The NavGraphNavigator which <span class="keyword">this</span> destination will be associated with. Generally retrieved via a NavController<span class="string">&#x27;sNavigatorProvider.getNavigator method.</span></span><br></pre></td></tr></table></figure><ul><li>存储了图中所有的节点，可以通过id获取各个节点<ul><li>这里的节点就是上面介绍的<code>NavDestination</code></li></ul></li><li>导航图本身是一个虚拟的destination，但是他不会出现在栈中，如果试图导航到NavGraph，将会导航到这个导航图的<code>startDest</code>中</li></ul><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NavGraph</span>(navGraphNavigator: Navigator&lt;<span class="keyword">out</span> NavGraph&gt;) :</span><br><span class="line">    NavDestination(navGraphNavigator), Iterable&lt;NavDestination&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> nodes: SparseArrayCompat&lt;NavDestination&gt; = SparseArrayCompat&lt;NavDestination&gt;()</span><br><span class="line">        <span class="comment">/** <span class="doctag">@suppress</span> */</span></span><br><span class="line">        <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> startDestId = <span class="number">0</span></span><br><span class="line">    <span class="meta">@get:IdRes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> startDestinationId: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = startDestId</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>(startDestId) &#123;</span><br><span class="line">            require(startDestId != id) &#123;</span><br><span class="line">                <span class="string">&quot;Start destination <span class="variable">$startDestId</span> cannot use the same id as the graph <span class="variable">$this</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (startDestinationRoute != <span class="literal">null</span>) &#123;</span><br><span class="line">                startDestinationRoute = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.startDestId = startDestId</span><br><span class="line">            startDestIdName = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> startDestinationRoute: String? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>(startDestRoute) &#123;</span><br><span class="line">            startDestId = <span class="keyword">if</span> (startDestRoute == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                require(startDestRoute != route) &#123;</span><br><span class="line">                    <span class="string">&quot;Start destination <span class="variable">$startDestRoute</span> cannot use the same route as the graph <span class="variable">$this</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                require(startDestRoute.isNotBlank()) &#123;</span><br><span class="line">                    <span class="string">&quot;Cannot have an empty start destination route&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">val</span> internalRoute = createRoute(startDestRoute)</span><br><span class="line">                internalRoute.hashCode()</span><br><span class="line">            &#125;</span><br><span class="line">            field = startDestRoute</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nodes，存储所有destination的map，key时destination的id</li><li>startDestId，startDestinationRoute起始destination的id、route<ul><li>如果startDestinationRoute不空，和id的情况相同，createRoute后，使用hashCode作为startDestId</li></ul></li></ul><h3 id="onInflate-1"><a href="#onInflate-1" class="headerlink" title="onInflate"></a>onInflate</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInflate</span><span class="params">(context: <span class="type">Context</span>, attrs: <span class="type">AttributeSet</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onInflate(context, attrs)</span><br><span class="line">    context.resources.obtainAttributes(</span><br><span class="line">        attrs,</span><br><span class="line">        R.styleable.NavGraphNavigator</span><br><span class="line">    ).use &#123;</span><br><span class="line">        startDestinationId = it.getResourceId(R.styleable.NavGraphNavigator_startDestination, <span class="number">0</span>)</span><br><span class="line">        startDestIdName = getDisplayName(context, startDestId)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析xml时，从xml中获取startDestination的id</p><h3 id="matchDeepLink-1"><a href="#matchDeepLink-1" class="headerlink" title="matchDeepLink"></a>matchDeepLink</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchDeepLink</span><span class="params">(navDeepLinkRequest: <span class="type">NavDeepLinkRequest</span>)</span></span>: DeepLinkMatch? &#123;</span><br><span class="line">    <span class="comment">// First search through any deep links directly added to this NavGraph</span></span><br><span class="line">    <span class="keyword">val</span> bestMatch = <span class="keyword">super</span>.matchDeepLink(navDeepLinkRequest)</span><br><span class="line">    <span class="comment">// Then search through all child destinations for a matching deep link</span></span><br><span class="line">    <span class="keyword">val</span> bestChildMatch = mapNotNull &#123; child -&gt;</span><br><span class="line">        child.matchDeepLink(navDeepLinkRequest)</span><br><span class="line">    &#125;.maxOrNull()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listOfNotNull(bestMatch, bestChildMatch).maxOrNull()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchDeepLinkExcludingChildren</span><span class="params">(request: <span class="type">NavDeepLinkRequest</span>)</span></span>: DeepLinkMatch? =</span><br><span class="line">    <span class="keyword">super</span>.matchDeepLink(request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>navGraph本身也可以作为一个destination，拥有deeplink，所以先搜索他自身的match，然后搜索所有子节点的match，最后返回最match的一个</li><li>这个函数只有在使用route字符串匹配时会使用，通过route匹配时就不考虑子节点，为什么呢？</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>其实本质上也是一个保存子节点的map</li><li>提供matchDeepLink方法，用于匹配子子节点和自己本身deeplink</li></ul><h2 id="NavigatorState"><a href="#NavigatorState" class="headerlink" title="NavigatorState"></a>NavigatorState</h2><h2 id="NavControllerNavigatorState"><a href="#NavControllerNavigatorState" class="headerlink" title="NavControllerNavigatorState"></a>NavControllerNavigatorState</h2><h2 id="NavControllerViewModel"><a href="#NavControllerViewModel" class="headerlink" title="NavControllerViewModel"></a>NavControllerViewModel</h2><h2 id="FragmentNavigator"><a href="#FragmentNavigator" class="headerlink" title="FragmentNavigator"></a>FragmentNavigator</h2><h2 id="ActivityNavigator"><a href="#ActivityNavigator" class="headerlink" title="ActivityNavigator"></a>ActivityNavigator</h2><h2 id="总结中的总结"><a href="#总结中的总结" class="headerlink" title="总结中的总结"></a>总结中的总结</h2><h3 id="需要一个NavHostFragment"><a href="#需要一个NavHostFragment" class="headerlink" title="需要一个NavHostFragment"></a>需要一个NavHostFragment</h3><p>想要使用<code>navigation</code>库，需要有一个<code>NavHostFragment</code>。<code>navigation</code>库为<code>Fragment</code>, <code>View</code>, <code>Acivity</code>都添加了扩展函数<code>findNavController</code>，用来找到<code>navController</code>，查找时都需要一个<code>NavHostFragment</code>的存在。</p><ul><li>对于<code>Fragment</code>来说，需要它本身，或者所有上级<code>Fragment</code>中存在一个<code>NavHostFragment</code></li><li>对于View来说，需要他本身，或者所有上级view的tag中，存在<code>R.id.nav_controller_view_tag</code>,这个tag下可以获得NavController。NavHostFragment的<a href="#onviewcreated">onViewCreated</a>方法中,会对<code>Fragment</code>的<code>rootView</code>设置这个<code>tag</code></li><li>对于<code>activity</code>来说，需要指定一个<code>viewId</code>，通过<code>findView</code>找到这个<code>view</code>后，寻找过程和<code>View</code>相同</li></ul><p>这个<code>NavHostFragment</code>的<code>graphId</code>不能通过用户传入，因为这个变量是<code>private</code>的。<code>NavHostFragment</code>通过<code>xml</code>获取这个导航图的<code>id</code>，或者使用<code>KEY_GRAPH_ID</code>从<code>savedState</code>或<code>Fragment</code>的<code>mArguments</code>中获取，而这个<code>KEY_GRAPH_ID</code>也是仅在<code>navigation</code>库中可用的。</p><p><code>NavHostFragment</code>实现了<code>NavHost</code>，拥有了一个<code>NavController</code>，通过它的<code>navigate</code>方法可以进行跳转。<br><code>NavHostFragment</code>实现<code>NavController</code>的实现类是<code>NavHostController</code>,这个类中没有任何函数实现，只是将父类的几个函数变成<code>final</code>的</p><h3 id="导航图-1"><a href="#导航图-1" class="headerlink" title="导航图"></a>导航图</h3><ul><li>导航图可以通过<code>xml</code>和<code>kotlin DSL</code>描述。</li><li>导航图可以包含多个子节点，每个子节点都是一个<code>destination</code>。<ul><li>每个<code>destination</code>可以是<code>fragment</code>，<code>activity</code>，<code>dialog</code>，或者一个<code>NavGraph</code>作为子图。每个<code>destination</code>可以包含多个<code>action</code><ul><li>每个<code>action</code>包含它本身的<code>id</code>和导航目的地的<code>destinationId</code>，用于确定导航的目的地。</li></ul></li><li>每个<code>destination</code>也可以包含多个<code>deeplink</code><ul><li><code>NavController</code>通过<code>deeplink</code>进行导航时，会搜索导航图，以及导航图中的<code>destination</code>的<code>deeplink</code>，找到匹配度最高的一个，进行导航。</li><li>在<code>Compose</code>中使用<code>route</code>字符串进行导航时，实际上会将其包装为一个<code>uri</code>类型的<code>deeplink</code>，然后进行匹配。</li><li>每个<code>deeplink</code>包含其<code>uri</code>，<code>action</code>字符串，<code>mimeType</code>字符串，用于匹配。</li></ul></li></ul></li><li>导航图本身也是一个<code>destination</code>，导航到一个<code>NavGraph</code>是，会导航到<code>startDestination</code>。<ul><li>在<code>xml</code>中，给根节点<code>&lt;navigation&gt;</code>添加<code>startDestination</code>参数，填写一个<code>destinationId</code>，作为<code>startDestination</code>。</li><li>在<code>kotlin DSL</code>中，通过<code>startDestination</code>指定一个<code>route</code>字符串，作为<code>startDestination</code></li></ul></li></ul><h3 id="NavController-1"><a href="#NavController-1" class="headerlink" title="NavController"></a>NavController</h3><ul><li>这个类是整个<code>navigation</code>库的核心<ul><li>提供多种<code>navigate</code>方法，可以通过<code>destination</code>的<code>resId</code>，<code>route</code>字符串和<code>deepLink</code>进行导航</li><li>这个类维护了导航图<code>NavGraph</code>，返回栈<code>_currentBackStack</code>等数据结构</li><li>这个类并承担具体的跳转任务，具体的跳转任务由<code>Navigator</code>的各个子类完成<ul><li>上面说到导航目的地有很多种类，<code>NavController</code>会根据导航目的地的类型，选择不同的<code>Navigator</code>来完成跳转任务，比如<code>FragmentNavigator</code>，<code>ActivityNavigator</code>，<code>DialogNavigator</code></li><li>每个<code>Navigator</code>都有<code>name</code>，是通过一个注解<code>Navigator.Name</code>指定的。</li><li><code>NavController</code>中因此也维护了<code>_navigatorProvider</code>，他的作用类似于一个<code>map</code>,存储<code>Navigator</code>的<code>name</code>和<code>Navigator</code>的映射关系。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;NavController&lt;/code&gt;是中央导航 API。它会跟踪用户访问过的目的地，并允许用户在目的地之间移动。&lt;/p&gt;
&lt;h3 id=&quot;获取NavController&quot;&gt;&lt;a href=&quot;#获取NavController&quot; class=&quot;headerlink&quot; title=&quot;获取NavController&quot;&gt;&lt;/a&gt;获取&lt;code&gt;NavController&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是NavHostFragment&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; navController = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.navController&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基础04-LiveData</title>
    <link href="https://jingtianer.github.io/home/2024/08/06/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8004-LiveData/"/>
    <id>https://jingtianer.github.io/home/2024/08/06/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8004-LiveData/</id>
    <published>2024-08-06T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><h3 id="LiveData的观察者"><a href="#LiveData的观察者" class="headerlink" title="LiveData的观察者"></a>LiveData的观察者</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> Observer<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when the data is changed to [value].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onChanged</span><span class="params">(value: <span class="type">T</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>onChanged</code>函数分派数据变化</li></ul><h3 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mDataLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">START_VERSION</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">NOT_SET</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SafeIterableMap&lt;Observer&lt;? <span class="built_in">super</span> T&gt;, ObserverWrapper&gt; mObservers =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SafeIterableMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// how many observers are in active state</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mActiveCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// to handle active/inactive reentry, we guard with this boolean</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> mChangingActiveState;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Object mData; <span class="comment">// 1️⃣：当前的data</span></span><br><span class="line"><span class="comment">// when setData is called, we set the pending data and actual data swap happens on the main</span></span><br><span class="line"><span class="comment">// thread</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">Object</span> <span class="variable">mPendingData</span> <span class="operator">=</span> NOT_SET; <span class="comment">// 2️⃣：给多线程使用的，在4️⃣mPostValueRunnable中使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mVersion; <span class="comment">// 3️⃣：mVersion是数据版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> mDispatchingValue;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;FieldCanBeLocal&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> mDispatchInvalidated;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">mPostValueRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;<span class="comment">// 4️⃣mPostValueRunnable，在主线程中将mPendingData设置为当前值</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Object newValue;</span><br><span class="line">        <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">            newValue = mPendingData;</span><br><span class="line">            mPendingData = NOT_SET;</span><br><span class="line">        &#125;</span><br><span class="line">        setValue((T) newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>数据存在mData中</li><li>mPendingData给多线程使用的，在mPostValueRunnable时设置为当前值</li><li>mVersion是数据版本</li><li>mPostValueRunnable，在主线程中将mPendingData设置为当前值</li></ul><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveData</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    mData = value;</span><br><span class="line">    mVersion = START_VERSION + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LiveData</span><span class="params">()</span> &#123;</span><br><span class="line">    mData = NOT_SET;</span><br><span class="line">    mVersion = START_VERSION;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-和-set"><a href="#get-和-set" class="headerlink" title="get 和 set"></a>get 和 set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;setValue&quot;</span>);</span><br><span class="line">    mVersion++;</span><br><span class="line">    mData = value;</span><br><span class="line">    dispatchingValue(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> mData;</span><br><span class="line">    <span class="keyword">if</span> (data != NOT_SET) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> postTask;</span><br><span class="line">    <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">        postTask = mPendingData == NOT_SET;</span><br><span class="line">        mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每次set,mVersion都会自增1，并调用dispatchingValue</li><li>非主线程中调用postValue在主线程中更新值, mPendingData是被异步更新的，但最终mData都在主线程中被set</li><li>postValue和mPostValueRunnable更新mPendingData时先获取mDataLock对象的锁，runnable执行后会将mPendingData设置为NOT_SET。如果postValue时mPendingData不是NOT_SET，就不会重复post runnable</li></ul><h3 id="分派事件"><a href="#分派事件" class="headerlink" title="分派事件"></a>分派事件</h3><h4 id="dispatchingValue"><a href="#dispatchingValue" class="headerlink" title="dispatchingValue"></a>dispatchingValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> ObserverWrapper initiator)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mDispatchingValue = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (initiator != <span class="literal">null</span>) &#123;</span><br><span class="line">            considerNotify(initiator);</span><br><span class="line">            initiator = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="built_in">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                considerNotify(iterator.next().getValue());</span><br><span class="line">                <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">    mDispatchingValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果当前正在分派，则退出，并通过<code>mDispatchInvalidated</code>打断后续分派</li><li>如果参数不空，则只分派给参数，否则分派给所有observer</li></ul><h4 id="considerNotify"><a href="#considerNotify" class="headerlink" title="considerNotify"></a>considerNotify</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">considerNotify</span><span class="params">(ObserverWrapper observer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!observer.mActive) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class="line">    <span class="comment">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class="line">    <span class="comment">// notify for a more predictable notification order.</span></span><br><span class="line">    <span class="keyword">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class="line">        observer.activeStateChanged(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    observer.mLastVersion = mVersion;</span><br><span class="line">    observer.mObserver.onChanged((T) mData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>observer</code>非<code>active</code>状态，不分派</li><li>如果<code>observer</code>上次的数据版本大于当前版本，不分派</li><li>更新<code>observer</code>的数据版本</li><li>调用<code>observer</code>的<code>onChanged</code>分派数据变化</li></ul><h3 id="ObserverWrapper"><a href="#ObserverWrapper" class="headerlink" title="ObserverWrapper"></a>ObserverWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ObserverWrapper</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Observer&lt;? <span class="built_in">super</span> T&gt; mObserver;</span><br><span class="line">    <span class="type">boolean</span> mActive;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mLastVersion</span> <span class="operator">=</span> START_VERSION;</span><br><span class="line"></span><br><span class="line">    ObserverWrapper(Observer&lt;? <span class="built_in">super</span> T&gt; observer) &#123;</span><br><span class="line">        mObserver = observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">shouldBeActive</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">detachObserver</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">activeStateChanged</span><span class="params">(<span class="type">boolean</span> newActive)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newActive == mActive) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class="line">        <span class="comment">// owner</span></span><br><span class="line">        mActive = newActive;</span><br><span class="line">        changeActiveCounter(mActive ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">            dispatchingValue(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对<code>Observer</code>进行包装，记录了当前的数据<code>version</code>和<code>active</code>状态</li><li>当<code>activeStateChanged</code>被调用时，首先判断与原来的<code>active</code>状态是否一致，如果一致，则直接返回</li><li>如果不一致，则更新<code>active</code>状态，并调用外部类(<code>LiveData</code>)的<code>changeActiveCounter</code></li><li>如果当前<code>active</code>状态从<code>false</code>变为<code>true</code>，则调用<code>dispatchingValue</code>，立刻向观察者传递最新的数据状态</li></ul><h3 id="changeActiveCounter"><a href="#changeActiveCounter" class="headerlink" title="changeActiveCounter"></a>changeActiveCounter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">changeActiveCounter</span><span class="params">(<span class="type">int</span> change)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">previousActiveCount</span> <span class="operator">=</span> mActiveCount;</span><br><span class="line">    mActiveCount += change;</span><br><span class="line">    <span class="keyword">if</span> (mChangingActiveState) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mChangingActiveState = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">needToCallActive</span> <span class="operator">=</span> previousActiveCount == <span class="number">0</span> &amp;&amp; mActiveCount &gt; <span class="number">0</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">needToCallInactive</span> <span class="operator">=</span> previousActiveCount &gt; <span class="number">0</span> &amp;&amp; mActiveCount == <span class="number">0</span>;</span><br><span class="line">            previousActiveCount = mActiveCount;</span><br><span class="line">            <span class="keyword">if</span> (needToCallActive) &#123;</span><br><span class="line">                onActive();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (needToCallInactive) &#123;</span><br><span class="line">                onInactive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mChangingActiveState = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>会保存当前状态为<code>active</code>的<code>observer</code>的数量</li><li>这个函数会更新其值</li><li>如果原来<code>active</code>的个数为0，现在大于0，那么调用<code>onActive</code></li><li>如果原来<code>active</code>的个数大于0，现在为0，那么调用<code>onInactive</code></li></ul><h3 id="onActive和onInactive"><a href="#onActive和onInactive" class="headerlink" title="onActive和onInactive"></a>onActive和onInactive</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onInactive</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActive</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给子类用的钩子方法，用于通知当前是否有<code>active</code>的<code>observer</code></p><h3 id="AlwaysActiveObserver"><a href="#AlwaysActiveObserver" class="headerlink" title="AlwaysActiveObserver"></a>AlwaysActiveObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">AlwaysActiveObserver</span> <span class="keyword">extends</span> <span class="title class_">ObserverWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    AlwaysActiveObserver(Observer&lt;? <span class="built_in">super</span> T&gt; observer) &#123;</span><br><span class="line">        <span class="built_in">super</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shouldBeActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这类<code>Observer</code>会一直处于<code>active</code>状态</li><li><code>observeForever</code>会创建<code>AlwaysActiveObserver</code>，创建后立刻调用<code>activeStateChanged(true)</code>更新<code>active</code>状态，<code>active</code>总数</li></ul><h3 id="添加AlwaysActiveObserver"><a href="#添加AlwaysActiveObserver" class="headerlink" title="添加AlwaysActiveObserver"></a>添加AlwaysActiveObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observeForever</span><span class="params">(<span class="meta">@NonNull</span> Observer&lt;? <span class="built_in">super</span> T&gt; observer)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;observeForever&quot;</span>);</span><br><span class="line">    <span class="type">AlwaysActiveObserver</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlwaysActiveObserver</span>(observer);</span><br><span class="line">    <span class="type">ObserverWrapper</span> <span class="variable">existing</span> <span class="operator">=</span> mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing <span class="keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper.activeStateChanged(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LifecycleBoundObserver"><a href="#LifecycleBoundObserver" class="headerlink" title="LifecycleBoundObserver"></a>LifecycleBoundObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifecycleBoundObserver</span> <span class="keyword">extends</span> <span class="title class_">ObserverWrapper</span> <span class="keyword">implements</span> <span class="title class_">LifecycleEventObserver</span> &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">final</span> LifecycleOwner mOwner;</span><br><span class="line"></span><br><span class="line">    LifecycleBoundObserver(<span class="meta">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class="built_in">super</span> T&gt; observer) &#123;</span><br><span class="line">        <span class="built_in">super</span>(observer);</span><br><span class="line">        mOwner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shouldBeActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        Lifecycle.<span class="type">State</span> <span class="variable">currentState</span> <span class="operator">=</span> mOwner.getLifecycle().getCurrentState();</span><br><span class="line">        <span class="keyword">if</span> (currentState == DESTROYED) &#123;</span><br><span class="line">            removeObserver(mObserver);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Lifecycle.<span class="type">State</span> <span class="variable">prevState</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (prevState != currentState) &#123;</span><br><span class="line">            prevState = currentState;</span><br><span class="line">            activeStateChanged(shouldBeActive());</span><br><span class="line">            currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAttachedTo</span><span class="params">(LifecycleOwner owner)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mOwner == owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">detachObserver</span><span class="params">()</span> &#123;</span><br><span class="line">        mOwner.getLifecycle().removeObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同时实现了<code>LifecycleEventObserver</code>，可以观察<code>lifecycle</code></li><li>保存对应的<code>lifecycleOwner</code></li><li>根据<code>shouldBeActive</code>，当关联的<code>Lifecycle</code>到达了<code>started</code>及以后的状态，就是<code>active</code>的了</li><li>当<code>lifecycle</code>状态变化时<ul><li>如果到了<code>destroyed</code>,则调用外部类的<code>removeObserver</code>移除当前<code>observer</code></li><li>然后进一个循环，调用<code>activeStateChanged</code>更新当前的active状态，直到两次获取<code>lifecycle</code>的当前状态都相同时，退出循环</li></ul></li></ul><h3 id="添加一个LifecycleBoundObserver"><a href="#添加一个LifecycleBoundObserver" class="headerlink" title="添加一个LifecycleBoundObserver"></a>添加一个LifecycleBoundObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observe</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner, <span class="meta">@NonNull</span> Observer&lt;? <span class="built_in">super</span> T&gt; observer)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;observe&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">LifecycleBoundObserver</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleBoundObserver</span>(owner, observer);</span><br><span class="line">    <span class="type">ObserverWrapper</span> <span class="variable">existing</span> <span class="operator">=</span> mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建<code>LifecycleBoundObserver</code>，并立刻将其注册到<code>lifecycle</code>的<code>observer</code>中</li><li><code>lifecycle</code>添加<code>observer</code>后，会立刻传递状态，这里也可以立刻根据<code>lifecycle</code>的状态更新<code>active</code>状态，进而向观察者分派当前值</li></ul><h3 id="移除observer"><a href="#移除observer" class="headerlink" title="移除observer"></a>移除observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> Observer&lt;? <span class="built_in">super</span> T&gt; observer)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;removeObserver&quot;</span>);</span><br><span class="line">    <span class="type">ObserverWrapper</span> <span class="variable">removed</span> <span class="operator">=</span> mObservers.remove(observer);</span><br><span class="line">    <span class="keyword">if</span> (removed == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    removed.detachObserver();</span><br><span class="line">    removed.activeStateChanged(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all observers that are tied to the given &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> owner The &#123;<span class="doctag">@code</span> LifecycleOwner&#125; scope for the observers to be removed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObservers</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> LifecycleOwner owner)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;removeObservers&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Observer&lt;? <span class="built_in">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.getValue().isAttachedTo(owner)) &#123;</span><br><span class="line">            removeObserver(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从map中删除observer<ul><li>调用<code>activeStateChanged(false)</code>, 将其<code>active</code>状态变成<code>false</code>，减少活跃状态的数量，按需调用onInactive(),</li><li>调用<code>detachObserver</code>，如果是<code>LifecycleBoundObserver</code>，就停止从lifecycle中观察状态。</li></ul></li></ul><h2 id="MutableLiveData"><a href="#MutableLiveData" class="headerlink" title="MutableLiveData"></a>MutableLiveData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MutableLiveData</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">LiveData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a MutableLiveData initialized with the given &#123;<span class="doctag">@code</span> value&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MutableLiveData</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a MutableLiveData with no value assigned to it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MutableLiveData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.postValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好猫猫简洁</li><li>postValue和setValue升级成public了</li></ul><h2 id="MediatorLiveData"><a href="#MediatorLiveData" class="headerlink" title="MediatorLiveData"></a>MediatorLiveData</h2><ul><li>配置多个更新源<code>LiveData</code>，当观察到一个<code>LiveData</code>发生改变，则执行相应的动作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorLiveData</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">MutableLiveData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> SafeIterableMap&lt;LiveData&lt;?&gt;, Source&lt;?&gt;&gt; mSources = <span class="keyword">new</span> <span class="title class_">SafeIterableMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a MediatorLiveData with no value assigned to it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MediatorLiveData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a MediatorLiveData initialized with the given &#123;<span class="doctag">@code</span> value&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MediatorLiveData</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts to listen to the given &#123;<span class="doctag">@code</span> source&#125; LiveData, &#123;<span class="doctag">@code</span> onChanged&#125; observer will be</span></span><br><span class="line"><span class="comment">     * called when &#123;<span class="doctag">@code</span> source&#125; value was changed.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> onChanged&#125; callback will be called only when this &#123;<span class="doctag">@code</span> MediatorLiveData&#125; is active.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; If the given LiveData is already added as a source but with a different Observer,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> IllegalArgumentException&#125; will be thrown.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source    the &#123;<span class="doctag">@code</span> LiveData&#125; to listen to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onChanged The observer that will receive the events</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;       The type of data hold by &#123;<span class="doctag">@code</span> source&#125; LiveData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> &lt;S&gt; <span class="keyword">void</span> <span class="title function_">addSource</span><span class="params">(<span class="meta">@NonNull</span> LiveData&lt;S&gt; source, <span class="meta">@NonNull</span> Observer&lt;? <span class="built_in">super</span> S&gt; onChanged)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;source cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Source&lt;S&gt; e = <span class="keyword">new</span> <span class="title class_">Source</span>&lt;&gt;(source, onChanged);</span><br><span class="line">        Source&lt;?&gt; existing = mSources.putIfAbsent(source, e);</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; existing.mObserver != onChanged) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;This source was already added with the different observer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasActiveObservers()) &#123;</span><br><span class="line">            e.plug();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stops to listen the given &#123;<span class="doctag">@code</span> LiveData&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toRemote &#123;<span class="doctag">@code</span> LiveData&#125; to stop to listen</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;      the type of data hold by &#123;<span class="doctag">@code</span> source&#125; LiveData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> &lt;S&gt; <span class="keyword">void</span> <span class="title function_">removeSource</span><span class="params">(<span class="meta">@NonNull</span> LiveData&lt;S&gt; toRemote)</span> &#123;</span><br><span class="line">        Source&lt;?&gt; source = mSources.remove(toRemote);</span><br><span class="line">        <span class="keyword">if</span> (source != <span class="literal">null</span>) &#123;</span><br><span class="line">            source.unplug();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallSuper</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;LiveData&lt;?&gt;, Source&lt;?&gt;&gt; source : mSources) &#123;</span><br><span class="line">            source.getValue().plug();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallSuper</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onInactive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;LiveData&lt;?&gt;, Source&lt;?&gt;&gt; source : mSources) &#123;</span><br><span class="line">            source.getValue().unplug();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Source</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">Observer</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> LiveData&lt;V&gt; mLiveData;</span><br><span class="line">        <span class="keyword">final</span> Observer&lt;? <span class="built_in">super</span> V&gt; mObserver;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mVersion</span> <span class="operator">=</span> START_VERSION;</span><br><span class="line"></span><br><span class="line">        Source(LiveData&lt;V&gt; liveData, <span class="keyword">final</span> Observer&lt;? <span class="built_in">super</span> V&gt; observer) &#123;</span><br><span class="line">            mLiveData = liveData;</span><br><span class="line">            mObserver = observer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">plug</span><span class="params">()</span> &#123;</span><br><span class="line">            mLiveData.observeForever(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">unplug</span><span class="params">()</span> &#123;</span><br><span class="line">            mLiveData.removeObserver(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChanged</span><span class="params">(<span class="meta">@Nullable</span> V v)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mVersion != mLiveData.getVersion()) &#123;</span><br><span class="line">                mVersion = mLiveData.getVersion();</span><br><span class="line">                mObserver.onChanged(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉就是帮我们<code>observeForever</code>，没什么特殊的</p><h2 id="CoroutineLiveData"><a href="#CoroutineLiveData" class="headerlink" title="CoroutineLiveData"></a>CoroutineLiveData</h2><ul><li>这种livedata提供给一个执行异步的协程，在携程中进行耗时操作，通过<code>emit</code>, <code>emitSource</code>发送数据，给观察者进行观察</li><li>其他的使用方法和<code>LiveData</code>一样，对其进行观察，当数据变化时，接收到数据变化</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>emit:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a LiveData that tries to load the `User` from local cache first and then tries to fetch</span></span><br><span class="line"><span class="comment">// from the server and also yields the updated value</span></span><br><span class="line"><span class="keyword">val</span> user = liveData &#123;</span><br><span class="line">    <span class="comment">// check local storage</span></span><br><span class="line">    <span class="keyword">val</span> cached = cache.loadUser(id)</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="literal">null</span>) &#123;</span><br><span class="line">        emit(cached)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cached == <span class="literal">null</span> || cached.isStale()) &#123;</span><br><span class="line">        <span class="keyword">val</span> fresh = api.fetch(id) <span class="comment">// errors are ignored for brevity</span></span><br><span class="line">        cache.save(fresh)</span><br><span class="line">        emit(fresh)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里liveData函数产生了一个<code>LiveData</code>，并提供了一个代码块，这个代码块回进行耗时操作，通过<code>emit</code>函数更新<code>LiveData</code>的数据</p><ul><li>几个问题<ul><li>代码块何时执行？</li><li>emit如何更新数据？</li></ul></li></ul></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a LiveData that immediately receives a LiveData&lt;User&gt; from the database and yields it as a</span></span><br><span class="line"><span class="comment">// source but also tries to back-fill the database from the server</span></span><br><span class="line"><span class="keyword">val</span> user = liveData &#123;</span><br><span class="line">    <span class="keyword">val</span> fromDb: LiveData&lt;User&gt; = roomDatabase.loadUser(id)</span><br><span class="line">    emitSource(fromDb)</span><br><span class="line">    <span class="keyword">val</span> updated = api.fetch(id) <span class="comment">// errors are ignored for brevity</span></span><br><span class="line">    roomDatabase.insert(updated)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从数据库读取<code>User</code>类型的数据，返回<code>fromDb</code>，然后通过<code>emitSource</code>观察该<code>fromDb</code>，当<code>fromDb</code>更新时，更新<code>user</code></li><li>同时执行其他相关的，数据库更新操作</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">liveData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    timeoutInMs: <span class="type">Long</span> = DEFAULT_TIMEOUT,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">LiveDataScope</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: LiveData&lt;T&gt; = CoroutineLiveData(context, timeoutInMs, block)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持Duration的Api</span></span><br><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.O)</span></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">liveData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    timeout: <span class="type">Duration</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">LiveDataScope</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: LiveData&lt;T&gt; = CoroutineLiveData(context, Api26Impl.toMillis(timeout), block)</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresApi(26)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> Api26Impl &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">toMillis</span><span class="params">(timeout: <span class="type">Duration</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> timeout.toMillis()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以传入一个<code>CoroutineContext</code>，用于指定协程的执行环境，默认是<code>EmptyCoroutineContext</code></li><li>可以传入一个<code>timeoutInMs</code>，具体作用下面再说</li></ul><h3 id="CoroutineLiveData-1"><a href="#CoroutineLiveData-1" class="headerlink" title="CoroutineLiveData"></a>CoroutineLiveData</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">CoroutineLiveData</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">    context: CoroutineContext = EmptyCoroutineContext,</span><br><span class="line">    timeoutInMs: <span class="built_in">Long</span> = DEFAULT_TIMEOUT,</span><br><span class="line">    block: Block&lt;T&gt;</span><br><span class="line">) : MediatorLiveData&lt;T&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> blockRunner: BlockRunner&lt;T&gt;?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> emittedSource: EmittedSource? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// use an intermediate supervisor job so that if we cancel individual block runs due to losing</span></span><br><span class="line">        <span class="comment">// observers, it won&#x27;t cancel the given context as we only cancel w/ the intention of possibly</span></span><br><span class="line">        <span class="comment">// relaunching using the same parent context.</span></span><br><span class="line">        <span class="keyword">val</span> supervisorJob = SupervisorJob(context[Job])</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The scope for this LiveData where we launch every block Job.</span></span><br><span class="line">        <span class="comment">// We default to Main dispatcher but developer can override it.</span></span><br><span class="line">        <span class="comment">// The supervisor job is added last to isolate block runs.</span></span><br><span class="line">        <span class="keyword">val</span> scope = CoroutineScope(Dispatchers.Main.immediate + context + supervisorJob)</span><br><span class="line">        blockRunner = BlockRunner(</span><br><span class="line">            liveData = <span class="keyword">this</span>,</span><br><span class="line">            block = block,</span><br><span class="line">            timeoutInMs = timeoutInMs,</span><br><span class="line">            scope = scope</span><br><span class="line">        ) &#123;</span><br><span class="line">            blockRunner = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emitSource</span><span class="params">(source: <span class="type">LiveData</span>&lt;<span class="type">T</span>&gt;)</span></span>: DisposableHandle &#123;</span><br><span class="line">        clearSource()</span><br><span class="line">        <span class="keyword">val</span> newSource = addDisposableSource(source)</span><br><span class="line">        emittedSource = newSource</span><br><span class="line">        <span class="keyword">return</span> newSource</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearSource</span><span class="params">()</span></span> &#123;</span><br><span class="line">        emittedSource?.disposeNow()</span><br><span class="line">        emittedSource = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActive</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onActive()</span><br><span class="line">        blockRunner?.maybeRun()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInactive</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onInactive()</span><br><span class="line">        blockRunner?.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>onActive</code>和<code>onInactive</code>两个函数的内容标明，代码块会在活跃观察者数量大于1时开始执行，没有活跃观察者时被<code>cancel</code></li><li>注意到<code>CoroutineLiveData</code>是一个<code>MediatorLiveData</code>，下面要考</li></ul><h3 id="Block的运行和取消"><a href="#Block的运行和取消" class="headerlink" title="Block的运行和取消"></a>Block的运行和取消</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">BlockRunner</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> liveData: CoroutineLiveData&lt;T&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> block: Block&lt;T&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> timeoutInMs: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> scope: CoroutineScope,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> onDone: () -&gt; <span class="built_in">Unit</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// currently running block job.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> runningJob: Job? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cancelation job created in cancel.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cancellationJob: Job? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">maybeRun</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cancellationJob?.cancel()</span><br><span class="line">        cancellationJob = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (runningJob != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        runningJob = scope.launch &#123;</span><br><span class="line">            <span class="keyword">val</span> liveDataScope = LiveDataScopeImpl(liveData, coroutineContext)</span><br><span class="line">            block(liveDataScope)</span><br><span class="line">            onDone()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cancellationJob != <span class="literal">null</span>) &#123;</span><br><span class="line">            error(<span class="string">&quot;Cancel call cannot happen without a maybeRun&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        cancellationJob = scope.launch(Dispatchers.Main.immediate) &#123;</span><br><span class="line">            delay(timeoutInMs)</span><br><span class="line">            <span class="keyword">if</span> (!liveData.hasActiveObservers()) &#123;</span><br><span class="line">                <span class="comment">// one last check on active observers to avoid any race condition between starting</span></span><br><span class="line">                <span class="comment">// a running coroutine and cancelation</span></span><br><span class="line">                runningJob?.cancel()</span><br><span class="line">                runningJob = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>maybeRun很简单，就是在指定的<code>scope</code>中启动一个协程，执行<code>block</code></p></li><li><p>cancel也很简单，就是在协程中先等待一段时间，然后判断是否有活跃的观察者，如果没有，则取消<code>runningJob</code></p></li><li><p>我们观察到block是<code>LiveDataScope</code>的扩展函数，对应的具体实现类是<code>LiveDataScopeImpl</code></p></li></ul><h3 id="LiveDataScope"><a href="#LiveDataScope" class="headerlink" title="LiveDataScope"></a>LiveDataScope</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LiveDataScope</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set&#x27;s the [LiveData]&#x27;s value to the given [value]. If you&#x27;ve called [emitSource] previously,</span></span><br><span class="line"><span class="comment">     * calling [emit] will remove that source.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that this function suspends until the value is set on the [LiveData].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The new value for the [LiveData]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> emitSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emit</span><span class="params">(value: <span class="type">T</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the given [LiveData] as a source, similar to [MediatorLiveData.addSource]. Calling this</span></span><br><span class="line"><span class="comment">     * method will remove any source that was yielded before via [emitSource].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source The [LiveData] instance whose values will be dispatched from the current</span></span><br><span class="line"><span class="comment">     * [LiveData].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> emit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> MediatorLiveData.addSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> MediatorLiveData.removeSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emitSource</span><span class="params">(source: <span class="type">LiveData</span>&lt;<span class="type">T</span>&gt;)</span></span>: DisposableHandle</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * References the current value of the [LiveData].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If the block never `emit`ed a value, [latestValue] will be `null`. You can use this</span></span><br><span class="line"><span class="comment">     * value to check what was then latest value `emit`ed by your `block` before it got cancelled.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that if the block called [emitSource], then `latestValue` will be last value</span></span><br><span class="line"><span class="comment">     * dispatched by the `source` [LiveData].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> latestValue: T?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了emit函数和emitSource函数</p><h3 id="LiveDataScopeImpl"><a href="#LiveDataScopeImpl" class="headerlink" title="LiveDataScopeImpl"></a>LiveDataScopeImpl</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">LiveDataScopeImpl</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> target: CoroutineLiveData&lt;T&gt;,</span><br><span class="line">    context: CoroutineContext</span><br><span class="line">) : LiveDataScope&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> latestValue: T?</span><br><span class="line">        <span class="keyword">get</span>() = target.value</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use `liveData` provided context + main dispatcher to communicate with the target</span></span><br><span class="line">    <span class="comment">// LiveData. This gives us main thread safety as well as cancellation cooperation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> coroutineContext = context + Dispatchers.Main.immediate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emitSource</span><span class="params">(source: <span class="type">LiveData</span>&lt;<span class="type">T</span>&gt;)</span></span>: DisposableHandle =</span><br><span class="line">        withContext(coroutineContext) &#123;</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@withContext</span> target.emitSource(source)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="string">&quot;NullSafeMutableLiveData&quot;</span>)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emit</span><span class="params">(value: <span class="type">T</span>)</span></span> = withContext(coroutineContext) &#123;</span><br><span class="line">        target.clearSource()</span><br><span class="line">        target.value = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>emit函数的实现是调用<code>CoroutineLiveData</code>的<code>clearSource</code>,并更新<code>LiveData</code>值</li><li>emitSource的实现是在协程上下文中执行<code>CoroutineLiveData</code>的<code>emitSource</code></li></ul><h3 id="CoroutineLiveData的emitSource"><a href="#CoroutineLiveData的emitSource" class="headerlink" title="CoroutineLiveData的emitSource"></a>CoroutineLiveData的emitSource</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearSource</span><span class="params">()</span></span> &#123;</span><br><span class="line">    emittedSource?.disposeNow()</span><br><span class="line">    emittedSource = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">emitSource</span><span class="params">(source: <span class="type">LiveData</span>&lt;<span class="type">T</span>&gt;)</span></span>: DisposableHandle &#123;</span><br><span class="line">    clearSource()</span><br><span class="line">    <span class="keyword">val</span> newSource = addDisposableSource(source)</span><br><span class="line">    emittedSource = newSource</span><br><span class="line">    <span class="keyword">return</span> newSource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>emitSource首先调用clearSource<ul><li>将已发射的source进行dispose</li></ul></li><li>创建新的emittedSource</li></ul><h4 id="addDisposableSource"><a href="#addDisposableSource" class="headerlink" title="addDisposableSource"></a>addDisposableSource</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MediatorLiveData<span class="type">&lt;T&gt;</span>.<span class="title">addDisposableSource</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    source: <span class="type">LiveData</span>&lt;<span class="type">T</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: EmittedSource = withContext(Dispatchers.Main.immediate) &#123;</span><br><span class="line">    addSource(source) &#123;</span><br><span class="line">        value = it</span><br><span class="line">    &#125;</span><br><span class="line">    EmittedSource(</span><br><span class="line">        source = source,</span><br><span class="line">        mediator = <span class="keyword">this</span><span class="symbol">@addDisposableSource</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CoroutineLiveData本身就是一个MediatorLiveData</li><li>addDisposableSource时首先通过addSource为自身添加一个source</li><li>在该source变化时，更新自身的值</li><li>创建一个<code>EmittedSource</code>，并返回</li></ul><h3 id="CoroutineLiveData的clearSource"><a href="#CoroutineLiveData的clearSource" class="headerlink" title="CoroutineLiveData的clearSource"></a>CoroutineLiveData的clearSource</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearSource</span><span class="params">()</span></span> &#123;</span><br><span class="line">    emittedSource?.disposeNow()</span><br><span class="line">    emittedSource = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EmittedSource"><a href="#EmittedSource" class="headerlink" title="EmittedSource"></a>EmittedSource</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">EmittedSource</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> source: LiveData&lt;*&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mediator: MediatorLiveData&lt;*&gt;</span><br><span class="line">) : DisposableHandle &#123;</span><br><span class="line">    <span class="comment">// @MainThread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> disposed = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlike [dispose] which cannot be sync because it not a coroutine (and we do not want to</span></span><br><span class="line"><span class="comment">     * lock), this version is a suspend function and does not return until source is removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">disposeNow</span><span class="params">()</span></span> = withContext(Dispatchers.Main.immediate) &#123;</span><br><span class="line">        removeSource()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispose</span><span class="params">()</span></span> &#123;</span><br><span class="line">        CoroutineScope(Dispatchers.Main.immediate).launch &#123;</span><br><span class="line">            removeSource()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeSource</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!disposed) &#123;</span><br><span class="line">            mediator.removeSource(source)</span><br><span class="line">            disposed = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emittedSource就是为了方便dispose而创建的，dispose就是把source移除</p><ul><li>在block中，如果我们emitSource了，如果在未来某时刻，我们不再需要这个source了，可以调用<code>emitSource</code>返回的<code>EmittedSource</code>对象的<code>dispose</code>方法来移除</li><li>emit和emitSource存在互斥性，使用emit后，之前的source就会失效</li></ul><h2 id="PublisherLiveData"><a href="#PublisherLiveData" class="headerlink" title="PublisherLiveData"></a>PublisherLiveData</h2><ul><li>rxjava兼容的livedata，使用rxjava的<code>Publisher</code>作为数据源</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;LiveData&quot;&gt;&lt;a href=&quot;#LiveData&quot; class=&quot;headerlink&quot; title=&quot;LiveData&quot;&gt;&lt;/a&gt;LiveData&lt;/h2&gt;&lt;h3 id=&quot;LiveData的观察者&quot;&gt;&lt;a href=&quot;#LiveData的观察者&quot; class=&quot;headerlink&quot; title=&quot;LiveData的观察者&quot;&gt;&lt;/a&gt;LiveData的观察者&lt;/h3&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Observer&lt;span class=&quot;type&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Called when the data is changed to [value].&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;onChanged&lt;/code&gt;函数分派数据变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;成员&quot;&gt;&lt;a href=&quot;#成员&quot; class=&quot;headerlink&quot; title=&quot;成员&quot;&gt;&lt;/a&gt;成员&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;WeakerAccess&amp;quot;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* synthetic access */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;mDataLock&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;START_VERSION&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;WeakerAccess&amp;quot;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* synthetic access */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;NOT_SET&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SafeIterableMap&amp;lt;Observer&amp;lt;? &lt;span class=&quot;built_in&quot;&gt;super&lt;/span&gt; T&amp;gt;, ObserverWrapper&amp;gt; mObservers =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SafeIterableMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// how many observers are in active state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;WeakerAccess&amp;quot;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* synthetic access */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;mActiveCount&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// to handle active/inactive reentry, we guard with this boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; mChangingActiveState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Object mData; &lt;span class=&quot;comment&quot;&gt;// 1️⃣：当前的data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// when setData is called, we set the pending data and actual data swap happens on the main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;WeakerAccess&amp;quot;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* synthetic access */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;mPendingData&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; NOT_SET; &lt;span class=&quot;comment&quot;&gt;// 2️⃣：给多线程使用的，在4️⃣mPostValueRunnable中使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mVersion; &lt;span class=&quot;comment&quot;&gt;// 3️⃣：mVersion是数据版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; mDispatchingValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;FieldCanBeLocal&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; mDispatchInvalidated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;mPostValueRunnable&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Runnable&lt;/span&gt;() &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 4️⃣mPostValueRunnable，在主线程中将mPendingData设置为当前值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@SuppressWarnings(&amp;quot;unchecked&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Object newValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mDataLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            newValue = mPendingData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPendingData = NOT_SET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setValue((T) newValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基础03-Lifecycle</title>
    <link href="https://jingtianer.github.io/home/2024/07/31/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8003-Lifecycle/"/>
    <id>https://jingtianer.github.io/home/2024/07/31/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8003-Lifecycle/</id>
    <published>2024-07-31T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lifeCycle的Observer"><a href="#lifeCycle的Observer" class="headerlink" title="lifeCycle的Observer"></a>lifeCycle的Observer</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LifecycleObserver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DefaultLifecycleObserver</span> : <span class="type">LifecycleObserver</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_CREATE` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called after the [LifecycleOwner]&#x27;s `onCreate`</span></span><br><span class="line"><span class="comment">     * method returns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_START` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called after the [LifecycleOwner]&#x27;s `onStart` method returns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_RESUME` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called after the [LifecycleOwner]&#x27;s `onResume`</span></span><br><span class="line"><span class="comment">     * method returns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_PAUSE` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called before the [LifecycleOwner]&#x27;s `onPause` method</span></span><br><span class="line"><span class="comment">     * is called.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_STOP` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called before the [LifecycleOwner]&#x27;s `onStop` method</span></span><br><span class="line"><span class="comment">     * is called.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies that `ON_DESTROY` event occurred.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method will be called before the [LifecycleOwner]&#x27;s `onDestroy` method</span></span><br><span class="line"><span class="comment">     * is called.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner the component, whose state was changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> LifecycleEventObserver : LifecycleObserver &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a state transition event happens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source The source of the event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStateChanged</span><span class="params">(source: <span class="type">LifecycleOwner</span>, event: <span class="type">Lifecycle</span>.<span class="type">Event</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，我们在使用<code>lifecycle.addObserver()</code>时，可以传入<code>LifecycleEventObserver</code>或<code>DefaultLifecycleObserver</code>，一个通过<code>event</code>获取当前状态，一个通过不同的回调函数获取当前状态</li></ul><h2 id="Activity树"><a href="#Activity树" class="headerlink" title="Activity树"></a>Activity树</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Activity -- AccountAuthenticatorActivity</span><br><span class="line">         |- ActivityGroup -- TabActivity</span><br><span class="line">         |- ExpandableListActivity</span><br><span class="line">         |- LauncherActivity</span><br><span class="line">         |- ListActivity -- PreferenceActivity</span><br><span class="line">         |- NativeActivity</span><br><span class="line">         |- androidx.core.app.ComponentActivity -- androidx.activity.ComponentActivity -- FragmentActivity -- AppCompatActivity</span><br><span class="line">                                                |- PreviewActivity</span><br><span class="line">         |- BootstrapActivity</span><br><span class="line">         |- EmptyActivity</span><br><span class="line">         |- EmptyFloatingActivity</span><br></pre></td></tr></table></figure><h2 id="LifecycleOwner"><a href="#LifecycleOwner" class="headerlink" title="LifecycleOwner"></a>LifecycleOwner</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LifecycleOwner</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> lifecycle: Lifecycle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>androidx.core.app.ComponentActivity</code>和<code>androidx.activity.ComponentActivity</code>都声明了对<code>LifecycleOwner</code>的实现</p><p>可以拿到<code>lifecycle</code>的<code>Activity</code>有</p><ul><li>androidx.core.app.ComponentActivity</li><li>androidx.activity.ComponentActivity</li><li>FragmentActivity</li><li>AppCompatActivity</li><li>PreviewActivity</li></ul><h2 id="androidx-core-app-ComponentActivity中的lifecycle"><a href="#androidx-core-app-ComponentActivity中的lifecycle" class="headerlink" title="androidx.core.app.ComponentActivity中的lifecycle"></a>androidx.core.app.ComponentActivity中的lifecycle</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;LeakingThis&quot;</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> lifecycleRegistry = LifecycleRegistry(<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> lifecycle: Lifecycle</span><br><span class="line">    <span class="keyword">get</span>() = lifecycleRegistry</span><br><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSaveInstanceState</span><span class="params">(outState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    lifecycleRegistry.currentState = Lifecycle.State.CREATED</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>很意外的是<code>ComponentActivity</code>并不是在每个生命周期回调函数中调用<code>lifecycleRegistry</code>的<code>setCurrentState</code>，从而分发生命周期</li></ul><h2 id="LifecycleRegistry"><a href="#LifecycleRegistry" class="headerlink" title="LifecycleRegistry"></a>LifecycleRegistry</h2><h3 id="addObserver"><a href="#addObserver" class="headerlink" title="addObserver"></a>addObserver</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addObserver</span><span class="params">(observer: <span class="type">LifecycleObserver</span>)</span></span> &#123;</span><br><span class="line">    enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> initialState = <span class="keyword">if</span> (state == State.DESTROYED) State.DESTROYED <span class="keyword">else</span> State.INITIALIZED</span><br><span class="line">    <span class="keyword">val</span> statefulObserver = ObserverWithState(observer, initialState)</span><br><span class="line">    <span class="keyword">val</span> previous = observerMap.putIfAbsent(observer, statefulObserver)</span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> lifecycleOwner = lifecycleOwner.<span class="keyword">get</span>()</span><br><span class="line">        ?: <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">val</span> isReentrance = addingObserverCounter != <span class="number">0</span> || handlingEvent</span><br><span class="line">    <span class="keyword">var</span> targetState = calculateTargetState(observer)</span><br><span class="line">    addingObserverCounter++</span><br><span class="line">    <span class="keyword">while</span> (statefulObserver.state &lt; targetState &amp;&amp; observerMap.contains(observer)</span><br><span class="line">    ) &#123;</span><br><span class="line">        pushParentState(statefulObserver.state)</span><br><span class="line">        <span class="keyword">val</span> event = Event.upFrom(statefulObserver.state)</span><br><span class="line">            ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;no event up from <span class="subst">$&#123;statefulObserver.state&#125;</span>&quot;</span>)</span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, event)</span><br><span class="line">        popParentState()</span><br><span class="line">        <span class="comment">// mState / subling may have been changed recalculate</span></span><br><span class="line">        targetState = calculateTargetState(observer)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">        <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">        sync()</span><br><span class="line">    &#125;</span><br><span class="line">    addingObserverCounter--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到<code>addObserver</code>首先将observer包装成<code>ObserverWithState</code>，并将其加入到<code>observerMap</code></li><li>加入后立刻调用<code>dispatchEvent</code>将最新的状态传递出去</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sync</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> lifecycleOwner = lifecycleOwner.<span class="keyword">get</span>()</span><br><span class="line">        ?: <span class="keyword">throw</span> IllegalStateException(</span><br><span class="line">            <span class="string">&quot;LifecycleOwner of this LifecycleRegistry is already &quot;</span> +</span><br><span class="line">                <span class="string">&quot;garbage collected. It is too late to change lifecycle state.&quot;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">while</span> (!isSynced) &#123;</span><br><span class="line">        newEventOccurred = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (state &lt; observerMap.eldest()!!.value.state) &#123;</span><br><span class="line">            backwardPass(lifecycleOwner)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> newest = observerMap.newest()</span><br><span class="line">        <span class="keyword">if</span> (!newEventOccurred &amp;&amp; newest != <span class="literal">null</span> &amp;&amp; state &gt; newest.value.state) &#123;</span><br><span class="line">            forwardPass(lifecycleOwner)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    newEventOccurred = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到<code>sync</code>会调用<code>backwardPass</code>和<code>forwardPass</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">forwardPass</span><span class="params">(lifecycleOwner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">    <span class="meta">@Suppress()</span></span><br><span class="line">    <span class="keyword">val</span> ascendingIterator: Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; =</span><br><span class="line">        observerMap.iteratorWithAdditions()</span><br><span class="line">    <span class="keyword">while</span> (ascendingIterator.hasNext() &amp;&amp; !newEventOccurred) &#123;</span><br><span class="line">        <span class="keyword">val</span> (key, observer) = ascendingIterator.next()</span><br><span class="line">        <span class="keyword">while</span> (observer.state &lt; state &amp;&amp; !newEventOccurred &amp;&amp; observerMap.contains(key)</span><br><span class="line">        ) &#123;</span><br><span class="line">            pushParentState(observer.state)</span><br><span class="line">            <span class="keyword">val</span> event = Event.upFrom(observer.state)</span><br><span class="line">                ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;no event up from <span class="subst">$&#123;observer.state&#125;</span>&quot;</span>)</span><br><span class="line">            observer.dispatchEvent(lifecycleOwner, event)</span><br><span class="line">            popParentState()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">backwardPass</span><span class="params">(lifecycleOwner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> descendingIterator = observerMap.descendingIterator()</span><br><span class="line">    <span class="keyword">while</span> (descendingIterator.hasNext() &amp;&amp; !newEventOccurred) &#123;</span><br><span class="line">        <span class="keyword">val</span> (key, observer) = descendingIterator.next()</span><br><span class="line">        <span class="keyword">while</span> (observer.state &gt; state &amp;&amp; !newEventOccurred &amp;&amp; observerMap.contains(key)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">val</span> event = Event.downFrom(observer.state)</span><br><span class="line">                ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;no event down from <span class="subst">$&#123;observer.state&#125;</span>&quot;</span>)</span><br><span class="line">            pushParentState(event.targetState)</span><br><span class="line">            observer.dispatchEvent(lifecycleOwner, event)</span><br><span class="line">            popParentState()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到<code>sync</code>被调用后，就会根据<code>observer</code>的情况和<code>state</code>的不同，按照需要将<code>state</code>的变化传递给<code>observer</code></li></ul><h3 id="ObserverWithState"><a href="#ObserverWithState" class="headerlink" title="ObserverWithState"></a>ObserverWithState</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">ObserverWithState</span>(observer: LifecycleObserver?, initialState: State) &#123;</span><br><span class="line">    <span class="keyword">var</span> state: State</span><br><span class="line">    <span class="keyword">var</span> lifecycleObserver: LifecycleEventObserver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        lifecycleObserver = Lifecycling.lifecycleEventObserver(observer!!)</span><br><span class="line">        state = initialState</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dispatchEvent</span><span class="params">(owner: <span class="type">LifecycleOwner</span>?, event: <span class="type">Event</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> newState = event.targetState</span><br><span class="line">        state = min(state, newState)</span><br><span class="line">        lifecycleObserver.onStateChanged(owner!!, event)</span><br><span class="line">        state = newState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先这里看到一个关键的函数调用<code>onStateChanged</code>，也就是当<code>dispatchEvent</code>被调用时，<code>state</code>的改变就会传递给<code>observer</code></li></ul><h3 id="setCurrentState作用"><a href="#setCurrentState作用" class="headerlink" title="setCurrentState作用"></a>setCurrentState作用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> currentState: State</span><br><span class="line">    <span class="keyword">get</span>() = state</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Moves the Lifecycle to the given state and dispatches necessary events to the observers.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> state new state</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">set</span>(state) &#123;</span><br><span class="line">        enforceMainThreadIfNeeded(<span class="string">&quot;setCurrentState&quot;</span>)</span><br><span class="line">        moveToState(state)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveToState</span><span class="params">(next: <span class="type">State</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state == next) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    check(!(state == State.INITIALIZED &amp;&amp; next == State.DESTROYED)) &#123;</span><br><span class="line">        <span class="string">&quot;no event down from <span class="variable">$state</span> in component <span class="subst">$&#123;lifecycleOwner.get()&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    state = next</span><br><span class="line">    <span class="keyword">if</span> (handlingEvent || addingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">        newEventOccurred = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    handlingEvent = <span class="literal">true</span></span><br><span class="line">    sync()</span><br><span class="line">    handlingEvent = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (state == State.DESTROYED) &#123;</span><br><span class="line">        observerMap = FastSafeIterableMap()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到这里对<code>state</code>进行一定逻辑判断后，调用了<code>sync</code>，也就是当前<code>state</code>的改变会传递给<code>observer</code></li><li><code>activity</code>传递<code>state</code>的方式看起来还是通过<code>setCurrentState</code>，但是并没有在<code>CompinentActivity</code>中的各个生命周期函数中调用</li></ul><h3 id="ObserverWithState如何处理两种LifecycleObserver"><a href="#ObserverWithState如何处理两种LifecycleObserver" class="headerlink" title="ObserverWithState如何处理两种LifecycleObserver"></a>ObserverWithState如何处理两种LifecycleObserver</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    lifecycleObserver = Lifecycling.lifecycleEventObserver(observer!!)</span><br><span class="line">    state = initialState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到构造函数中将<code>observer</code>通过<code>Lifecycling.lifecycleEventObserver</code>对<code>observer</code>进行了包装</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">lifecycleEventObserver</span><span class="params">(`<span class="keyword">object</span>`: <span class="type">Any</span>)</span></span>: LifecycleEventObserver &#123;</span><br><span class="line">    <span class="keyword">val</span> isLifecycleEventObserver = `<span class="keyword">object</span>` <span class="keyword">is</span> LifecycleEventObserver</span><br><span class="line">    <span class="keyword">val</span> isDefaultLifecycleObserver = `<span class="keyword">object</span>` <span class="keyword">is</span> DefaultLifecycleObserver</span><br><span class="line">    <span class="keyword">if</span> (isLifecycleEventObserver &amp;&amp; isDefaultLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> DefaultLifecycleObserverAdapter(</span><br><span class="line">            `<span class="keyword">object</span>` <span class="keyword">as</span> DefaultLifecycleObserver,</span><br><span class="line">            `<span class="keyword">object</span>` <span class="keyword">as</span> LifecycleEventObserver</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDefaultLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> DefaultLifecycleObserverAdapter(`<span class="keyword">object</span>` <span class="keyword">as</span> DefaultLifecycleObserver, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isLifecycleEventObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> `<span class="keyword">object</span>` <span class="keyword">as</span> LifecycleEventObserver</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> klass: Class&lt;*&gt; = `<span class="keyword">object</span>`.javaClass</span><br><span class="line">    <span class="keyword">val</span> type = getObserverConstructorType(klass)</span><br><span class="line">    <span class="keyword">if</span> (type == GENERATED_CALLBACK) &#123;</span><br><span class="line">        <span class="keyword">val</span> constructors = classToAdapters[klass]!!</span><br><span class="line">        <span class="keyword">if</span> (constructors.size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> generatedAdapter = createGeneratedAdapter(</span><br><span class="line">                constructors[<span class="number">0</span>], `<span class="keyword">object</span>`</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> SingleGeneratedAdapterObserver(generatedAdapter)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> adapters: Array&lt;GeneratedAdapter&gt; = Array(constructors.size) &#123; i -&gt;</span><br><span class="line">            createGeneratedAdapter(constructors[i], `<span class="keyword">object</span>`)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CompositeGeneratedAdaptersObserver(adapters)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ReflectiveGenericLifecycleObserver(`<span class="keyword">object</span>`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可以看到这里会判断<code>observer</code>的类型，如果是<code>DefaultLifecycleObserver</code>，则会使用<code>DefaultLifecycleObserverAdapter</code>对<code>observer</code>进行适配</p></li><li><p>这里可以看到，适配器考虑到了<code>Observer</code>即是<code>LifecycleEventObserver</code>又是<code>DefaultLifecycleObserver</code>的情况</p></li></ul><h4 id="DefaultLifecycleObserverAdapter"><a href="#DefaultLifecycleObserverAdapter" class="headerlink" title="DefaultLifecycleObserverAdapter"></a>DefaultLifecycleObserverAdapter</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">DefaultLifecycleObserverAdapter</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> defaultLifecycleObserver: DefaultLifecycleObserver,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lifecycleEventObserver: LifecycleEventObserver?</span><br><span class="line">) : LifecycleEventObserver &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStateChanged</span><span class="params">(source: <span class="type">LifecycleOwner</span>, event: <span class="type">Lifecycle</span>.<span class="type">Event</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (event) &#123;</span><br><span class="line">            Lifecycle.Event.ON_CREATE -&gt; defaultLifecycleObserver.onCreate(source)</span><br><span class="line">            Lifecycle.Event.ON_START -&gt; defaultLifecycleObserver.onStart(source)</span><br><span class="line">            Lifecycle.Event.ON_RESUME -&gt; defaultLifecycleObserver.onResume(source)</span><br><span class="line">            Lifecycle.Event.ON_PAUSE -&gt; defaultLifecycleObserver.onPause(source)</span><br><span class="line">            Lifecycle.Event.ON_STOP -&gt; defaultLifecycleObserver.onStop(source)</span><br><span class="line">            Lifecycle.Event.ON_DESTROY -&gt; defaultLifecycleObserver.onDestroy(source)</span><br><span class="line">            Lifecycle.Event.ON_ANY -&gt;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;ON_ANY must not been send by anybody&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        lifecycleEventObserver?.onStateChanged(source, event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里就很清晰了，<code>DefaultLifecycleObserverAdapter</code>根据当前的<code>state</code>调用<code>DefaultLifecycleObserver</code>的各个回调</li></ul><h3 id="handleLifecycleEvent"><a href="#handleLifecycleEvent" class="headerlink" title="handleLifecycleEvent"></a>handleLifecycleEvent</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the current state and notifies the observers.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Note that if the `currentState` is the same state as the last call to this method,</span></span><br><span class="line"><span class="comment">    * calling this method has no effect.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> event The event that was received</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleLifecycleEvent</span><span class="params">(event: <span class="type">Event</span>)</span></span> &#123;</span><br><span class="line">    enforceMainThreadIfNeeded(<span class="string">&quot;handleLifecycleEvent&quot;</span>)</span><br><span class="line">    moveToState(event.targetState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到<code>handleLifecycleEvent</code>也有设置<code>state</code>的作用</li></ul><h2 id="Activity生命周期相关函数"><a href="#Activity生命周期相关函数" class="headerlink" title="Activity生命周期相关函数"></a>Activity生命周期相关函数</h2><h3 id="回调结构定义"><a href="#回调结构定义" class="headerlink" title="回调结构定义"></a>回调结构定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;Application.ActivityLifecycleCallbacks&gt; mActivityLifecycleCallbacks =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Application.ActivityLifecycleCallbacks&gt;();</span><br></pre></td></tr></table></figure><p>此处定义了一个回调的接口<code>List</code></p><h3 id="注册与删除"><a href="#注册与删除" class="headerlink" title="注册与删除"></a>注册与删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerActivityLifecycleCallbacks</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@NonNull</span> Application.ActivityLifecycleCallbacks callback)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mActivityLifecycleCallbacks) &#123;</span><br><span class="line">        mActivityLifecycleCallbacks.add(callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unregisterActivityLifecycleCallbacks</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@NonNull</span> Application.ActivityLifecycleCallbacks callback)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mActivityLifecycleCallbacks) &#123;</span><br><span class="line">        mActivityLifecycleCallbacks.remove(callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调list转数组"><a href="#回调list转数组" class="headerlink" title="回调list转数组"></a>回调<code>list</code>转数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] collectActivityLifecycleCallbacks() &#123;</span><br><span class="line">    Object[] callbacks = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mActivityLifecycleCallbacks) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityLifecycleCallbacks.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            callbacks = mActivityLifecycleCallbacks.toArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> callbacks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面介绍的<code>dispatchActivityXXX</code>函数将调用<code>collectActivityLifecycleCallbacks</code>获取所有<code>callbacks</code>，然后调用<code>callbacks</code>的<code>onActivityXXX</code>函数</li></ul><h3 id="dispatchActivityPreCreated"><a href="#dispatchActivityPreCreated" class="headerlink" title="dispatchActivityPreCreated"></a>dispatchActivityPreCreated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchActivityPreCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    getApplication().dispatchActivityPreCreated(<span class="built_in">this</span>, savedInstanceState);</span><br><span class="line">    Object[] callbacks = collectActivityLifecycleCallbacks();</span><br><span class="line">    <span class="keyword">if</span> (callbacks != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">            ((Application.ActivityLifecycleCallbacks) callbacks[i]).onActivityPreCreated(<span class="built_in">this</span>,</span><br><span class="line">                    savedInstanceState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dispatchActivityCreated"><a href="#dispatchActivityCreated" class="headerlink" title="dispatchActivityCreated"></a>dispatchActivityCreated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    getApplication().dispatchActivityCreated(<span class="built_in">this</span>, savedInstanceState);</span><br><span class="line">    Object[] callbacks = collectActivityLifecycleCallbacks();</span><br><span class="line">    <span class="keyword">if</span> (callbacks != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">            ((Application.ActivityLifecycleCallbacks) callbacks[i]).onActivityCreated(<span class="built_in">this</span>,</span><br><span class="line">                    savedInstanceState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dispatchActivityPostCreated"><a href="#dispatchActivityPostCreated" class="headerlink" title="dispatchActivityPostCreated"></a>dispatchActivityPostCreated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchActivityPostCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    Object[] callbacks = collectActivityLifecycleCallbacks();</span><br><span class="line">    <span class="keyword">if</span> (callbacks != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">            ((Application.ActivityLifecycleCallbacks) callbacks[i]).onActivityPostCreated(<span class="built_in">this</span>,</span><br><span class="line">                    savedInstanceState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getApplication().dispatchActivityPostCreated(<span class="built_in">this</span>, savedInstanceState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每段代码几乎是一样的，就不全贴上来了</li><li>没贴上来的还有<ul><li>dispatchActivityPreStarted, dispatchActivityStarted, dispatchActivityPostStarted</li><li>dispatchActivityPreResumed, dispatchActivityResumed, dispatchActivityPostResumed</li><li>dispatchActivityPrePaused, dispatchActivityPaused, dispatchActivityPostPaused</li><li>dispatchActivitySaveInstanceState, dispatchActivitySaveInstanceState, dispatchActivityPostSaveInstanceState</li><li>dispatchActivityPreDestroyed, dispatchActivityDestroyed, dispatchActivityPostDestroyed</li><li>dispatchActivityConfigurationChanged</li></ul></li></ul><h2 id="ReportFragment"><a href="#ReportFragment" class="headerlink" title="ReportFragment"></a>ReportFragment</h2><ul><li>reportFragment负责传递Activity的生命周期</li></ul><h3 id="ReportFragment的初始化"><a href="#ReportFragment的初始化" class="headerlink" title="ReportFragment的初始化"></a>ReportFragment的初始化</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    ReportFragment.injectIfNeededIn(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">injectIfNeededIn</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">        <span class="comment">// On API 29+, we can register for the correct Lifecycle callbacks directly</span></span><br><span class="line">        LifecycleCallbacks.registerIn(activity)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Prior to API 29 and to maintain compatibility with older versions of</span></span><br><span class="line">    <span class="comment">// ProcessLifecycleOwner (which may not be updated when lifecycle-runtime is updated and</span></span><br><span class="line">    <span class="comment">// need to support activities that don&#x27;t extend from FragmentActivity from support lib),</span></span><br><span class="line">    <span class="comment">// use a framework fragment to get the correct timing of Lifecycle events</span></span><br><span class="line">    <span class="keyword">val</span> manager = activity.fragmentManager</span><br><span class="line">    <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="literal">null</span>) &#123;</span><br><span class="line">        manager.beginTransaction().add(ReportFragment(), REPORT_FRAGMENT_TAG).commit()</span><br><span class="line">        <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">        manager.executePendingTransactions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>api</code>29之后，会使用<code>LifecycleCallbacks.registerIn</code></li><li>另外还会使用<code>ReportFragment</code>来报告<code>activity</code>的生命周期</li></ul><h3 id="ReportFragment分发生命周期-API-29之前"><a href="#ReportFragment分发生命周期-API-29之前" class="headerlink" title="ReportFragment分发生命周期(API 29之前)"></a>ReportFragment分发生命周期(API 29之前)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> processListener: ActivityInitializationListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchCreate</span><span class="params">(listener: <span class="type">ActivityInitializationListener</span>?)</span></span> &#123;</span><br><span class="line">    listener?.onCreate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchStart</span><span class="params">(listener: <span class="type">ActivityInitializationListener</span>?)</span></span> &#123;</span><br><span class="line">    listener?.onStart()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchResume</span><span class="params">(listener: <span class="type">ActivityInitializationListener</span>?)</span></span> &#123;</span><br><span class="line">    listener?.onResume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityCreated</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState)</span><br><span class="line">    dispatchCreate(processListener)</span><br><span class="line">    dispatch(Lifecycle.Event.ON_CREATE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart()</span><br><span class="line">    dispatchStart(processListener)</span><br><span class="line">    dispatch(Lifecycle.Event.ON_START)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume()</span><br><span class="line">    dispatchResume(processListener)</span><br><span class="line">    dispatch(Lifecycle.Event.ON_RESUME)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause()</span><br><span class="line">    dispatch(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop()</span><br><span class="line">    dispatch(Lifecycle.Event.ON_STOP)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy()</span><br><span class="line">    dispatch(Lifecycle.Event.ON_DESTROY)</span><br><span class="line">    <span class="comment">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class="line">    processListener = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，当<code>Fragment</code>的声明周期函数被调用时，会调用<code>dispatch</code>，将<code>activity</code>的生命周期进行传递</li></ul><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(event: <span class="type">Lifecycle</span>.<span class="type">Event</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">29</span>) &#123;</span><br><span class="line">        <span class="comment">// Only dispatch events from ReportFragment on API levels prior</span></span><br><span class="line">        <span class="comment">// to API 29. On API 29+, this is handled by the ActivityLifecycleCallbacks</span></span><br><span class="line">        <span class="comment">// added in ReportFragment.injectIfNeededIn</span></span><br><span class="line">        dispatch(activity, event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(activity: <span class="type">Activity</span>, event: <span class="type">Lifecycle</span>.<span class="type">Event</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (activity <span class="keyword">is</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">        activity.lifecycle.handleLifecycleEvent(event)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (activity <span class="keyword">is</span> LifecycleOwner) &#123;</span><br><span class="line">        <span class="keyword">val</span> lifecycle = (activity <span class="keyword">as</span> LifecycleOwner).lifecycle</span><br><span class="line">        <span class="keyword">if</span> (lifecycle <span class="keyword">is</span> LifecycleRegistry) &#123;</span><br><span class="line">            lifecycle.handleLifecycleEvent(event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>仅在<code>api 29</code>之前通过<code>ReportFragment</code>来进行<code>activity</code>的生命周期传递</li><li>这里就可以看到上面分析的<code>LifecycleRegistry</code>类了，获取<code>activity</code>中的<code>lifecycle</code>再调用<code>handleLifecycleEvent</code>来更新<code>activity</code>的生命周期，进而将生命周期改变传递给<code>listener</code></li></ul><h2 id="API-29及以后Activity分发生命周期"><a href="#API-29及以后Activity分发生命周期" class="headerlink" title="API 29及以后Activity分发生命周期"></a>API 29及以后Activity分发生命周期</h2><h3 id="回到ReportFragment"><a href="#回到ReportFragment" class="headerlink" title="回到ReportFragment"></a>回到<code>ReportFragment</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">injectIfNeededIn</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">        <span class="comment">// On API 29+, we can register for the correct Lifecycle callbacks directly</span></span><br><span class="line">        LifecycleCallbacks.registerIn(activity)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大于等于<code>Api 29</code>时，会调用<code>registerIn</code></p><h3 id="registerIn"><a href="#registerIn" class="headerlink" title="registerIn"></a><code>registerIn</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">registerIn</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">    activity.registerActivityLifecycleCallbacks(LifecycleCallbacks())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到，调用了<a href="#activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0">activity</a>的<code>registerActivityLifecycleCallbacks</code>，<code>activity</code>会在发生生命周期改变时调用回调<code>LifecycleCallbacks</code></li></ul><h3 id="LifecycleCallbacks"><a href="#LifecycleCallbacks" class="headerlink" title="LifecycleCallbacks"></a>LifecycleCallbacks</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">LifecycleCallbacks</span> : <span class="type">Application.ActivityLifecycleCallbacks</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityCreated</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        activity: <span class="type">Activity</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        bundle: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPostCreated</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        activity: <span class="type">Activity</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_CREATE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityStarted</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPostStarted</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_START)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResumed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPostResumed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_RESUME)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPrePaused</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_PAUSE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPaused</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPreStopped</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_STOP)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityStopped</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        activity: <span class="type">Activity</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        bundle: <span class="type">Bundle</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityPreDestroyed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">        dispatch(activity, Lifecycle.Event.ON_DESTROY)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityDestroyed</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">registerIn</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">            activity.registerActivityLifecycleCallbacks(LifecycleCallbacks())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里看到<code>LifecycleCallbacks</code>调用了<a href="#dispatch">dispatch()</a>函数，将<code>activity</code>的生命周期进行了分发</li></ul><h2 id="Fragment的lifecycle"><a href="#Fragment的lifecycle" class="headerlink" title="Fragment的lifecycle"></a>Fragment的lifecycle</h2><h3 id="实现LifecycleOwner"><a href="#实现LifecycleOwner" class="headerlink" title="实现LifecycleOwner"></a>实现<code>LifecycleOwner</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fragment</span> <span class="keyword">implements</span> <span class="title class_">ComponentCallbacks</span>, OnCreateContextMenuListener, LifecycleOwner,</span><br><span class="line">        ViewModelStoreOwner, HasDefaultViewModelProviderFactory, SavedStateRegistryOwner,</span><br><span class="line">        ActivityResultCaller &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="初始化Lifecycle"><a href="#初始化Lifecycle" class="headerlink" title="初始化Lifecycle"></a>初始化<code>Lifecycle</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Fragment</span><span class="params">()</span> &#123;</span><br><span class="line">    initLifecycle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">    mLifecycleRegistry = <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line">    mSavedStateRegistryController = SavedStateRegistryController.create(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// The default factory depends on the SavedStateRegistry so it</span></span><br><span class="line">    <span class="comment">// needs to be reset when the SavedStateRegistry is reset</span></span><br><span class="line">    mDefaultFactory = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!mOnPreAttachedListeners.contains(mSavedStateAttachListener)) &#123;</span><br><span class="line">        registerOnPreAttachListener(mSavedStateAttachListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递事件"><a href="#传递事件" class="headerlink" title="传递事件"></a>传递事件</h3><p><code>fragment</code>的生命周期传递比较简单，就是在<code>fragment</code>各个生命周期时调用<code>handleLifecycleEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    mState = CREATED;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    mLifecycleRegistry.addObserver(<span class="keyword">new</span> <span class="title class_">LifecycleEventObserver</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source,</span></span><br><span class="line"><span class="params">                <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event == Lifecycle.Event.ON_STOP) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mView != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mView.cancelPendingInputEvents();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    onCreate(savedInstanceState);</span><br><span class="line">    mIsCreated = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onCreate()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performStart</span><span class="params">()</span> &#123;</span><br><span class="line">    mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    mChildFragmentManager.execPendingActions(<span class="literal">true</span>);</span><br><span class="line">    mState = STARTED;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    onStart();</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onStart()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class="line">    <span class="keyword">if</span> (mView != <span class="literal">null</span>) &#123;</span><br><span class="line">        mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line">    mChildFragmentManager.dispatchStart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performResume</span><span class="params">()</span> &#123;</span><br><span class="line">    mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    mChildFragmentManager.execPendingActions(<span class="literal">true</span>);</span><br><span class="line">    mState = RESUMED;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    onResume();</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onResume()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    <span class="keyword">if</span> (mView != <span class="literal">null</span>) &#123;</span><br><span class="line">        mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line">    mChildFragmentManager.dispatchResume();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performPause</span><span class="params">()</span> &#123;</span><br><span class="line">    mChildFragmentManager.dispatchPause();</span><br><span class="line">    <span class="keyword">if</span> (mView != <span class="literal">null</span>) &#123;</span><br><span class="line">        mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">    &#125;</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">    mState = AWAITING_ENTER_EFFECTS;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    onPause();</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onPause()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performStop</span><span class="params">()</span> &#123;</span><br><span class="line">    mChildFragmentManager.dispatchStop();</span><br><span class="line">    <span class="keyword">if</span> (mView != <span class="literal">null</span>) &#123;</span><br><span class="line">        mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);</span><br><span class="line">    mState = ACTIVITY_CREATED;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    onStop();</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onStop()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    mChildFragmentManager.dispatchDestroy();</span><br><span class="line">    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">    mState = ATTACHED;</span><br><span class="line">    mCalled = <span class="literal">false</span>;</span><br><span class="line">    mIsCreated = <span class="literal">false</span>;</span><br><span class="line">    onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SuperNotCalledException</span>(<span class="string">&quot;Fragment &quot;</span> + <span class="built_in">this</span></span><br><span class="line">                + <span class="string">&quot; did not call through to super.onDestroy()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;lifeCycle的Observer&quot;&gt;&lt;a href=&quot;#lifeCycle的Observer&quot; class=&quot;headerlink&quot; title=&quot;lifeCycle的Observer&quot;&gt;&lt;/a&gt;lifeCycle的Observer&lt;/h2&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;LifecycleObserver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;DefaultLifecycleObserver&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;LifecycleObserver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_CREATE` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called after the [LifecycleOwner]&amp;#x27;s `onCreate`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * method returns.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_START` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called after the [LifecycleOwner]&amp;#x27;s `onStart` method returns.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_RESUME` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called after the [LifecycleOwner]&amp;#x27;s `onResume`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * method returns.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_PAUSE` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called before the [LifecycleOwner]&amp;#x27;s `onPause` method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * is called.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_STOP` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called before the [LifecycleOwner]&amp;#x27;s `onStop` method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * is called.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Notifies that `ON_DESTROY` event occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * This method will be called before the [LifecycleOwner]&amp;#x27;s `onDestroy` method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * is called.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; owner the component, whose state was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(owner: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; LifecycleEventObserver : LifecycleObserver &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Called when a state transition event happens.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; source The source of the event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; event The event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStateChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(source: &lt;span class=&quot;type&quot;&gt;LifecycleOwner&lt;/span&gt;, event: &lt;span class=&quot;type&quot;&gt;Lifecycle&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Event&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;可以看到，我们在使用&lt;code&gt;lifecycle.addObserver()&lt;/code&gt;时，可以传入&lt;code&gt;LifecycleEventObserver&lt;/code&gt;或&lt;code&gt;DefaultLifecycleObserver&lt;/code&gt;，一个通过&lt;code&gt;event&lt;/code&gt;获取当前状态，一个通过不同的回调函数获取当前状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Activity树&quot;&gt;&lt;a href=&quot;#Activity树&quot; class=&quot;headerlink&quot; title=&quot;Activity树&quot;&gt;&lt;/a&gt;Activity树&lt;/h2&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Activity -- AccountAuthenticatorActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- ActivityGroup -- TabActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- ExpandableListActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- LauncherActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- ListActivity -- PreferenceActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- NativeActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- androidx.core.app.ComponentActivity -- androidx.activity.ComponentActivity -- FragmentActivity -- AppCompatActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                |- PreviewActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- BootstrapActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- EmptyActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |- EmptyFloatingActivity&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;LifecycleOwner&quot;&gt;&lt;a href=&quot;#LifecycleOwner&quot; class=&quot;headerlink&quot; title=&quot;LifecycleOwner&quot;&gt;&lt;/a&gt;LifecycleOwner&lt;/h2&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基础02-viewModel</title>
    <link href="https://jingtianer.github.io/home/2024/07/31/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8002-viewModel/"/>
    <id>https://jingtianer.github.io/home/2024/07/31/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8002-viewModel/</id>
    <published>2024-07-31T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewModel简介"><a href="#ViewModel简介" class="headerlink" title="ViewModel简介"></a>ViewModel简介</h2><p>在了解ViewModel之前，我们先来了解一下MVC, MVP, MVVM的发展<a href="https://www.geeksforgeeks.org/difference-between-mvc-mvp-and-mvvm-architecture-pattern-in-android/">Difference Between MVC, MVP and MVVM Architecture Pattern in Android</a></p><h2 id="ViewModelStoreOwner"><a href="#ViewModelStoreOwner" class="headerlink" title="ViewModelStoreOwner"></a><a href="https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModelStoreOwner">ViewModelStoreOwner</a></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ViewModelStoreOwner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The owned [ViewModelStore]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> viewModelStore: ViewModelStore</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现了<code>ViewModelStoreOwner</code>的类会有一个<code>viewModelStore</code>属性</li><li>在创建<code>ViewModel</code>时会传递这个变量，具体传递方式在见<a href="#by-viewmodels">by viewModels()</a></li><li>实现了<code>ViewModelStoreOwner</code>的直接子类有： <a href="https://developer.android.com/reference/androidx/activity/ComponentActivity">ComponentActivity</a>, <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment">Fragment</a> 和 <a href="https://developer.android.com/reference/androidx/navigation/NavBackStackEntry">NavBackStackEntry</a></li></ul><h2 id="ViewModelStore"><a href="#ViewModelStore" class="headerlink" title="ViewModelStore"></a>ViewModelStore</h2><p>实际上就是维护了一个<code>MutableMap&lt;String, ViewModel&gt;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">ViewModelStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> map = mutableMapOf&lt;String, ViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(key: <span class="type">String</span>, viewModel: <span class="type">ViewModel</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oldViewModel = map.put(key, viewModel)</span><br><span class="line">        oldViewModel?.onCleared()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the `ViewModel` mapped to the given `key` or null if none exists.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(key: <span class="type">String</span>)</span></span>: ViewModel? &#123;</span><br><span class="line">        <span class="keyword">return</span> map[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">keys</span><span class="params">()</span></span>: Set&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> HashSet(map.keys)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears internal storage and notifies `ViewModel`s that they are no longer used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (vm <span class="keyword">in</span> map.values) &#123;</span><br><span class="line">            vm.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        map.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现就是在对map读写，注意到put方法会调用同key值的旧ViewModel的<code>onCleared</code></p><ul><li><code>onCleared</code>并不执行任何操作，是提供给子类进行回收资源的回调。<code>ViewModel</code>真正进行资源回收（调用<code>Closeable</code>的<code>close</code>方法）的函数是<code>clear</code>，put中并没有调用，这是一个很奇怪的问题，具体的原因在<a href="#a-viewmodelstoreput%E9%97%AE%E9%A2%98">下面</a>会解释</li><li>那么这个key是什么呢，<a href="#viewmodelprovider%E7%9A%84get%E6%96%B9%E6%B3%95">下面</a>再看吧</li></ul><h2 id="by-viewModels"><a href="#by-viewModels" class="headerlink" title="by viewModels()"></a><code>by viewModels()</code></h2><h3 id="ComponentActivity的viewModels"><a href="#ComponentActivity的viewModels" class="headerlink" title="ComponentActivity的viewModels()"></a><code>ComponentActivity</code>的<code>viewModels()</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> VM : ViewModel&gt;</span> ComponentActivity.<span class="title">viewModels</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> extrasProducer: (() -&gt; <span class="type">CreationExtras</span>)? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> factoryProducer: (() -&gt; <span class="type">Factory</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Lazy&lt;VM&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> factoryPromise = factoryProducer ?: &#123;</span><br><span class="line">        defaultViewModelProviderFactory</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ViewModelLazy(</span><br><span class="line">        VM::<span class="keyword">class</span>,</span><br><span class="line">        &#123; viewModelStore &#125;, <span class="comment">// 1️⃣ viewModelStore的传递在这里</span></span><br><span class="line">        factoryPromise, </span><br><span class="line">        &#123; extrasProducer?.invoke() ?: <span class="keyword">this</span>.defaultViewModelCreationExtras &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>viewModels()</code>实际上是<code>ComponentActivity</code>的一个扩展方法，返回了<code>ViewModelLazy</code>对<code>ViewModel</code>的属性进行代理</p><h2 id="ViewModelLazy"><a href="#ViewModelLazy" class="headerlink" title="ViewModelLazy"></a>ViewModelLazy</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewModelLazy</span>&lt;<span class="type">VM : ViewModel</span>&gt; <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModelClass: KClass&lt;VM&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> storeProducer: () -&gt; ViewModelStore,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> factoryProducer: () -&gt; ViewModelProvider.Factory,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> extrasProducer: () -&gt; CreationExtras = &#123; CreationExtras.Empty &#125;</span><br><span class="line">) : Lazy&lt;VM&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cached: VM? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> value: VM</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">val</span> viewModel = cached</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">if</span> (viewModel == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> factory = factoryProducer()</span><br><span class="line">                <span class="keyword">val</span> store = storeProducer()</span><br><span class="line">                ViewModelProvider(</span><br><span class="line">                    store,</span><br><span class="line">                    factory,</span><br><span class="line">                    extrasProducer()</span><br><span class="line">                ).<span class="keyword">get</span>(viewModelClass.java).also &#123;</span><br><span class="line">                    cached = it</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                viewModel</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isInitialized</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = cached != <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到当属性首次<code>get</code>时会构造<code>ViewModelProvider</code>并调用<code>get</code>方法获取<code>viewModel</code>对象</p><h2 id="ViewModelProvider"><a href="#ViewModelProvider" class="headerlink" title="ViewModelProvider"></a>ViewModelProvider</h2><h3 id="ViewModelProvider的get方法"><a href="#ViewModelProvider的get方法" class="headerlink" title="ViewModelProvider的get方法"></a><code>ViewModelProvider</code>的<code>get</code>方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">get</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">val</span> canonicalName = modelClass.canonicalName</span><br><span class="line">        ?: <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Local and anonymous classes can not be ViewModels&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(<span class="string">&quot;<span class="variable">$DEFAULT_KEY</span>:<span class="variable">$canonicalName</span>&quot;</span>, modelClass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">get</span><span class="params">(key: <span class="type">String</span>, modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel = store[key] <span class="comment">// 1️⃣ 从store中取viewModel</span></span><br><span class="line">    <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123; <span class="comment">// 2️⃣ 判断合法性</span></span><br><span class="line">        (factory <span class="keyword">as</span>? OnRequeryFactory)?.onRequery(viewModel!!)</span><br><span class="line">        <span class="keyword">return</span> viewModel <span class="keyword">as</span> T</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="meta">@Suppress(<span class="string">&quot;ControlFlowWithEmptyBody&quot;</span>)</span></span><br><span class="line">        <span class="keyword">if</span> (viewModel != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> extras = MutableCreationExtras(defaultCreationExtras)</span><br><span class="line">    extras[VIEW_MODEL_KEY] = key</span><br><span class="line">    <span class="comment">// AGP has some desugaring issues associated with compileOnly dependencies so we need to</span></span><br><span class="line">    <span class="comment">// fall back to the other create method to keep from crashing.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        factory.create(modelClass, extras) <span class="comment">// 3️⃣ 通过factory创建ViewModel</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: AbstractMethodError) &#123; <span class="comment">// 3️⃣ 通过factory创建ViewModel</span></span><br><span class="line">        factory.create(modelClass)</span><br><span class="line">    &#125;.also &#123; store.put(key, it) &#125; <span class="comment">// 4️⃣ 存入store</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1️⃣ 从<code>store</code>中取<code>viewModel</code>，这个<code>store</code>就是上面提到的<a href="#viewmodelstore">ViewModelStore</a>, 这里可以看到其<code>key</code>就是类名</li><li>2️⃣ 判断合法性，<code>isInstance</code>函数首先判空，其次判断是否为对应的类型，这一步的判空是为了判断是否需要构造<code>ViewModel</code>实例，避免返回空；这一步的判断类型则是为了提高安全性，返回时强转不会强转失败</li><li>3️⃣ 通过<code>factory</code>创建，这一步显而易见，创建新的实例。这里的<code>factory</code>默认值是通过<code>ComponentActivity</code>构造的<code>SavedStateViewModelFactory</code></li><li>4️⃣ 存入<code>store</code>，在创建后存入<code>store</code>中</li></ul><h3 id="A-ViewModelStore-put-问题"><a href="#A-ViewModelStore-put-问题" class="headerlink" title="A: ViewModelStore.put()问题"></a>A: ViewModelStore.put()问题</h3><blockquote><p>这里可以推测，如果同一个<code>ViewModelStoreOwner</code>中声明了多个同类型的<code>ViewModel</code>，根据2️⃣的判断，他们会是同一个实例。<code>ViewModelStore.put</code>时一般不会存在同key值的<code>ViewModel</code>对象，所以那里是否调用<code>clear</code>进行资源回收也就不是很重要了。</p></blockquote><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>ViewModel类实际上不是实际实现，持有<code>ViewModelImpl</code>的实例，对其方法进行代理</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ViewModel</span></span><br></pre></td></tr></table></figure><p>几个注意的点：</p><ul><li>actual: 介绍看<a href="https://www.baeldung.com/kotlin/actual-expect-keywords">这里</a>, 大概是和跨端相关的。</li><li>abstract</li></ul><h3 id="clear方法"><a href="#clear方法" class="headerlink" title="clear方法"></a>clear方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">actual</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCleared</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">    impl?.clear()</span><br><span class="line">    onCleared()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里可以看到稍有不同的是，除了代理调用<code>ViewModelImpl</code>的<code>clear</code>方法，还调用了钩子方法<code>onCleared</code></li><li>另外很有趣的是<code>ViewModelImpl</code>和<code>ViewModel</code>并没有继承关系，也没有继承相同的接口</li></ul><h2 id="ViewModelImpl"><a href="#ViewModelImpl" class="headerlink" title="ViewModelImpl"></a>ViewModelImpl</h2><h3 id="关键的属性"><a href="#关键的属性" class="headerlink" title="关键的属性"></a>关键的属性</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> keyToCloseables = mutableMapOf&lt;String, AutoCloseable&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> [keyToCloseables]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> closeables = mutableSetOf&lt;AutoCloseable&gt;()</span><br></pre></td></tr></table></figure><p>可以看到维护了一个map和一个set，保存<code>AutoCloseable</code></p><h3 id="addCloseable"><a href="#addCloseable" class="headerlink" title="addCloseable"></a>addCloseable</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addCloseable</span><span class="params">(key: <span class="type">String</span>, closeable: <span class="type">AutoCloseable</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Although no logic should be done after user calls onCleared(), we will</span></span><br><span class="line">    <span class="comment">// ensure that if it has already been called, the closeable attempting to</span></span><br><span class="line">    <span class="comment">// be added will be closed immediately to ensure there will be no leaks.</span></span><br><span class="line">    <span class="keyword">if</span> (isCleared) &#123;</span><br><span class="line">        closeWithRuntimeException(closeable)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> oldCloseable = synchronized(lock) &#123; keyToCloseables.put(key, closeable) &#125;</span><br><span class="line">    closeWithRuntimeException(oldCloseable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@see</span> [ViewModel.addCloseable] */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addCloseable</span><span class="params">(closeable: <span class="type">AutoCloseable</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Although no logic should be done after user calls onCleared(), we will</span></span><br><span class="line">    <span class="comment">// ensure that if it has already been called, the closeable attempting to</span></span><br><span class="line">    <span class="comment">// be added will be closed immediately to ensure there will be no leaks.</span></span><br><span class="line">    <span class="keyword">if</span> (isCleared) &#123;</span><br><span class="line">        closeWithRuntimeException(closeable)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    synchronized(lock) &#123; closeables += closeable &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到两个函数，一个是添加到map中，一个是添加到set中</li><li>如果当前ViewModel已经被clear了，那么会调用<code>closeWithRuntimeException</code>，这个方法会调用其close方法，并将close时出现的异常转换为<code>RuntimeException</code>抛出</li><li>如果map中有同key值的closeable，那么也会调用<code>closeWithRuntimeException</code>将其关闭</li><li>这两个函数也可以提供给用户使用</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(viewModelScope: CoroutineScope) &#123;</span><br><span class="line">    addCloseable(VIEW_MODEL_SCOPE_KEY, viewModelScope.asCloseable())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="keyword">vararg</span> closeables: AutoCloseable) &#123;</span><br><span class="line">    <span class="keyword">this</span>.closeables += closeables</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(viewModelScope: CoroutineScope, <span class="keyword">vararg</span> closeables: AutoCloseable) &#123;</span><br><span class="line">    addCloseable(VIEW_MODEL_SCOPE_KEY, viewModelScope.asCloseable())</span><br><span class="line">    <span class="keyword">this</span>.closeables += closeables</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，只允许传递一个<code>CoroutineScope</code>，会将其转化为closeable，存到map中</li><li>看上去只允许传递一个<code>CoroutineScope</code>，但是还是可以通过相同的方法传递多个用<code>CloseableCoroutineScope</code>包装过的Scope对象</li><li>这个构造允许传递一个<code>CoroutineScope</code>完全是为了将其转化为Closeable对象，没有别的意义，感觉很多余。</li></ul><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCleared) <span class="keyword">return</span> <span class="comment">// 1️⃣</span></span><br><span class="line"></span><br><span class="line">    isCleared = <span class="literal">true</span> <span class="comment">// 2️⃣</span></span><br><span class="line">    synchronized(lock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (closeable <span class="keyword">in</span> keyToCloseables.values) &#123;</span><br><span class="line">            closeWithRuntimeException(closeable)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (closeable <span class="keyword">in</span> closeables) &#123;</span><br><span class="line">            closeWithRuntimeException(closeable)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Clear only resources without keys to prevent accidental recreation of resources.</span></span><br><span class="line">        <span class="comment">// For example, `viewModelScope` would be recreated leading to unexpected behaviour.</span></span><br><span class="line">        closeables.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@MainThread</code>标明该方法应该被在主线程调用</li><li>方法其实就是把所有closeable关掉，再把set清空，但是map却没有清空？</li><li>可以看到1️⃣和2️⃣并不是原子的，如果clear被多个线程同时调用，有可能存在map里的closeable被close两次的情况。</li></ul><h2 id="SavedStateViewModelFactory"><a href="#SavedStateViewModelFactory" class="headerlink" title="SavedStateViewModelFactory"></a>SavedStateViewModelFactory</h2><h3 id="create方法"><a href="#create方法" class="headerlink" title="create方法"></a>create方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;, extras: <span class="type">CreationExtras</span>)</span></span>: T &#123; <span class="comment">// 1️⃣</span></span><br><span class="line">    <span class="keyword">val</span> key = extras[ViewModelProvider.NewInstanceFactory.VIEW_MODEL_KEY]</span><br><span class="line">        ?: <span class="keyword">throw</span> IllegalStateException(</span><br><span class="line">            <span class="string">&quot;VIEW_MODEL_KEY must always be provided by ViewModelProvider&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (extras[SAVED_STATE_REGISTRY_OWNER_KEY] != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        extras[VIEW_MODEL_STORE_OWNER_KEY] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> application = extras[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY]</span><br><span class="line">        <span class="keyword">val</span> isAndroidViewModel = AndroidViewModel::<span class="keyword">class</span>.java.isAssignableFrom(modelClass)</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">constructor</span>: Constructor&lt;T&gt;? = <span class="keyword">if</span> (isAndroidViewModel &amp;&amp; application != <span class="literal">null</span>) &#123;</span><br><span class="line">            findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// doesn&#x27;t need SavedStateHandle</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">constructor</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.create(modelClass, extras)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> viewModel = <span class="keyword">if</span> (isAndroidViewModel &amp;&amp; application != <span class="literal">null</span>) &#123;</span><br><span class="line">            newInstance(modelClass, <span class="keyword">constructor</span>, application, extras.createSavedStateHandle())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newInstance(modelClass, <span class="keyword">constructor</span>, extras.createSavedStateHandle())</span><br><span class="line">        &#125;</span><br><span class="line">        viewModel</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> viewModel = <span class="keyword">if</span> (lifecycle != <span class="literal">null</span>) &#123;</span><br><span class="line">            create(key, modelClass)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;SAVED_STATE_REGISTRY_OWNER_KEY and&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VIEW_MODEL_STORE_OWNER_KEY must be provided in the creation extras to&quot;</span> +</span><br><span class="line">                <span class="string">&quot;successfully create a ViewModel.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        viewModel</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new instance of the given `Class`.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key a key associated with the requested ViewModel</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> modelClass a `Class` whose instance is requested</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a newly created ViewModel</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> UnsupportedOperationException if the there is no lifecycle</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(key: <span class="type">String</span>, modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123; <span class="comment">// 2️⃣</span></span><br><span class="line">    <span class="comment">// empty constructor was called.</span></span><br><span class="line">    <span class="keyword">val</span> lifecycle = lifecycle</span><br><span class="line">        ?: <span class="keyword">throw</span> UnsupportedOperationException(</span><br><span class="line">            <span class="string">&quot;SavedStateViewModelFactory constructed with empty constructor supports only &quot;</span> +</span><br><span class="line">                <span class="string">&quot;calls to create(modelClass: Class&lt;T&gt;, extras: CreationExtras).&quot;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">val</span> isAndroidViewModel = AndroidViewModel::<span class="keyword">class</span>.java.isAssignableFrom(modelClass)</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">constructor</span>: Constructor&lt;T&gt;? = <span class="keyword">if</span> (isAndroidViewModel &amp;&amp; application != <span class="literal">null</span>) &#123;</span><br><span class="line">        findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// doesn&#x27;t need SavedStateHandle</span></span><br><span class="line">    <span class="keyword">constructor</span></span><br><span class="line">        ?: <span class="comment">// If you are using a stateful constructor and no application is available, we</span></span><br><span class="line">        <span class="comment">// use an instance factory instead.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (application != <span class="literal">null</span>) factory.create(modelClass)</span><br><span class="line">        <span class="keyword">else</span> instance.create(modelClass)</span><br><span class="line">    <span class="keyword">val</span> controller = LegacySavedStateHandleController.create(</span><br><span class="line">        savedStateRegistry!!, lifecycle, key, defaultArgs</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> viewModel: T = <span class="keyword">if</span> (isAndroidViewModel &amp;&amp; application != <span class="literal">null</span>) &#123;</span><br><span class="line">        newInstance(modelClass, <span class="keyword">constructor</span>, application!!, controller.handle)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newInstance(modelClass, <span class="keyword">constructor</span>, controller.handle)</span><br><span class="line">    &#125;</span><br><span class="line">    viewModel.setTagIfAbsent(</span><br><span class="line">        AbstractSavedStateViewModelFactory.TAG_SAVED_STATE_HANDLE_CONTROLLER, controller</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> viewModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>1️⃣和2️⃣大体流程上都是获取构造函数，创建实例对象</li><li>区别在于<code>newInstance</code>的第四个参数不同，一个通过<code>extras</code>获取，一个通过<code>LegacySavedStateHandleController</code>获得，看起来很复杂，但是看一下这个<code>newInstance</code>的实现就会发现，第四个参数实际上就是构造函数的参数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel?&gt;</span> <span class="title">newInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">constructor</span>: <span class="type">Constructor</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">vararg</span> params: <span class="type">Any</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">constructor</span>.newInstance(*params)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IllegalAccessException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;Failed to access <span class="variable">$modelClass</span>&quot;</span>, e)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: InstantiationException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;A <span class="variable">$modelClass</span> cannot be instantiated.&quot;</span>, e)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: InvocationTargetException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(</span><br><span class="line">            <span class="string">&quot;An exception happened in constructor of <span class="variable">$modelClass</span>&quot;</span>, e.cause</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="viewModelStore何时被clear"><a href="#viewModelStore何时被clear" class="headerlink" title="viewModelStore何时被clear"></a>viewModelStore何时被clear</h2><p>在ComponentActivty的初始化时，会看到下面这段代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lifecycle.addObserver(LifecycleEventObserver &#123; _, event -&gt;</span><br><span class="line">    <span class="keyword">if</span> (event == Lifecycle.Event.ON_DESTROY) &#123;</span><br><span class="line">        <span class="comment">// Clear out the available context</span></span><br><span class="line">        contextAwareHelper.clearAvailableContext()</span><br><span class="line">        <span class="comment">// And clear the ViewModelStore</span></span><br><span class="line">        <span class="keyword">if</span> (!isChangingConfigurations) &#123;</span><br><span class="line">            viewModelStore.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        reportFullyDrawnExecutor.activityDestroyed()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果Activity生命周期到了<code>ON_DESTROY</code>，且不是夜间模式改变等情况，就会将viewModel清空，做到了界面和数据分离。</p><h2 id="CoroutineScope是如何变成Closeable的"><a href="#CoroutineScope是如何变成Closeable的" class="headerlink" title="CoroutineScope是如何变成Closeable的"></a>CoroutineScope是如何变成Closeable的</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">asCloseable</span><span class="params">()</span></span> = CloseableCoroutineScope(coroutineScope = <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [CoroutineScope] that provides a method to [close] it, causing the rejection of any new tasks and</span></span><br><span class="line"><span class="comment"> * cleanup of all underlying resources associated with the scope.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">CloseableCoroutineScope</span>(</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext,</span><br><span class="line">) : AutoCloseable, CoroutineScope &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(coroutineScope: CoroutineScope) : <span class="keyword">this</span>(coroutineScope.coroutineContext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">close</span><span class="params">()</span></span> = coroutineContext.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>CloseableCoroutineScope</code>实现了<code>AutoCloseable</code>, 在close方法中将协程cancel掉</p></blockquote><h2 id="CreationExtras"><a href="#CreationExtras" class="headerlink" title="CreationExtras"></a>CreationExtras</h2><p>在<a href="#create%E6%96%B9%E6%B3%95">SavedStateViewModelFactory的create方法</a>中，可以看到factory会拿到一个<code>CreationExtras</code><br>在<a href="#by-viewmodels">by viewModels()</a>时，会传递一个构造<code>CreationExtras</code>的函数，如果没提供，就使用默认<code>ComponentActivity</code>提供的<code>defaultViewModelCreationExtras</code></p><h3 id="默认的CreationExtras"><a href="#默认的CreationExtras" class="headerlink" title="默认的CreationExtras"></a>默认的<code>CreationExtras</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> defaultViewModelCreationExtras: CreationExtras</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * The extras of [getIntent] when this is first called will be used as</span></span><br><span class="line"><span class="comment">        * the defaults to any [androidx.lifecycle.SavedStateHandle] passed to a view model</span></span><br><span class="line"><span class="comment">        * created using this extra.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">val</span> extras = MutableCreationExtras()</span><br><span class="line">        <span class="keyword">if</span> (application != <span class="literal">null</span>) &#123;</span><br><span class="line">            extras[APPLICATION_KEY] = application</span><br><span class="line">        &#125;</span><br><span class="line">        extras[SAVED_STATE_REGISTRY_OWNER_KEY] = <span class="keyword">this</span></span><br><span class="line">        extras[VIEW_MODEL_STORE_OWNER_KEY] = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">val</span> intentExtras = intent?.extras</span><br><span class="line">        <span class="keyword">if</span> (intentExtras != <span class="literal">null</span>) &#123;</span><br><span class="line">            extras[DEFAULT_ARGS_KEY] = intentExtras</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> extras</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到里面存了当前的Application对象，还有两个this，还会将<code>intent.extra</code>放进去</p><blockquote><p>MutableCreationExtras其实也是维护了一个map</p></blockquote><h2 id="给ViewModel传参"><a href="#给ViewModel传参" class="headerlink" title="给ViewModel传参"></a>给ViewModel传参</h2><ul><li>前面提到我们可以指定<code>Factory</code>和<code>CreationExtras</code></li><li>可以自己编写<code>Factory</code>，从<code>CreationExtras</code>中获取参数，下面是示例代码<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> coroutineScope: CoroutineScope = CloseableCoroutineScope(), </span><br><span class="line">    param1: String, </span><br><span class="line">    param2: <span class="built_in">Int</span></span><br><span class="line">) : ViewModel(coroutineScope) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;, extras: <span class="type">CreationExtras</span>)</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">val</span> param1 = extras[MY_PARAM_KEY1]!!</span><br><span class="line">            <span class="keyword">val</span> param2 = extras[MY_PARAM_KEY2]!!</span><br><span class="line">            <span class="keyword">return</span> MainViewModel(param1 = param1, param2 = param2) <span class="keyword">as</span> T</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> MY_PARAM_KEY1 = <span class="keyword">object</span> : CreationExtras.Key&lt;String&gt; &#123;&#125;</span><br><span class="line">        <span class="keyword">val</span> MY_PARAM_KEY2 = <span class="keyword">object</span> : CreationExtras.Key&lt;<span class="built_in">Int</span>&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel : MainViewModel <span class="keyword">by</span> viewModels(&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@viewModels</span> MutableCreationExtras().apply &#123;</span><br><span class="line">            <span class="keyword">set</span>(MainViewModel.MY_PARAM_KEY1, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            <span class="keyword">set</span>(MainViewModel.MY_PARAM_KEY2, <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@viewModels</span> MainViewModel.Factory</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment-viewModels"><a href="#Fragment-viewModels" class="headerlink" title="Fragment.viewModels"></a>Fragment.viewModels</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> VM : ViewModel&gt;</span> Fragment.<span class="title">viewModels</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> ownerProducer: () -&gt; <span class="type">ViewModelStoreOwner</span> = &#123; this &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> extrasProducer: (() -&gt; <span class="type">CreationExtras</span>)? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> factoryProducer: (() -&gt; <span class="type">Factory</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Lazy&lt;VM&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> owner <span class="keyword">by</span> lazy(LazyThreadSafetyMode.NONE) &#123; ownerProducer() &#125;</span><br><span class="line">    <span class="keyword">return</span> createViewModelLazy(</span><br><span class="line">        VM::<span class="keyword">class</span>,</span><br><span class="line">        &#123; owner.viewModelStore &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            extrasProducer?.invoke()</span><br><span class="line">            ?: (owner <span class="keyword">as</span>? HasDefaultViewModelProviderFactory)?.defaultViewModelCreationExtras</span><br><span class="line">            ?: CreationExtras.Empty</span><br><span class="line">        &#125;,</span><br><span class="line">        factoryProducer ?: &#123;</span><br><span class="line">            (owner <span class="keyword">as</span>? HasDefaultViewModelProviderFactory)?.defaultViewModelProviderFactory</span><br><span class="line">                ?: defaultViewModelProviderFactory</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>支持创建&#x2F;获取其他<code>owner</code>的<code>ViewModel</code></li><li>和<code>ComponentActivity</code>一样，<code>createViewModelLazy</code>的返回的也是<code>ViewModelLazy</code>类</li></ul><h2 id="Fragment-activityViewModels"><a href="#Fragment-activityViewModels" class="headerlink" title="Fragment.activityViewModels"></a>Fragment.activityViewModels</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> VM : ViewModel&gt;</span> Fragment.<span class="title">activityViewModels</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> extrasProducer: (() -&gt; <span class="type">CreationExtras</span>)? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> factoryProducer: (() -&gt; <span class="type">Factory</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Lazy&lt;VM&gt; = createViewModelLazy(</span><br><span class="line">    VM::<span class="keyword">class</span>, &#123; requireActivity().viewModelStore &#125;,</span><br><span class="line">    &#123; extrasProducer?.invoke() ?: requireActivity().defaultViewModelCreationExtras &#125;,</span><br><span class="line">    factoryProducer ?: &#123; requireActivity().defaultViewModelProviderFactory &#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>获取<code>activity</code>的<code>viewModelStore</code></li></ul><h2 id="获取父fragment的viewModel"><a href="#获取父fragment的viewModel" class="headerlink" title="获取父fragment的viewModel"></a>获取父fragment的viewModel</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> parentFragmentViewModel:XXXViewModel <span class="keyword">by</span> viewModels(ownerProducer = &#123; requireParentFragment() &#125;)</span><br></pre></td></tr></table></figure><h2 id="navigation图的viewModel"><a href="#navigation图的viewModel" class="headerlink" title="navigation图的viewModel"></a>navigation图的viewModel</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> naviViewModel : MainViewModel <span class="keyword">by</span> navGraphViewModels(R.id.xxx)</span><br><span class="line"><span class="keyword">val</span> naviViewModel1 : MainViewModel <span class="keyword">by</span> viewModels(ownerProducer = &#123; findNavController().getBackStackEntry(R.id.xxx) &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> VM : ViewModel&gt;</span> Fragment.<span class="title">navGraphViewModels</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@IdRes</span> navGraphId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> extrasProducer: (() -&gt; <span class="type">CreationExtras</span>)? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> factoryProducer: (() -&gt; <span class="type">ViewModelProvider</span>.<span class="type">Factory</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Lazy&lt;VM&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> backStackEntry <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        findNavController().getBackStackEntry(navGraphId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> storeProducer: () -&gt; ViewModelStore = &#123;</span><br><span class="line">        backStackEntry.viewModelStore</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createViewModelLazy(</span><br><span class="line">        VM::<span class="keyword">class</span>, storeProducer,</span><br><span class="line">        &#123; extrasProducer?.invoke() ?: backStackEntry.defaultViewModelCreationExtras &#125;,</span><br><span class="line">        factoryProducer ?: &#123; backStackEntry.defaultViewModelProviderFactory &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>navGraphViewModels其实就是调用了<code>findNavController().getBackStackEntry(navGraphId)</code>，然后获取其<code>viewModelStore</code></li></ul><h2 id="非lazy获取的viewModel"><a href="#非lazy获取的viewModel" class="headerlink" title="非lazy获取的viewModel"></a>非lazy获取的viewModel</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewModel = ViewModelProvider(<span class="keyword">this</span>.viewModelStore, ViewModelProvider.NewInstanceFactory.instance)[MainViewModel::<span class="keyword">class</span>.java]</span><br><span class="line"><span class="keyword">val</span> viewModel = ViewModelProvider(<span class="keyword">this</span>.viewModelStore, MainViewModel.Factory, MutableCreationExtras().apply &#123;</span><br><span class="line">    <span class="keyword">set</span>(MainViewModel.MY_PARAM_KEY1, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(MainViewModel.MY_PARAM_KEY2, <span class="number">2</span>)</span><br><span class="line">&#125;)[MainViewModel::<span class="keyword">class</span>.java]</span><br></pre></td></tr></table></figure><h2 id="Compose获取viewModel"><a href="#Compose获取viewModel" class="headerlink" title="Compose获取viewModel"></a>Compose获取viewModel</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(string: <span class="type">String</span>, modifier: <span class="type">Modifier</span> = Modifier, vm : <span class="type">MainViewModel</span> = viewModel()</span></span>) &#123;</span><br><span class="line">    Text(</span><br><span class="line">        text = string,</span><br><span class="line">        modifier = modifier</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> VM : ViewModel&gt;</span> <span class="title">viewModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModelStoreOwner: <span class="type">ViewModelStoreOwner</span> = checkNotNull(LocalViewModelStoreOwner.current)</span></span> &#123;</span><br><span class="line">        <span class="string">&quot;No ViewModelStoreOwner was provided via LocalViewModelStoreOwner&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    key: String? = <span class="literal">null</span>,</span><br><span class="line">    factory: ViewModelProvider.Factory? = <span class="literal">null</span>,</span><br><span class="line">    extras: CreationExtras = <span class="keyword">if</span> (viewModelStoreOwner <span class="keyword">is</span> HasDefaultViewModelProviderFactory) &#123;</span><br><span class="line">        viewModelStoreOwner.defaultViewModelCreationExtras</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CreationExtras.Empty</span><br><span class="line">    &#125;</span><br><span class="line">): VM = viewModel(VM::<span class="keyword">class</span>, viewModelStoreOwner, key, factory, extras)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;MissingJvmstatic&quot;</span>)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;VM : ViewModel&gt;</span> <span class="title">viewModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modelClass: <span class="type">KClass</span>&lt;<span class="type">VM</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModelStoreOwner: <span class="type">ViewModelStoreOwner</span> = checkNotNull(LocalViewModelStoreOwner.current)</span></span> &#123;</span><br><span class="line">        <span class="string">&quot;No ViewModelStoreOwner was provided via LocalViewModelStoreOwner&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    key: String? = <span class="literal">null</span>,</span><br><span class="line">    factory: ViewModelProvider.Factory? = <span class="literal">null</span>,</span><br><span class="line">    extras: CreationExtras = <span class="keyword">if</span> (viewModelStoreOwner <span class="keyword">is</span> HasDefaultViewModelProviderFactory) &#123;</span><br><span class="line">        viewModelStoreOwner.defaultViewModelCreationExtras</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CreationExtras.Empty</span><br><span class="line">    &#125;</span><br><span class="line">): VM = viewModelStoreOwner.<span class="keyword">get</span>(modelClass, key, factory, extras)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;VM : ViewModel&gt;</span> ViewModelStoreOwner.<span class="title">get</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modelClass: <span class="type">KClass</span>&lt;<span class="type">VM</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    key: <span class="type">String</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    factory: <span class="type">ViewModelProvider</span>.<span class="type">Factory</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    extras: <span class="type">CreationExtras</span> = <span class="keyword">if</span> (this <span class="keyword">is</span> HasDefaultViewModelProviderFactory)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultViewModelCreationExtras</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CreationExtras.Empty</span><br><span class="line">    &#125;</span><br><span class="line">): VM &#123;</span><br><span class="line">    <span class="keyword">val</span> provider = <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">        ViewModelProvider.create(<span class="keyword">this</span>.viewModelStore, factory, extras)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">is</span> HasDefaultViewModelProviderFactory) &#123;</span><br><span class="line">        ViewModelProvider.create(<span class="keyword">this</span>.viewModelStore, <span class="keyword">this</span>.defaultViewModelProviderFactory, extras)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ViewModelProvider.create(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (key != <span class="literal">null</span>) &#123;</span><br><span class="line">        provider[key, modelClass]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        provider[modelClass]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">HasDefaultViewModelProviderFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the default [ViewModelProvider.Factory] that should be</span></span><br><span class="line"><span class="comment">     * used when no custom `Factory` is provided to the</span></span><br><span class="line"><span class="comment">     * [ViewModelProvider] constructors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> defaultViewModelProviderFactory: ViewModelProvider.Factory</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the default [CreationExtras] that should be passed into</span></span><br><span class="line"><span class="comment">     * [ViewModelProvider.Factory.create] when no overriding</span></span><br><span class="line"><span class="comment">     * [CreationExtras] were passed to the [ViewModelProvider] constructors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> defaultViewModelCreationExtras: CreationExtras</span><br><span class="line">        <span class="keyword">get</span>() = CreationExtras.Empty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>store</code>来自<code>LocalViewModelStoreOwner.current</code></li><li>factory和extras来自<code>HasDefaultViewModelProviderFactory</code></li></ul><h2 id="备忘单"><a href="#备忘单" class="headerlink" title="备忘单"></a>备忘单</h2><p><a href="https://developer.android.com/topic/libraries/architecture/viewmodel/viewmodel-cheatsheet?hl=zh-cn"><img src="https://developer.android.com/static/images/topic/libraries/architecture/viewmodel-apis-cheatsheet.png?hl=zh-cn"></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ViewModel简介&quot;&gt;&lt;a href=&quot;#ViewModel简介&quot; class=&quot;headerlink&quot; title=&quot;ViewModel简介&quot;&gt;&lt;/a&gt;ViewModel简介&lt;/h2&gt;&lt;p&gt;在了解ViewModel之前，我们先来了解一下MVC, MVP, MVVM的发展&lt;a href=&quot;https://www.geeksforgeeks.org/difference-between-mvc-mvp-and-mvvm-architecture-pattern-in-android/&quot;&gt;Difference Between MVC, MVP and MVVM Architecture Pattern in Android&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ViewModelStoreOwner&quot;&gt;&lt;a href=&quot;#ViewModelStoreOwner&quot; class=&quot;headerlink&quot; title=&quot;ViewModelStoreOwner&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModelStoreOwner&quot;&gt;ViewModelStoreOwner&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ViewModelStoreOwner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The owned [ViewModelStore]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; viewModelStore: ViewModelStore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;实现了&lt;code&gt;ViewModelStoreOwner&lt;/code&gt;的类会有一个&lt;code&gt;viewModelStore&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;在创建&lt;code&gt;ViewModel&lt;/code&gt;时会传递这个变量，具体传递方式在见&lt;a href=&quot;#by-viewmodels&quot;&gt;by viewModels()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实现了&lt;code&gt;ViewModelStoreOwner&lt;/code&gt;的直接子类有： &lt;a href=&quot;https://developer.android.com/reference/androidx/activity/ComponentActivity&quot;&gt;ComponentActivity&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/androidx/fragment/app/Fragment&quot;&gt;Fragment&lt;/a&gt; 和 &lt;a href=&quot;https://developer.android.com/reference/androidx/navigation/NavBackStackEntry&quot;&gt;NavBackStackEntry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ViewModelStore&quot;&gt;&lt;a href=&quot;#ViewModelStore&quot; class=&quot;headerlink&quot; title=&quot;ViewModelStore&quot;&gt;&lt;/a&gt;ViewModelStore&lt;/h2&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>MIUISupermarket移植</title>
    <link href="https://jingtianer.github.io/home/2024/07/13/misc/MIUISupermarket%E7%A7%BB%E6%A4%8D/"/>
    <id>https://jingtianer.github.io/home/2024/07/13/misc/MIUISupermarket%E7%A7%BB%E6%A4%8D/</id>
    <published>2024-07-13T03:28:00.000Z</published>
    <updated>2025-04-15T02:37:55.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VerifyError"><a href="#VerifyError" class="headerlink" title="VerifyError"></a>VerifyError</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.VerifyError: Verifier rejected <span class="keyword">class</span> <span class="title class_">com</span>.xiaomi.market.util.UIUtils: <span class="keyword">void</span> com.xiaomi.market.util.UIUtils.setStatusBarDarkMode(android.app.Activity, <span class="type">boolean</span>) failed to verify: <span class="keyword">void</span> com.xiaomi.market.util.UIUtils.setStatusBarDarkMode(android.app.Activity, <span class="type">boolean</span>): [<span class="number">0x15</span>] type Undefined unexpected as arg to <span class="keyword">if</span>-eqz/<span class="keyword">if</span>-nez (declaration of <span class="string">&#x27;com.xiaomi.market.util.UIUtils&#x27;</span> appears in /data/app/~~pH0reBrzyfvMag1T-TAoDw==/com.xiaomi.market-EzZXS_MznmhQs5NCCbvqfA==/base.apk!classes2.dex)</span><br></pre></td></tr></table></figure><ul><li>一般出现VerifyError都是因为对smali代码修改，导致无法通过验证。当前遇到过的情况有：<ul><li>插入代码时无意覆盖了下面会用到的寄存器的值，导致寄存器类型不匹配等问题。</li><li>对方法参数类型修改但未修改调用时传入的参数</li><li>传递参数时传递了类型不匹配的参数</li></ul></li></ul><h2 id="ClassNotFound"><a href="#ClassNotFound" class="headerlink" title="ClassNotFound"></a>ClassNotFound</h2><p>在xiaomi商店中使用了<code>Lmiui/os/Build</code>类，该类继承<code>Landroid/os/Build</code>，且存在于小米系统中，导致类找不到。导致运行时闪退。</p><p>对于这类小米系统中才能获取到的类，采用等价替换的方法进行修复。如在<code>Lmiui/os/Build</code>中有：</p><ul><li>IS_INTERNATIONAL_BUILD</li><li>IS_ALPHA_BUILD</li><li>IS_DEVELOPMENT_VERSION</li><li>IS_INTERNATIONAL_BUILD</li><li>getRegion()<br>等字段和方法，可以在miui中查看一下对应的值，然后手动修改smali代码，将值替换为对应的值。</li></ul><h2 id="Dex方法数限制"><a href="#Dex方法数限制" class="headerlink" title="Dex方法数限制"></a>Dex方法数限制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.jf.util.ExceptionWithContext: Error <span class="keyword">while</span> writing instruction at code offset <span class="number">0x2</span></span><br></pre></td></tr></table></figure><p>在apktools打包smali时报错，<br>对smali修改时添加了很多方法，导致一个dex内方法数超过65,535，导致打包失败。</p><p>解决方法：在smali源码目录中新建文<code>sources_dex$&#123;n&#125;</code>目录，将代码放入该位置，重新编译，即可将代码打包入新的dex文件中。</p><h2 id="应用无法安装"><a href="#应用无法安装" class="headerlink" title="应用无法安装"></a>应用无法安装</h2><p>MIUI魔改了PackageInstaller<br>当使用packageinstaller获取session写入安装包后，使用commit传入一个PendingIntent对象，用于接收应用安装结果的广播。而该通知的内容被魔改，导致收到原生系统的广播时，无法正确处理后续的逻辑，导致安装失败。</p><ul><li>中间还尝试过使用<code>ACTION_VIEW</code>或<code>ACTION_INSTALL_PACKAGE</code>startActivity启动安装器，但这两个ACTION在安卓10后被废弃了，导致没有Activity响应该Intent，无法进行安装。</li><li>使用<code>ACTION</code>安装apk时，如果apk文件在私有存储空间内，要使用FileProvider。</li></ul><h2 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h2><ul><li>无法卸载</li><li>无法暂停任务</li><li>安装后没有调用session的abandon()方法</li><li>首页顶部标题栏与系统状态栏之间存在空白部分</li></ul><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>中间还有一个MIUISettingsProvider的类找不到，我当时直接把miui中的SettingsProvider替换到PixelOS的SettingsProvider中，导手机致变砖，救砖救了好久。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;VerifyError&quot;&gt;&lt;a href=&quot;#VerifyError&quot; class=&quot;headerlink&quot; title=&quot;VerifyError&quot;&gt;&lt;/a&gt;VerifyError&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.VerifyError: Verifier rejected &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;com&lt;/span&gt;.xiaomi.market.util.UIUtils: &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; com.xiaomi.market.util.UIUtils.setStatusBarDarkMode(android.app.Activity, &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt;) failed to verify: &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; com.xiaomi.market.util.UIUtils.setStatusBarDarkMode(android.app.Activity, &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt;): [&lt;span class=&quot;number&quot;&gt;0x15&lt;/span&gt;] type Undefined unexpected as arg to &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;-eqz/&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;-nez (declaration of &lt;span class=&quot;string&quot;&gt;&amp;#x27;com.xiaomi.market.util.UIUtils&amp;#x27;&lt;/span&gt; appears in /data/app/~~pH0reBrzyfvMag1T-TAoDw==/com.xiaomi.market-EzZXS_MznmhQs5NCCbvqfA==/base.apk!classes2.dex)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;一般出现VerifyError都是因为对smali代码修改，导致无法通过验证。当前遇到过的情况有：&lt;ul&gt;
&lt;li&gt;插入代码时无意覆盖了下面会用到的寄存器的值，导致寄存器类型不匹配等问题。&lt;/li&gt;
&lt;li&gt;对方法参数类型修改但未修改调用时传入的参数&lt;/li&gt;
&lt;li&gt;传递参数时传递了类型不匹配的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ClassNotFound&quot;&gt;&lt;a href=&quot;#ClassNotFound&quot; class=&quot;headerlink&quot; title=&quot;ClassNotFound&quot;&gt;&lt;/a&gt;ClassNotFound&lt;/h2&gt;&lt;p&gt;在xiaomi商店中使用了&lt;code&gt;Lmiui/os/Build&lt;/code&gt;类，该类继承&lt;code&gt;Landroid/os/Build&lt;/code&gt;，且存在于小米系统中，导致类找不到。导致运行时闪退。&lt;/p&gt;
&lt;p&gt;对于这类小米系统中才能获取到的类，采用等价替换的方法进行修复。如在&lt;code&gt;Lmiui/os/Build&lt;/code&gt;中有：&lt;/p&gt;</summary>
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="hexo" scheme="https://jingtianer.github.io/home/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>基础01-Context</title>
    <link href="https://jingtianer.github.io/home/2024/07/01/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8001-Context/"/>
    <id>https://jingtianer.github.io/home/2024/07/01/Android%E9%AB%98%E7%BA%A7/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%9F%BA%E7%A1%8001-Context/</id>
    <published>2024-07-01T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>Context类<ul><li>注解<ul><li>用于标注文件、SharedPreferences、数据库的打开方式的注解</li><li>用于标注bindService时，service的flags的注解</li><li>用于标注registerReceiver时，receiver的flags的注解</li><li>用于标注getService时，servicesName的注解</li><li>用于标注createPackageContext、createPackageContextAsUser、createContextAsUser、createApplicationContext时的flags的注解</li></ul></li><li>常量定义<ul><li>对应上面注解中限制的常量</li><li>WAL</li></ul></li></ul></li></ul><h2 id="Context类"><a href="#Context类" class="headerlink" title="Context类"></a>Context类</h2><p>Context是抽象类，具体实现在ContextImpl，Application，Service，Activity都直接或间接继承自ContextWrapper，ContextWrapper通过代理的方式调用真正的ContextImpl。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;MODE_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        MODE_PRIVATE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_READABLE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_WRITEABLE,</span></span><br><span class="line"><span class="meta">        MODE_APPEND,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FileMode &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;MODE_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        MODE_PRIVATE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_READABLE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_WRITEABLE,</span></span><br><span class="line"><span class="meta">        MODE_MULTI_PROCESS,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreferencesMode &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;MODE_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        MODE_PRIVATE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_READABLE,</span></span><br><span class="line"><span class="meta">        MODE_WORLD_WRITEABLE,</span></span><br><span class="line"><span class="meta">        MODE_ENABLE_WRITE_AHEAD_LOGGING,</span></span><br><span class="line"><span class="meta">        MODE_NO_LOCALIZED_COLLATORS,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DatabaseMode &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;BIND_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        BIND_AUTO_CREATE,</span></span><br><span class="line"><span class="meta">        BIND_DEBUG_UNBIND,</span></span><br><span class="line"><span class="meta">        BIND_NOT_FOREGROUND,</span></span><br><span class="line"><span class="meta">        BIND_ABOVE_CLIENT,</span></span><br><span class="line"><span class="meta">        BIND_ALLOW_OOM_MANAGEMENT,</span></span><br><span class="line"><span class="meta">        BIND_WAIVE_PRIORITY,</span></span><br><span class="line"><span class="meta">        BIND_IMPORTANT,</span></span><br><span class="line"><span class="meta">        BIND_ADJUST_WITH_ACTIVITY,</span></span><br><span class="line"><span class="meta">        BIND_NOT_PERCEPTIBLE,</span></span><br><span class="line"><span class="meta">        BIND_INCLUDE_CAPABILITIES</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindServiceFlags &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;RECEIVER_VISIBLE_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        RECEIVER_VISIBLE_TO_INSTANT_APPS</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RegisterReceiverFlags &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@StringDef(suffix = &#123; &quot;_SERVICE&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        POWER_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: POWER_STATS_SERVICE,</span></span><br><span class="line"><span class="meta">        WINDOW_SERVICE,</span></span><br><span class="line"><span class="meta">        LAYOUT_INFLATER_SERVICE,</span></span><br><span class="line"><span class="meta">        ACCOUNT_SERVICE,</span></span><br><span class="line"><span class="meta">        ACTIVITY_SERVICE,</span></span><br><span class="line"><span class="meta">        ALARM_SERVICE,</span></span><br><span class="line"><span class="meta">        NOTIFICATION_SERVICE,</span></span><br><span class="line"><span class="meta">        ACCESSIBILITY_SERVICE,</span></span><br><span class="line"><span class="meta">        CAPTIONING_SERVICE,</span></span><br><span class="line"><span class="meta">        KEYGUARD_SERVICE,</span></span><br><span class="line"><span class="meta">        LOCATION_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: COUNTRY_DETECTOR,</span></span><br><span class="line"><span class="meta">        SEARCH_SERVICE,</span></span><br><span class="line"><span class="meta">        SENSOR_SERVICE,</span></span><br><span class="line"><span class="meta">        SENSOR_PRIVACY_SERVICE,</span></span><br><span class="line"><span class="meta">        STORAGE_SERVICE,</span></span><br><span class="line"><span class="meta">        STORAGE_STATS_SERVICE,</span></span><br><span class="line"><span class="meta">        WALLPAPER_SERVICE,</span></span><br><span class="line"><span class="meta">        TIME_ZONE_RULES_MANAGER_SERVICE,</span></span><br><span class="line"><span class="meta">        VIBRATOR_MANAGER_SERVICE,</span></span><br><span class="line"><span class="meta">        VIBRATOR_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: STATUS_BAR_SERVICE,</span></span><br><span class="line"><span class="meta">        CONNECTIVITY_SERVICE,</span></span><br><span class="line"><span class="meta">        PAC_PROXY_SERVICE,</span></span><br><span class="line"><span class="meta">        VCN_MANAGEMENT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: IP_MEMORY_STORE_SERVICE,</span></span><br><span class="line"><span class="meta">        IPSEC_SERVICE,</span></span><br><span class="line"><span class="meta">        VPN_MANAGEMENT_SERVICE,</span></span><br><span class="line"><span class="meta">        TEST_NETWORK_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: UPDATE_LOCK_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: NETWORKMANAGEMENT_SERVICE,</span></span><br><span class="line"><span class="meta">        NETWORK_STATS_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: NETWORK_POLICY_SERVICE,</span></span><br><span class="line"><span class="meta">        WIFI_SERVICE,</span></span><br><span class="line"><span class="meta">        WIFI_AWARE_SERVICE,</span></span><br><span class="line"><span class="meta">        WIFI_P2P_SERVICE,</span></span><br><span class="line"><span class="meta">        WIFI_SCANNING_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: LOWPAN_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: WIFI_RTT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: ETHERNET_SERVICE,</span></span><br><span class="line"><span class="meta">        WIFI_RTT_RANGING_SERVICE,</span></span><br><span class="line"><span class="meta">        NSD_SERVICE,</span></span><br><span class="line"><span class="meta">        AUDIO_SERVICE,</span></span><br><span class="line"><span class="meta">        AUTH_SERVICE,</span></span><br><span class="line"><span class="meta">        FINGERPRINT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: FACE_SERVICE,</span></span><br><span class="line"><span class="meta">        BIOMETRIC_SERVICE,</span></span><br><span class="line"><span class="meta">        MEDIA_ROUTER_SERVICE,</span></span><br><span class="line"><span class="meta">        TELEPHONY_SERVICE,</span></span><br><span class="line"><span class="meta">        TELEPHONY_SUBSCRIPTION_SERVICE,</span></span><br><span class="line"><span class="meta">        CARRIER_CONFIG_SERVICE,</span></span><br><span class="line"><span class="meta">        EUICC_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: MMS_SERVICE,</span></span><br><span class="line"><span class="meta">        TELECOM_SERVICE,</span></span><br><span class="line"><span class="meta">        CLIPBOARD_SERVICE,</span></span><br><span class="line"><span class="meta">        INPUT_METHOD_SERVICE,</span></span><br><span class="line"><span class="meta">        TEXT_SERVICES_MANAGER_SERVICE,</span></span><br><span class="line"><span class="meta">        TEXT_CLASSIFICATION_SERVICE,</span></span><br><span class="line"><span class="meta">        APPWIDGET_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: VOICE_INTERACTION_MANAGER_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: BACKUP_SERVICE,</span></span><br><span class="line"><span class="meta">        REBOOT_READINESS_SERVICE,</span></span><br><span class="line"><span class="meta">        ROLLBACK_SERVICE,</span></span><br><span class="line"><span class="meta">        DROPBOX_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: DEVICE_IDLE_CONTROLLER,</span></span><br><span class="line"><span class="meta">        //@hide: POWER_WHITELIST_MANAGER,</span></span><br><span class="line"><span class="meta">        DEVICE_POLICY_SERVICE,</span></span><br><span class="line"><span class="meta">        UI_MODE_SERVICE,</span></span><br><span class="line"><span class="meta">        DOWNLOAD_SERVICE,</span></span><br><span class="line"><span class="meta">        NFC_SERVICE,</span></span><br><span class="line"><span class="meta">        BLUETOOTH_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: SIP_SERVICE,</span></span><br><span class="line"><span class="meta">        USB_SERVICE,</span></span><br><span class="line"><span class="meta">        LAUNCHER_APPS_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: SERIAL_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: HDMI_CONTROL_SERVICE,</span></span><br><span class="line"><span class="meta">        INPUT_SERVICE,</span></span><br><span class="line"><span class="meta">        DISPLAY_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide COLOR_DISPLAY_SERVICE,</span></span><br><span class="line"><span class="meta">        USER_SERVICE,</span></span><br><span class="line"><span class="meta">        RESTRICTIONS_SERVICE,</span></span><br><span class="line"><span class="meta">        APP_OPS_SERVICE,</span></span><br><span class="line"><span class="meta">        ROLE_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide ROLE_CONTROLLER_SERVICE,</span></span><br><span class="line"><span class="meta">        CAMERA_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: PLATFORM_COMPAT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: PLATFORM_COMPAT_NATIVE_SERVICE,</span></span><br><span class="line"><span class="meta">        PRINT_SERVICE,</span></span><br><span class="line"><span class="meta">        CONSUMER_IR_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: TRUST_SERVICE,</span></span><br><span class="line"><span class="meta">        TV_INPUT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: TV_TUNER_RESOURCE_MGR_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: NETWORK_SCORE_SERVICE,</span></span><br><span class="line"><span class="meta">        USAGE_STATS_SERVICE,</span></span><br><span class="line"><span class="meta">        MEDIA_SESSION_SERVICE,</span></span><br><span class="line"><span class="meta">        MEDIA_COMMUNICATION_SERVICE,</span></span><br><span class="line"><span class="meta">        BATTERY_SERVICE,</span></span><br><span class="line"><span class="meta">        JOB_SCHEDULER_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: PERSISTENT_DATA_BLOCK_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: OEM_LOCK_SERVICE,</span></span><br><span class="line"><span class="meta">        MEDIA_PROJECTION_SERVICE,</span></span><br><span class="line"><span class="meta">        MIDI_SERVICE,</span></span><br><span class="line"><span class="meta">        RADIO_SERVICE,</span></span><br><span class="line"><span class="meta">        HARDWARE_PROPERTIES_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: SOUND_TRIGGER_SERVICE,</span></span><br><span class="line"><span class="meta">        SHORTCUT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: CONTEXTHUB_SERVICE,</span></span><br><span class="line"><span class="meta">        SYSTEM_HEALTH_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: INCIDENT_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: INCIDENT_COMPANION_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: STATS_COMPANION_SERVICE,</span></span><br><span class="line"><span class="meta">        COMPANION_DEVICE_SERVICE,</span></span><br><span class="line"><span class="meta">        CROSS_PROFILE_APPS_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: SYSTEM_UPDATE_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: TIME_DETECTOR_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: TIME_ZONE_DETECTOR_SERVICE,</span></span><br><span class="line"><span class="meta">        PERMISSION_SERVICE,</span></span><br><span class="line"><span class="meta">        LIGHTS_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: PEOPLE_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: DEVICE_STATE_SERVICE,</span></span><br><span class="line"><span class="meta">        //@hide: SPEECH_RECOGNITION_SERVICE,</span></span><br><span class="line"><span class="meta">        UWB_SERVICE,</span></span><br><span class="line"><span class="meta">        MEDIA_METRICS_SERVICE,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ServiceName &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@IntDef(flag = true, prefix = &#123; &quot;CONTEXT_&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">        CONTEXT_INCLUDE_CODE,</span></span><br><span class="line"><span class="meta">        CONTEXT_IGNORE_SECURITY,</span></span><br><span class="line"><span class="meta">        CONTEXT_RESTRICTED,</span></span><br><span class="line"><span class="meta">        CONTEXT_DEVICE_PROTECTED_STORAGE,</span></span><br><span class="line"><span class="meta">        CONTEXT_CREDENTIAL_PROTECTED_STORAGE,</span></span><br><span class="line"><span class="meta">        CONTEXT_REGISTER_PACKAGE,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CreatePackageOptions &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p>文件创建、SP、数据库共享的的flags</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认值，只能对当前app(相同user-id的进程)可见</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_PRIVATE</span> <span class="operator">=</span> <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许其他app读，已弃用，强制使用会抛出SecurityException</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_WORLD_READABLE</span> <span class="operator">=</span> <span class="number">0x0001</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许其他app写，已弃用，强制使用会抛出SecurityException</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_WORLD_WRITEABLE</span> <span class="operator">=</span> <span class="number">0x0002</span>;</span><br></pre></td></tr></table></figure><p>文件创建的flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append，而不是覆盖</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_APPEND</span> <span class="operator">=</span> <span class="number">0x8000</span>;</span><br></pre></td></tr></table></figure><p>SP加载的flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不建议使用，没有进程同步的机制</span></span><br><span class="line"><span class="comment">// 为了一个app有多个进程时使用</span></span><br><span class="line"><span class="comment">// 跨进程数据管理方法可以用ContentProvider</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_MULTI_PROCESS</span> <span class="operator">=</span> <span class="number">0x0004</span>;</span><br></pre></td></tr></table></figure><p>数据库的flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// write-ahead logging, WAL</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * According To: https://www.w3cschool.cn/doc_postgresql_9_4/postgresql_9_4-wal-intro.html</span></span><br><span class="line"><span class="comment"> * Briefly, WAL&#x27;s central concept is that changes to data files (where tables and indexes reside) </span></span><br><span class="line"><span class="comment"> * must be written only after those changes have been logged, </span></span><br><span class="line"><span class="comment"> * that is, after log records describing the changes have been flushed to permanent storage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 在对数据进行写操作前，对写操作的log要先写入到持久化存储设备</span></span><br><span class="line"><span class="comment">// 启用WAL</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_ENABLE_WRITE_AHEAD_LOGGING</span> <span class="operator">=</span> <span class="number">0x0008</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用本地化的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MODE_NO_LOCALIZED_COLLATORS</span> <span class="operator">=</span> <span class="number">0x0010</span>;</span><br></pre></td></tr></table></figure><ul><li>bindService的flags</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that prior to &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH&#125;,</span></span><br><span class="line"><span class="comment"> * not supplying this flag would also impact how important the system</span></span><br><span class="line"><span class="comment"> * consider&#x27;s the target service&#x27;s process to be.  When set, the only way</span></span><br><span class="line"><span class="comment"> * for it to be raised was by binding from a service in which case it will</span></span><br><span class="line"><span class="comment"> * only be important when that activity is in the foreground.  Now to</span></span><br><span class="line"><span class="comment"> * achieve this behavior you must explicitly supply the new flag</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #BIND_ADJUST_WITH_ACTIVITY&#125;.  For compatibility, old applications</span></span><br><span class="line"><span class="comment"> * that don&#x27;t specify &#123;<span class="doctag">@link</span> #BIND_AUTO_CREATE&#125; will automatically have</span></span><br><span class="line"><span class="comment"> * the flags &#123;<span class="doctag">@link</span> #BIND_WAIVE_PRIORITY&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #BIND_ADJUST_WITH_ACTIVITY&#125; set for them in order to achieve</span></span><br><span class="line"><span class="comment"> * the same result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 自动创建service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_AUTO_CREATE</span> <span class="operator">=</span> <span class="number">0x0001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// debug，打印调用栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_DEBUG_UNBIND</span> <span class="operator">=</span> <span class="number">0x0002</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许将service进程提升到前台，绑定时在前台而目标为后台时有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_NOT_FOREGROUND</span> <span class="operator">=</span> <span class="number">0x0004</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service的重要程度高于客户端，OOM时有限杀掉app而不是service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ABOVE_CLIENT</span> <span class="operator">=</span> <span class="number">0x0008</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allow the process hosting the bound</span></span><br><span class="line"><span class="comment"> * service to go through its normal memory management.  It will be</span></span><br><span class="line"><span class="comment"> * treated more like a running service, allowing the system to</span></span><br><span class="line"><span class="comment"> * (temporarily) expunge the process if low on memory or for some other</span></span><br><span class="line"><span class="comment"> * whim it may have, and being more aggressive about making it a candidate</span></span><br><span class="line"><span class="comment"> * to be killed (and restarted) if running for a long time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALLOW_OOM_MANAGEMENT</span> <span class="operator">=</span> <span class="number">0x0010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: don&#x27;t impact the scheduling or</span></span><br><span class="line"><span class="comment"> * memory management priority of the target service&#x27;s hosting process.</span></span><br><span class="line"><span class="comment"> * Allows the service&#x27;s process to be managed on the background LRU list</span></span><br><span class="line"><span class="comment"> * just like a regular application process in the background.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_WAIVE_PRIORITY</span> <span class="operator">=</span> <span class="number">0x0020</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: this service is very important to</span></span><br><span class="line"><span class="comment"> * the client, so should be brought to the foreground process level</span></span><br><span class="line"><span class="comment"> * when the client is.  Normally a process can only be raised to the</span></span><br><span class="line"><span class="comment"> * visibility level by a client, even if that client is in the foreground.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_IMPORTANT</span> <span class="operator">=</span> <span class="number">0x0040</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: If binding from an activity, allow the</span></span><br><span class="line"><span class="comment"> * target service&#x27;s process importance to be raised based on whether the</span></span><br><span class="line"><span class="comment"> * activity is visible to the user, regardless whether another flag is</span></span><br><span class="line"><span class="comment"> * used to reduce the amount that the client process&#x27;s overall importance</span></span><br><span class="line"><span class="comment"> * is used to impact it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ADJUST_WITH_ACTIVITY</span> <span class="operator">=</span> <span class="number">0x0080</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: If binding from an app that is visible or user-perceptible,</span></span><br><span class="line"><span class="comment"> * lower the target service&#x27;s importance to below the perceptible level. This allows</span></span><br><span class="line"><span class="comment"> * the system to (temporarily) expunge the bound process from memory to make room for more</span></span><br><span class="line"><span class="comment"> * important user-perceptible processes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_NOT_PERCEPTIBLE</span> <span class="operator">=</span> <span class="number">0x00000100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: If binding from an app that has specific capabilities</span></span><br><span class="line"><span class="comment"> * due to its foreground state such as an activity or foreground service, then this flag will</span></span><br><span class="line"><span class="comment"> * allow the bound app to get the same capabilities, as long as it has the required permissions</span></span><br><span class="line"><span class="comment"> * as well.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If binding from a top app and its target SDK version is at or above</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#R&#125;, the app needs to</span></span><br><span class="line"><span class="comment"> * explicitly use BIND_INCLUDE_CAPABILITIES flag to pass all capabilities to the service so the</span></span><br><span class="line"><span class="comment"> * other app can have while-use-use access such as location, camera, microphone from background.</span></span><br><span class="line"><span class="comment"> * If binding from a top app and its target SDK version is below</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#R&#125;, BIND_INCLUDE_CAPABILITIES is implicit.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_INCLUDE_CAPABILITIES</span> <span class="operator">=</span> <span class="number">0x000001000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********    Public flags above this line ***********/</span></span><br><span class="line"><span class="comment">/***********    Hidden flags below this line ***********/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: This flag is only intended to be used by the system to</span></span><br><span class="line"><span class="comment"> * indicate that a service binding is not considered as real package component usage and should</span></span><br><span class="line"><span class="comment"> * not generate a &#123;<span class="doctag">@link</span> android.app.usage.UsageEvents.Event#APP_COMPONENT_USED&#125; event in usage</span></span><br><span class="line"><span class="comment"> * stats.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_NOT_APP_COMPONENT_USAGE</span> <span class="operator">=</span> <span class="number">0x00008000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allow the process hosting the target service to be treated</span></span><br><span class="line"><span class="comment"> * as if it&#x27;s as important as a perceptible app to the user and avoid the oom killer killing</span></span><br><span class="line"><span class="comment"> * this process in low memory situations until there aren&#x27;t any other processes left but the</span></span><br><span class="line"><span class="comment"> * ones which are user-perceptible.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALMOST_PERCEPTIBLE</span> <span class="operator">=</span> <span class="number">0x000010000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allow the process hosting the target service to gain</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ActivityManager#PROCESS_CAPABILITY_NETWORK&#125;, which allows it be able</span></span><br><span class="line"><span class="comment"> * to access network regardless of any power saving restrictions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_BYPASS_POWER_NETWORK_RESTRICTIONS</span> <span class="operator">=</span> <span class="number">0x00020000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do not use. This flag is no longer needed nor used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALLOW_FOREGROUND_SERVICE_STARTS_FROM_BACKGROUND</span> <span class="operator">=</span> <span class="number">0x00040000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: This flag is intended to be used only by the system to adjust</span></span><br><span class="line"><span class="comment"> * the scheduling policy for IMEs (and any other out-of-process user-visible components that</span></span><br><span class="line"><span class="comment"> * work closely with the top app) so that UI hosted in such services can have the same</span></span><br><span class="line"><span class="comment"> * scheduling policy (e.g. SCHED_FIFO when it is enabled and TOP_APP_PRIORITY_BOOST otherwise)</span></span><br><span class="line"><span class="comment"> * as the actual top-app.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_SCHEDULE_LIKE_TOP_APP</span> <span class="operator">=</span> <span class="number">0x00080000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allow background activity starts from the bound service&#x27;s</span></span><br><span class="line"><span class="comment"> * process.</span></span><br><span class="line"><span class="comment"> * This flag is only respected if the caller is holding</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.Manifest.permission#START_ACTIVITIES_FROM_BACKGROUND&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALLOW_BACKGROUND_ACTIVITY_STARTS</span> <span class="operator">=</span> <span class="number">0x00100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: the service being bound to represents a</span></span><br><span class="line"><span class="comment"> * protected system component, so must have association restrictions applied to it.</span></span><br><span class="line"><span class="comment"> * That is, a system config must have one or more allow-association tags limiting</span></span><br><span class="line"><span class="comment"> * which packages it can interact with.  If it does not have any such association</span></span><br><span class="line"><span class="comment"> * restrictions, a default empty set will be created.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_RESTRICT_ASSOCIATIONS</span> <span class="operator">=</span> <span class="number">0x00200000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allows binding to a service provided</span></span><br><span class="line"><span class="comment"> * by an instant app. Note that the caller may not have access to the instant</span></span><br><span class="line"><span class="comment"> * app providing the service which is a violation of the instant app sandbox.</span></span><br><span class="line"><span class="comment"> * This flag is intended ONLY for development/testing and should be used with</span></span><br><span class="line"><span class="comment"> * great care. Only the system is allowed to use this flag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALLOW_INSTANT</span> <span class="operator">=</span> <span class="number">0x00400000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: like &#123;<span class="doctag">@link</span> #BIND_NOT_FOREGROUND&#125;, but puts it</span></span><br><span class="line"><span class="comment"> * up in to the important background state (instead of transient).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_IMPORTANT_BACKGROUND</span> <span class="operator">=</span> <span class="number">0x00800000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: allows application hosting service to manage whitelists</span></span><br><span class="line"><span class="comment"> * such as temporary allowing a &#123;<span class="doctag">@code</span> PendingIntent&#125; to bypass Power Save mode.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_ALLOW_WHITELIST_MANAGEMENT</span> <span class="operator">=</span> <span class="number">0x01000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: Like &#123;<span class="doctag">@link</span> #BIND_FOREGROUND_SERVICE&#125;,</span></span><br><span class="line"><span class="comment"> * but only applies while the device is awake.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_FOREGROUND_SERVICE_WHILE_AWAKE</span> <span class="operator">=</span> <span class="number">0x02000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: For only the case where the binding</span></span><br><span class="line"><span class="comment"> * is coming from the system, set the process state to FOREGROUND_SERVICE</span></span><br><span class="line"><span class="comment"> * instead of the normal maximum of IMPORTANT_FOREGROUND.  That is, this is</span></span><br><span class="line"><span class="comment"> * saying that the process shouldn&#x27;t participate in the normal power reduction</span></span><br><span class="line"><span class="comment"> * modes (removing network access etc).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_FOREGROUND_SERVICE</span> <span class="operator">=</span> <span class="number">0x04000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: Treat the binding as hosting</span></span><br><span class="line"><span class="comment"> * an activity, an unbinding as the activity going in the background.</span></span><br><span class="line"><span class="comment"> * That is, when unbinding, the process when empty will go on the activity</span></span><br><span class="line"><span class="comment"> * LRU list instead of the regular one, keeping it around more aggressively</span></span><br><span class="line"><span class="comment"> * than it otherwise would be.  This is intended for use with IMEs to try</span></span><br><span class="line"><span class="comment"> * to keep IME processes around for faster keyboard switching.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_TREAT_LIKE_ACTIVITY</span> <span class="operator">=</span> <span class="number">0x08000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> An idea that is not yet implemented.</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: If binding from an activity, consider</span></span><br><span class="line"><span class="comment"> * this service to be visible like the binding activity is.  That is,</span></span><br><span class="line"><span class="comment"> * it will be treated as something more important to keep around than</span></span><br><span class="line"><span class="comment"> * invisible background activities.  This will impact the number of</span></span><br><span class="line"><span class="comment"> * recent activities the user can switch between without having them</span></span><br><span class="line"><span class="comment"> * restart.  There is no guarantee this will be respected, as the system</span></span><br><span class="line"><span class="comment"> * tries to balance such requests from one app vs. the importance of</span></span><br><span class="line"><span class="comment"> * keeping other apps around.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_VISIBLE</span> <span class="operator">=</span> <span class="number">0x10000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: Consider this binding to be causing the target</span></span><br><span class="line"><span class="comment"> * process to be showing UI, so it will be do a UI_HIDDEN memory trim when it goes</span></span><br><span class="line"><span class="comment"> * away.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_SHOWING_UI</span> <span class="operator">=</span> <span class="number">0x20000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: Don&#x27;t consider the bound service to be</span></span><br><span class="line"><span class="comment"> * visible, even if the caller is visible.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_NOT_VISIBLE</span> <span class="operator">=</span> <span class="number">0x40000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #bindService&#125;: The service being bound is an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.R.attr#isolatedProcess isolated&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.R.attr#externalService external&#125; service.  This binds the service into the</span></span><br><span class="line"><span class="comment"> * calling application&#x27;s package, rather than the package in which the service is declared.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When using this flag, the code for the service being bound will execute under the calling</span></span><br><span class="line"><span class="comment"> * application&#x27;s package name and user ID.  Because the service must be an isolated process,</span></span><br><span class="line"><span class="comment"> * it will not have direct access to the application&#x27;s data, though.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The purpose of this flag is to allow applications to provide services that are attributed</span></span><br><span class="line"><span class="comment"> * to the app using the service, rather than the application providing the service.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_EXTERNAL_SERVICE</span> <span class="operator">=</span> <span class="number">0x80000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * These bind flags reduce the strength of the binding such that we shouldn&#x27;t</span></span><br><span class="line"><span class="comment"> * consider it as pulling the process up to the level of the one that is bound to it.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIND_REDUCTION_FLAGS</span> <span class="operator">=</span></span><br><span class="line">        Context.BIND_ALLOW_OOM_MANAGEMENT | Context.BIND_WAIVE_PRIORITY</span><br><span class="line">                | Context.BIND_NOT_PERCEPTIBLE | Context.BIND_NOT_VISIBLE;</span><br></pre></td></tr></table></figure><p>registerReceiver的flags</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag for &#123;<span class="doctag">@link</span> #registerReceiver&#125;: The receiver can receive broadcasts from Instant Apps.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 是否可以被Instant Apps接收到（google的小程序吧）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RECEIVER_VISIBLE_TO_INSTANT_APPS</span> <span class="operator">=</span> <span class="number">0x1</span>;</span><br></pre></td></tr></table></figure><p>getService的serviceName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="部分get方法"><a href="#部分get方法" class="headerlink" title="部分get方法"></a>部分get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> AssetManager <span class="title function_">getAssets</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Resources <span class="title function_">getResources</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> PackageManager <span class="title function_">getPackageManager</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ContentResolver <span class="title function_">getContentResolver</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Looper <span class="title function_">getMainLooper</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Context <span class="title function_">getApplicationContext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Executor <span class="title function_">getMainExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// This is pretty inefficient, which is why ContextImpl overrides it</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HandlerExecutor</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>(getMainLooper()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getPackageName</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getBasePackageName</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getOpPackageName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Not implemented. Must override in a subclass.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ApplicationInfo <span class="title function_">getApplicationInfo</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getPackageResourcePath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 返回应用包的完整路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getPackageCodePath</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="systemService"><a href="#systemService" class="headerlink" title="systemService"></a>systemService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@Nullable</span> String <span class="title function_">getSystemServiceName</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;?&gt; serviceClass)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@Nullable</span> Object <span class="title function_">getSystemService</span><span class="params">(<span class="meta">@ServiceName</span> <span class="meta">@NonNull</span> String name)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> &lt;T&gt; T <span class="title function_">getSystemService</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; serviceClass)</span> &#123; <span class="comment">// 也可以通过Class对象获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> getSystemServiceName(serviceClass);</span><br><span class="line">        <span class="keyword">return</span> serviceName != <span class="literal">null</span> ? (T)getSystemService(serviceName) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View相关"><a href="#View相关" class="headerlink" title="View相关"></a>View相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回进程中唯一的View ID</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNextAutofillId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sLastAutofillId == View.LAST_APP_AUTOFILL_ID - <span class="number">1</span>) &#123;</span><br><span class="line">                sLastAutofillId = View.NO_ID;</span><br><span class="line">        &#125;</span><br><span class="line">        sLastAutofillId++;</span><br><span class="line">        <span class="keyword">return</span> sLastAutofillId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会有并发问题吗？？</span></span><br></pre></td></tr></table></figure><h3 id="ComponentCallbacks"><a href="#ComponentCallbacks" class="headerlink" title="ComponentCallbacks"></a>ComponentCallbacks</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerComponentCallbacks</span><span class="params">(ComponentCallbacks callback)</span> &#123;</span><br><span class="line">        getApplicationContext().registerComponentCallbacks(callback);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unregisterComponentCallbacks</span><span class="params">(ComponentCallbacks callback)</span> &#123;</span><br><span class="line">        getApplicationContext().unregisterComponentCallbacks(callback);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Callback包括:</span></span><br><span class="line"><span class="comment">// onConfigurationChanged</span></span><br><span class="line"><span class="comment">// onLowMemory: 调用时机没有明确定义，一般在内存不足，所有后台进程被kill之后，processes hosting service和前台用户界面被kill之前。</span></span><br></pre></td></tr></table></figure><h3 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> CharSequence <span class="title function_">getText</span><span class="params">(<span class="meta">@StringRes</span> <span class="type">int</span> resId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getText(resId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getString</span><span class="params">(<span class="meta">@StringRes</span> <span class="type">int</span> resId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getString(resId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getString</span><span class="params">(<span class="meta">@StringRes</span> <span class="type">int</span> resId, Object... formatArgs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getString(resId, formatArgs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ColorInt</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getColor</span><span class="params">(<span class="meta">@ColorRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getColor(id, getTheme());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Drawable <span class="title function_">getDrawable</span><span class="params">(<span class="meta">@DrawableRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getDrawable(id, getTheme());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ColorStateList <span class="title function_">getColorStateList</span><span class="params">(<span class="meta">@ColorRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources().getColorStateList(id, getTheme());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setTheme</span><span class="params">(<span class="meta">@StyleRes</span> <span class="type">int</span> resid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> Needed for some internal implementation...  not public because</span></span><br><span class="line"><span class="comment"> * you can&#x27;t assume this actually means anything. */</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getThemeResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(deepExport = <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Resources.Theme <span class="title function_">getTheme</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TypedArray <span class="title function_">obtainStyledAttributes</span><span class="params">(<span class="meta">@NonNull</span> <span class="meta">@StyleableRes</span> <span class="type">int</span>[] attrs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getTheme().obtainStyledAttributes(attrs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TypedArray <span class="title function_">obtainStyledAttributes</span><span class="params">(<span class="meta">@StyleRes</span> <span class="type">int</span> resid,</span></span><br><span class="line"><span class="params">        <span class="meta">@NonNull</span> <span class="meta">@StyleableRes</span> <span class="type">int</span>[] attrs)</span> <span class="keyword">throws</span> Resources.NotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> getTheme().obtainStyledAttributes(resid, attrs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TypedArray <span class="title function_">obtainStyledAttributes</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> AttributeSet set, <span class="meta">@NonNull</span> <span class="meta">@StyleableRes</span> <span class="type">int</span>[] attrs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getTheme().obtainStyledAttributes(set, attrs, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TypedArray <span class="title function_">obtainStyledAttributes</span><span class="params">(<span class="meta">@Nullable</span> AttributeSet set,</span></span><br><span class="line"><span class="params">        <span class="meta">@NonNull</span> <span class="meta">@StyleableRes</span> <span class="type">int</span>[] attrs, <span class="meta">@AttrRes</span> <span class="type">int</span> defStyleAttr,</span></span><br><span class="line"><span class="params">        <span class="meta">@StyleRes</span> <span class="type">int</span> defStyleRes)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getTheme().obtainStyledAttributes(</span><br><span class="line">        set, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SP"><a href="#SP" class="headerlink" title="SP"></a>SP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> SharedPreferences <span class="title function_">getSharedPreferences</span><span class="params">(String name, <span class="meta">@PreferencesMode</span> <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;HiddenAbstractMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> SharedPreferences <span class="title function_">getSharedPreferences</span><span class="params">(File file, <span class="meta">@PreferencesMode</span> <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">moveSharedPreferencesFrom</span><span class="params">(Context sourceContext, String name)</span>; <span class="comment">// 将一个context中的sp移动到当前context中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">deleteSharedPreferences</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开私有文件的流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> FileInputStream <span class="title function_">openFileInput</span><span class="params">(String name)</span></span><br><span class="line">        <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="comment">// 读写该文件不需要额外的权限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> FileOutputStream <span class="title function_">openFileOutput</span><span class="params">(String name, <span class="meta">@FileMode</span> <span class="type">int</span> mode)</span></span><br><span class="line">        <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="comment">// 返回，是否成功删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">deleteFile</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回文件的绝对路径（通过openFileOutput创建的）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getFileStreamPath</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回sp的路径</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;HiddenAbstractMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getSharedPreferencesPath</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回app私有文件的存储位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getDataDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回openFileOutput创建文件的目录</span></span><br><span class="line"><span class="comment">// 卸载后会删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getFilesDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@TestApi</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title function_">getCrateDir</span><span class="params">(<span class="meta">@NonNull</span> String crateId)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Not implemented. Must override in a subclass.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回目录，该目录下的文件不会被备份</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getNoBackupFilesDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回共享存储目录</span></span><br><span class="line"><span class="comment">// 每个用户都有独立的共享存储目录</span></span><br><span class="line"><span class="comment">// 应用卸载后也会删除，属于该app</span></span><br><span class="line"><span class="comment">// android.os.Environment#getExternalStoragePublicDirectory 提供的目录是所有app共享的，</span></span><br><span class="line"><span class="comment">// 其他应用如果有权限WRITE_EXTERNAL_STORAGE，也可以对文件进行读写</span></span><br><span class="line"><span class="comment">// MediaScanner</span></span><br><span class="line"><span class="comment">// These files are internal to the application, and not typically visible to the user as media.</span></span><br><span class="line"><span class="comment">// 参数是目录类型，android.os.Environment#DIRECTORY_XXX</span></span><br><span class="line"><span class="comment">// 返回的目录会被自动创建</span></span><br><span class="line"><span class="comment">// 不要使用绝对路径，文件所在位置可能会改变</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getExternalFilesDir</span><span class="params">(<span class="meta">@Nullable</span> String type)</span>;</span><br><span class="line"><span class="comment">// 类似于getExternalFilesDir，返回所有shared/external storage devices的绝对路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File[] getExternalFilesDirs(String type);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安卓N之前，需要权限READ_EXTERNAL_STORAGE</span></span><br><span class="line"><span class="comment">// 返回OBB文件的位置，如果没有OBB，返回目录可能不存在</span></span><br><span class="line"><span class="comment">// OBB: 安卓游戏通用数据包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getObbDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File[] getObbDirs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回缓存目录</span></span><br><span class="line"><span class="comment">// 系统会在需要时删除该目录下的文件</span></span><br><span class="line"><span class="comment">// 通过StorageManager#getCacheQuotaBytes可以获取cache的配额（可能随时间变化），如果超过配额，可能会被优先删除</span></span><br><span class="line"><span class="comment">// 通过StorageManager#setCacheBehaviorGroup StorageManager#setCacheBehaviorTombstone可以设置缓存的删除策略</span></span><br><span class="line"><span class="comment">// 读写不需要权限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getCacheDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回代码缓存目录</span></span><br><span class="line"><span class="comment">// 应用升级，平台升级会删除</span></span><br><span class="line"><span class="comment">// 存储编译的或生成的优化的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getCodeCacheDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a shared storage device is emulated (as determined by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Environment#isExternalStorageEmulated(File)&#125;), its contents are</span></span><br><span class="line"><span class="comment"> * backed by a private user data partition, which means there is little</span></span><br><span class="line"><span class="comment"> * benefit to storing data here instead of the private directory returned by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getCacheDir()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 卸载后删除</span></span><br><span class="line"><span class="comment">// 不会被自动删除，除非系统在JELLY_BEAN_MR1及以后，且Environment#isExternalStorageEmulated(File)返回true</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getExternalCacheDir</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns absolute path to application-specific directory in the preloaded cache.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Files stored in the cache directory can be deleted when the device runs low on storage.</span></span><br><span class="line"><span class="comment"> * There is no guarantee when these files will be deleted.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;HiddenAbstractMethod&quot;)</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getPreloadsFileCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File[] getExternalCacheDirs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储媒体文件的位置，会自动被扫描，令其他app可见</span></span><br><span class="line"><span class="comment">// 弃用：从安卓Q开始，可以直接通过MediaStore插入内容，不需要权限</span></span><br><span class="line"><span class="comment">// 卸载后会被删除</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File[] getExternalMediaDirs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回app中该Context对应的所有私有文件的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String[] fileList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找/创建一个新的私有文件目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> File <span class="title function_">getDir</span><span class="params">(String name, <span class="meta">@FileMode</span> <span class="type">int</span> mode)</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Context类&lt;ul&gt;
&lt;li&gt;注解&lt;ul&gt;
&lt;li&gt;用于标注文件、SharedPreferences、数据库的打开方式的注解&lt;/li&gt;
&lt;li&gt;用于标注bindService时，service的flags的注解&lt;/li&gt;
&lt;li&gt;用于标注registerReceiver时，receiver的flags的注解&lt;/li&gt;
&lt;li&gt;用于标注getService时，servicesName的注解&lt;/li&gt;
&lt;li&gt;用于标注createPackageContext、createPackageContextAsUser、createContextAsUser、createApplicationContext时的flags的注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量定义&lt;ul&gt;
&lt;li&gt;对应上面注解中限制的常量&lt;/li&gt;
&lt;li&gt;WAL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Context类&quot;&gt;&lt;a href=&quot;#Context类&quot; class=&quot;headerlink&quot; title=&quot;Context类&quot;&gt;&lt;/a&gt;Context类&lt;/h2&gt;&lt;p&gt;Context是抽象类，具体实现在ContextImpl，Application，Service，Activity都直接或间接继承自ContextWrapper，ContextWrapper通过代理的方式调用真正的ContextImpl。&lt;/p&gt;
&lt;h3 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IntDef(flag = true, prefix = &amp;#123; &amp;quot;MODE_&amp;quot; &amp;#125;, value = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_PRIVATE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_READABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_WRITEABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_APPEND,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; FileMode &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IntDef(flag = true, prefix = &amp;#123; &amp;quot;MODE_&amp;quot; &amp;#125;, value = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_PRIVATE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_READABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_WRITEABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_MULTI_PROCESS,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; PreferencesMode &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IntDef(flag = true, prefix = &amp;#123; &amp;quot;MODE_&amp;quot; &amp;#125;, value = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_PRIVATE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_READABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_WORLD_WRITEABLE,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_ENABLE_WRITE_AHEAD_LOGGING,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        MODE_NO_LOCALIZED_COLLATORS,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; DatabaseMode &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="手撸Android源码" scheme="https://jingtianer.github.io/home/categories/Android/%E6%89%8B%E6%92%B8Android%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Android-官方源码" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>01-layout</title>
    <link href="https://jingtianer.github.io/home/2024/05/20/Android%E9%AB%98%E7%BA%A7/%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/01-layout/"/>
    <id>https://jingtianer.github.io/home/2024/05/20/Android%E9%AB%98%E7%BA%A7/%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/01-layout/</id>
    <published>2024-05-20T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h2><p>创建 RelativeLayout 时，请务必为视图对象定义 ID。在相对布局中，同级视图可以定义其相对于通过唯一 ID 引用的另一个同级视图的布局。</p><h3 id="findViewById"><a href="#findViewById" class="headerlink" title="findViewById"></a>findViewById</h3><p>ID 不必在整个树状结构中具有唯一性，但在您搜索的树状结构部分中必须是唯一的。它通常可能是整个树，因此最好尽可能使其具有唯一性。</p><ul><li><code>findViewById</code>是View的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds the first descendant view with the given ID, the view itself if</span></span><br><span class="line"><span class="comment"> * the ID matches &#123;<span class="doctag">@link</span> #getId()&#125;, or &#123;<span class="doctag">@code</span> null&#125; if the ID is invalid</span></span><br><span class="line"><span class="comment"> * (&lt; 0) or there is no matching view in the hierarchy.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;Note:&lt;/strong&gt; In most cases -- depending on compiler support --</span></span><br><span class="line"><span class="comment"> * the resulting view is automatically cast to the target class type. If</span></span><br><span class="line"><span class="comment"> * the target class type is unconstrained, an explicit cast may be</span></span><br><span class="line"><span class="comment"> * necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id the ID to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a view with given ID if found, or &#123;<span class="doctag">@code</span> null&#125; otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> View#requireViewById(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; T <span class="title function_">findViewById</span><span class="params">(<span class="meta">@IdRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id == NO_ID) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findViewTraversal(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Activity中，<code>findViewById</code>是调用window的<code>findViewById</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds a view that was identified by the &#123;<span class="doctag">@code</span> android:id&#125; XML attribute</span></span><br><span class="line"><span class="comment"> * that was processed in &#123;<span class="doctag">@link</span> #onCreate&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;Note:&lt;/strong&gt; In most cases -- depending on compiler support --</span></span><br><span class="line"><span class="comment"> * the resulting view is automatically cast to the target class type. If</span></span><br><span class="line"><span class="comment"> * the target class type is unconstrained, an explicit cast may be</span></span><br><span class="line"><span class="comment"> * necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id the ID to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a view with given ID if found, or &#123;<span class="doctag">@code</span> null&#125; otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> View#findViewById(int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Activity#requireViewById(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; T <span class="title function_">findViewById</span><span class="params">(<span class="meta">@IdRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getWindow().findViewById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Window调用DecorView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds a view that was identified by the &#123;<span class="doctag">@code</span> android:id&#125; XML attribute</span></span><br><span class="line"><span class="comment"> * that was processed in &#123;<span class="doctag">@link</span> android.app.Activity#onCreate&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will implicitly call &#123;<span class="doctag">@link</span> #getDecorView&#125; with all of the associated side-effects.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;Note:&lt;/strong&gt; In most cases -- depending on compiler support --</span></span><br><span class="line"><span class="comment"> * the resulting view is automatically cast to the target class type. If</span></span><br><span class="line"><span class="comment"> * the target class type is unconstrained, an explicit cast may be</span></span><br><span class="line"><span class="comment"> * necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id the ID to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a view with given ID if found, or &#123;<span class="doctag">@code</span> null&#125; otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> View#findViewById(int)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Window#requireViewById(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; T <span class="title function_">findViewById</span><span class="params">(<span class="meta">@IdRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getDecorView().findViewById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局参数"><a href="#布局参数" class="headerlink" title="布局参数"></a>布局参数</h2><p>每个 ViewGroup 类都会实现一个扩展 ViewGroup.LayoutParams 的嵌套类。此子类包含的属性类型会根据需要为视图组定义每个子视图的尺寸和位置。如图 2 所示，父视图组会为每个子视图（包括子视图组）定义布局参数。</p><p>所有视图组都使用 layout_width 和 layout_height 包含宽度和高度，并且每个视图都必须定义它们。许多 LayoutParams 包含可选的外边距和边框。</p><p>您可以指定具有确切尺寸的宽度和高度，但您可能不希望经常这样做。更常见的情况是，您会使用以下某个常量来设置宽度或高度：</p><ul><li>wrap_content：告知视图将其大小调整为内容所需的尺寸。</li><li>match_parent：告知视图尽可能采用其父视图组允许的最大尺寸。</li></ul><blockquote><p>最好使用dp，密度无关像素</p></blockquote><h2 id="布局位置"><a href="#布局位置" class="headerlink" title="布局位置"></a>布局位置</h2><p><code>getLeft()</code>, <code>getTop()</code>, <code>getRight()</code>, <code>getBottom()</code>表示获取相对于其父view的位置坐标</p><p><code>getRight()</code> <code>-</code> <code>getLeft()</code> <code>==</code> <code>getWidth()</code><br><code>getBottom()</code> <code>-</code> <code>getTop()</code> <code>==</code> <code>getHeight()</code></p><h2 id="尺寸-内外边距"><a href="#尺寸-内外边距" class="headerlink" title="尺寸, 内外边距"></a>尺寸, 内外边距</h2><p>margin(外边距)和padding(内边距)的区别</p><ul><li>margin指的是在view的边界之外的额外空间，用于分隔父布局，或父布局中其他相邻view</li><li>margin的颜色不受view的影响</li><li>padding是在view边界内部的额外空间</li><li>padding的颜色受view的背景的影响</li></ul><h2 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h2><ul><li>使用ConstraintLayout</li><li>对列表-详情界面使用 SlidingPaneLayout<ul><li>根据设备尺寸自动决定菜单和content是并排显示还是层叠显示</li></ul></li></ul><h3 id="备用资源"><a href="#备用资源" class="headerlink" title="备用资源"></a>备用资源</h3><p>对资源目录&#x2F;布局文件的文件名后添加限定符，可规定自愿限制应用的屏幕尺寸，语言，屏幕方向，如有多种限制，需要按照<a href="https://developer.android.com/guide/topics/resources/providing-resources?hl=zh-cn#table2">表格</a>中的顺序给出。</p><p>在<a href="https://developer.android.com/guide/topics/resources/providing-resources?hl=zh-cn#table2">表格</a>中越靠前的优先级越高</p><p>系统选择合适的资源时，首先排除与设备配置相冲突的资源文件（如语言、像素密度），然后按照<a href="https://developer.android.com/guide/topics/resources/providing-resources?hl=zh-cn#table2">表格</a>的顺序依次寻找是否有目录包含该限定符，如果有，则把不含有限定符的目录排除</p><h3 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h3><p>使用 fragment 将界面组件模块化</p><ul><li>对于折叠屏、大尺寸设备，可以用fragment将ui模块化，避免重复的ui加载</li></ul><h3 id="activity-嵌入"><a href="#activity-嵌入" class="headerlink" title="activity 嵌入"></a>activity 嵌入</h3><p>使用Activity嵌入，可在大尺寸设备上在屏幕上并排显示Activity，在小尺寸屏幕上层叠显示</p><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h2><h3 id="均等分布"><a href="#均等分布" class="headerlink" title="均等分布"></a>均等分布</h3><p>若要创建线性布局，让每个子项在屏幕上占据相同大小的空间</p><ul><li><code>android:layout_height=&quot;0dp&quot;</code> or <code>android:layout_width=&quot;0dp&quot;</code></li><li><code>android:layout_weight=&quot;1&quot;</code></li></ul><h3 id="不等分布"><a href="#不等分布" class="headerlink" title="不等分布"></a>不等分布</h3><ul><li>weight为0,则只占据所需的大小</li><li>不为0，每个占据剩余空间的 $ weight_i &#x2F; \sum_{j&#x3D;1}^{N}{weight_j} $</li></ul><h2 id="优化布局"><a href="#优化布局" class="headerlink" title="优化布局"></a>优化布局</h2><ul><li>减少布局层次<ul><li>合并</li><li>使用ConstraintLayout</li></ul></li><li>通过include标签重复使用布局<ul><li>子布局的根布局可以使用merge标签，与父布局合并</li></ul></li><li>使用ViewStub<ul><li>动态将ViewStub替换为对应的view</li><li>通过ViewStub.inflate替换view</li></ul></li></ul><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ul><li>创建<code>res/values/attrs.xml</code></li><li>描述属性以及属性的取值</li><li>获取属性值<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    context.theme.obtainStyledAttributes(</span><br><span class="line">            attrs,</span><br><span class="line">            R.styleable.PieChart,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>).apply &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mShowText = getBoolean(R.styleable.PieChart_showText, <span class="literal">false</span>)</span><br><span class="line">            textPos = getInteger(R.styleable.PieChart_labelPosition, <span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            recycle()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><ul><li><p>获取parent限制的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">widthMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line"><span class="type">int</span> <span class="variable">widthSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line"><span class="type">int</span> <span class="variable">heightMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"><span class="type">int</span> <span class="variable">heightSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br></pre></td></tr></table></figure><blockquote><p>Mode是MeasureSpec</p></blockquote></li><li><p>调用child的measure, 参数表示对child大小的限制</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This is called to find out how big a view should be. The parent</span></span><br><span class="line"><span class="comment"> * supplies constraint information in the width and height parameters.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The actual measurement work of a view is performed in</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</span></span><br><span class="line"><span class="comment"> *        parent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</span></span><br><span class="line"><span class="comment"> *        parent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #onMeasure(int, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">measure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h3><p>遍历child，调用child的layout方法，参数表示其布局相对于父布局的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Assign a size and position to a view and all of its</span></span><br><span class="line"><span class="comment"> * descendants</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is the second phase of the layout mechanism.</span></span><br><span class="line"><span class="comment"> * (The first is measuring). In this phase, each parent calls</span></span><br><span class="line"><span class="comment"> * layout on all of its children to position them.</span></span><br><span class="line"><span class="comment"> * This is typically done using the child measurements</span></span><br><span class="line"><span class="comment"> * that were stored in the measure pass().&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Derived classes should not override this method.</span></span><br><span class="line"><span class="comment"> * Derived classes with children should override</span></span><br><span class="line"><span class="comment"> * onLayout. In that method, they should</span></span><br><span class="line"><span class="comment"> * call layout on each of their children.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l Left position, relative to parent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t Top position, relative to parent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r Right position, relative to parent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b Bottom position, relative to parent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layout</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h3><p>给你Canvas去绘图</p><h2 id="沉浸模式"><a href="#沉浸模式" class="headerlink" title="沉浸模式"></a>沉浸模式</h2><h3 id="系统边衬区"><a href="#系统边衬区" class="headerlink" title="系统边衬区"></a>系统边衬区</h3><ul><li>系统栏边衬区：状态栏+导航条&#x2F;按钮</li><li>系统手势边衬区：手势导航区</li></ul><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><ul><li>获取设备圆角的圆心和半径<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个view中</span></span><br><span class="line"><span class="keyword">val</span> insets = rootWindowInsets</span><br><span class="line"><span class="keyword">val</span> topRight = insets.getRoundedCorner(RoundedCorner.POSITION_TOP_RIGHT) ?: <span class="keyword">return</span></span><br><span class="line"><span class="comment">// 在activity中</span></span><br><span class="line"><span class="keyword">val</span> rootWindowInsets = rootView.rootWindowInsets</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ID&quot;&gt;&lt;a href=&quot;#ID&quot; class=&quot;headerlink&quot; title=&quot;ID&quot;&gt;&lt;/a&gt;ID&lt;/h2&gt;&lt;p&gt;创建 RelativeLayout 时，请务必为视图对象定义 ID。在相对布局中，同级视图可以定义其相对于通过唯一 ID 引用的另一个同级视图的布局。&lt;/p&gt;
&lt;h3 id=&quot;findViewById&quot;&gt;&lt;a href=&quot;#findViewById&quot; class=&quot;headerlink&quot; title=&quot;findViewById&quot;&gt;&lt;/a&gt;findViewById&lt;/h3&gt;&lt;p&gt;ID 不必在整个树状结构中具有唯一性，但在您搜索的树状结构部分中必须是唯一的。它通常可能是整个树，因此最好尽可能使其具有唯一性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;findViewById&lt;/code&gt;是View的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Finds the first descendant view with the given ID, the view itself if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * the ID matches &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #getId()&amp;#125;, or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; null&amp;#125; if the ID is invalid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * (&amp;lt; 0) or there is no matching view in the hierarchy.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;strong&amp;gt;Note:&amp;lt;/strong&amp;gt; In most cases -- depending on compiler support --&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * the resulting view is automatically cast to the target class type. If&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * the target class type is unconstrained, an explicit cast may be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * necessary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; id the ID to search for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a view with given ID if found, or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; null&amp;#125; otherwise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; View#requireViewById(int)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &amp;lt;T &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt;&amp;gt; T &lt;span class=&quot;title function_&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@IdRes&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (id == NO_ID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findViewTraversal(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android-官方文档" scheme="https://jingtianer.github.io/home/tags/Android-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://jingtianer.github.io/home/2024/05/07/misc/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jingtianer.github.io/home/2024/05/07/misc/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-07T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制发展历史"><a href="#版本控制发展历史" class="headerlink" title="版本控制发展历史"></a>版本控制发展历史</h2><h3 id="本地代码版本控制"><a href="#本地代码版本控制" class="headerlink" title="本地代码版本控制"></a>本地代码版本控制</h3><p>RCS: 只能保存本地的变化情况，无法协同合作</p><h3 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h3><p>SVN: 远端服务器维护版本，本地不保存代码版本</p><h3 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h3><p>git: 每个仓库都记录版本历史，解决一个服务器挂掉导致所有历史版本丢失的问题</p><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><h2 id="fast-forward"><a href="#fast-forward" class="headerlink" title="fast-forward"></a>fast-forward</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;版本控制发展历史&quot;&gt;&lt;a href=&quot;#版本控制发展历史&quot; class=&quot;headerlink&quot; title=&quot;版本控制发展历史&quot;&gt;&lt;/a&gt;版本控制发展历史&lt;/h2&gt;&lt;h3 id=&quot;本地代码版本控制&quot;&gt;&lt;a href=&quot;#本地代码版本控制&quot; class=&quot;headerlink&quot; title=&quot;本地代码版本控制&quot;&gt;&lt;/a&gt;本地代码版本控制&lt;/h3&gt;&lt;p&gt;RCS: 只能保存本地的变化情况，无法协同合作&lt;/p&gt;
&lt;h3 id=&quot;集中式版本控制&quot;&gt;&lt;a href=&quot;#集中式版本控制&quot; class=&quot;headerlink&quot; title=&quot;集中式版本控制&quot;&gt;&lt;/a&gt;集中式版本控制&lt;/h3&gt;&lt;p&gt;SVN: 远端服务器维护版本，本地不保存代码版本&lt;/p&gt;
&lt;h3 id=&quot;分布式版本控制&quot;&gt;&lt;a href=&quot;#分布式版本控制&quot; class=&quot;headerlink&quot; title=&quot;分布式版本控制&quot;&gt;&lt;/a&gt;分布式版本控制&lt;/h3&gt;</summary>
    
    
    
    <category term="git" scheme="https://jingtianer.github.io/home/categories/git/"/>
    
    
    <category term="git" scheme="https://jingtianer.github.io/home/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>01-Flutter-快速入门实战</title>
    <link href="https://jingtianer.github.io/home/2024/04/24/Android%E9%AB%98%E7%BA%A7/flutter%E5%85%A5%E9%97%A8/01-Flutter-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/"/>
    <id>https://jingtianer.github.io/home/2024/04/24/Android%E9%AB%98%E7%BA%A7/flutter%E5%85%A5%E9%97%A8/01-Flutter-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</id>
    <published>2024-04-24T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h2><ul><li>everything is a widget</li></ul><h2 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h2><p>在flutter中，所有看得见的看不见的东西都是widget</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>android:</li><li>ios:</li><li>lib: dart文件，业务逻辑</li><li>lib&#x2F;main.dart: 入口</li><li>pubspec.yaml: 工程信息以及依赖</li></ul><h2 id="依赖声明"><a href="#依赖声明" class="headerlink" title="依赖声明"></a>依赖声明</h2><p>pubspec.yaml中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">    <span class="attr">package_name:</span> [<span class="string">version_code</span>]</span><br><span class="line">    <span class="attr">package_name:</span> <span class="string">^[version_code]</span></span><br><span class="line">    <span class="comment"># ^的作用是让系统选择更高且与version_code相兼容的版本</span></span><br><span class="line">    <span class="attr">packge_name:</span> [<span class="string">git_url</span>]</span><br><span class="line">    <span class="attr">packge_name:</span> [<span class="string">local</span> <span class="string">path</span>]</span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">    <span class="comment"># 仅在开发时依赖，在release时不打包</span></span><br><span class="line">    <span class="attr">package_name:</span> <span class="string">param</span></span><br></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>本节内容来自<a href="https://docs.flutter.dev/ui/layout">fluuter docs&#x2F;ui&#x2F;layout</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><a href="https://docs.flutter.dev/ui/widgets/layout">flutter中的layout</a></li><li>常见layout<ul><li>Center</li><li>Container</li><li>Baseline</li><li>Row</li><li>Column</li><li>Stack</li><li>Table</li></ul></li></ul><h3 id="将小部件添加到布局"><a href="#将小部件添加到布局" class="headerlink" title="将小部件添加到布局"></a>将小部件添加到布局</h3><ul><li>child: 唯一子widget</li><li>children: 多个列表型的子widget(如Row, Column, Stack)</li></ul><h3 id="build方法"><a href="#build方法" class="headerlink" title="build方法"></a>build方法</h3><p>大多数widgets都有build方法,flutter app本身也是一个widget,通过build方法实例化并返回一个widget就会显示该widget</p><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><ul><li>CupertinoApp: ios风格的app<ul><li>theme传入CupertinoThemeData</li><li>home属性用CupertinoPageScaffold</li><li><a href="https://api.flutter.dev/flutter/cupertino/cupertino-library.html">全部Cupertino lib</a></li></ul></li><li>MaterialApp: Material风格的app<ul><li>home用Scaffold</li><li>可以使用ActionButton, SneakBar</li></ul></li><li>Container: 如果不需要Material风格或ios风格，直接返回Container</li></ul><h3 id="Row和Colum"><a href="#Row和Colum" class="headerlink" title="Row和Colum"></a>Row和Colum</h3><p><img src="https://docs.flutter.dev/assets/images/docs/ui/layout/row-diagram.png" alt="row主轴交叉轴"><br><img src="https://docs.flutter.dev/assets/images/docs/ui/layout/column-diagram.png" alt="column主轴交叉轴"></p><h4 id="主轴和交叉轴-main-axis-cross-axis"><a href="#主轴和交叉轴-main-axis-cross-axis" class="headerlink" title="主轴和交叉轴(main axis, cross axis)"></a>主轴和交叉轴(main axis, cross axis)</h4><ul><li>row的主轴和交叉轴分别是水平的和垂直的</li><li>column的主轴和交叉轴反过来</li><li><code>MainAxisAlignment</code>和<code>CrossAxisAlignment</code>提供了控制对齐方式的常量</li></ul><h4 id="多个children的大小"><a href="#多个children的大小" class="headerlink" title="多个children的大小"></a>多个children的大小</h4><ul><li>使用Expanded: 让子widget适应row&#x2F;column的大小，使用Expanded的属性flex制定其大小的权重</li><li>使用<code>mainAxisSize: MainAxisSize.min</code>控制大小，让其紧凑的贴在一起</li></ul><h3 id="常用布局小组件"><a href="#常用布局小组件" class="headerlink" title="常用布局小组件"></a>常用布局小组件</h3><blockquote><p><strong>标准小组件</strong><br>Container：向小部件添加填充、边距、边框、背景颜色或其他装饰。<br>GridView：将小部件布置为可滚动网格。<br>ListView：将小部件布置为可滚动列表。<br>Stack：将一个小部件重叠在另一个小部件之上。</p></blockquote><blockquote><p><strong>material布局小组件</strong><br>Card：将相关信息组织到带有圆角和阴影的框中。<br>ListTile：将最多 3 行文本以及可选的前导和尾随图标组织成一行。</p></blockquote><h3 id="约束Constraints"><a href="#约束Constraints" class="headerlink" title="约束Constraints"></a>约束Constraints</h3><p><a href="https://docs.flutter.dev/ui/layout/constraints">Understanding constraints</a><br>Flutter的布局引擎被设计为一次通过的过程。这意味着Flutter可以非常有效地布局其小部件，但也存在一些限制: </p><ul><li>小部件只能在父部件给它的约束范围内决定自己的大小。这意味着一个小部件通常不能有它想要的大小。 </li><li>小部件不能知道也不能决定它自己在屏幕上的位置，因为决定小部件位置的是小部件的父组件。 </li><li>因为父元素的大小和位置也依赖于它自己的父元素，所以不考虑整个树，就不可能精确地定义任何小部件的大小和位置。 </li><li>如果子元素想要与父元素不同的大小，并且父元素没有足够的信息来对齐它，那么子元素的大小可能会被忽略。在定义alignment时要明确。</li></ul><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>若屏幕是父布局，无论该widget是否定义其大小、宽度，该widget会强制铺满屏幕</li><li>对于Align, Center, 子widget的大小不能超过父widget的情况下，子widget可以拥有任意的大小</li><li>如果父widget没有大小，他的大小由子widget决定</li><li>ConstrainedBox<ul><li>如果ConstrainedBox（可以指定子widget的宽度高度的范围）的父widget是屏幕。<ul><li>屏幕会约束widget大小正好等于屏幕</li></ul></li><li>ConstrainedBox只能从父widget的约束中施加约束。也就是如果子widget的约束不在父widget的约束范围内，那么就只能依照父widget的约束</li><li>如果子widget要求的大小超过了ConstrainedBox的限制，只能取限制的最大值，若小于最低限制，则只能是最小值</li></ul></li><li>UnconstrainedBox<ul><li>允许子widget拥有任何大小，如果子widget大小超过UnconstrainedBox，则会在屏幕上显示”overflow warning”</li><li>如果子widget要求大小为<code>double.infinity</code>，则不会显示任何内容，且会在console中提示error信息</li></ul></li><li>OverflowBox<ul><li>允许子widget拥有任何大小，如果子widget大小超过UnconstrainedBox，则会尽量显示子widget的内容，不会出现”overflow warning”</li></ul></li><li>LimitedBox<ul><li>限制子widget的大小范围，但仅在子widget设置为<code>double.infinity</code>时生效，如果设置不是<code>double.infinity</code>也不在LimitedBox限制的范围内，则显示子widget要求的大小而不应用LimitedBox的限制</li></ul></li><li>FittedBox<ul><li>父widget是screen,子widget是Text<ul><li>Text根据字体大小，字符，长度计算出宽度(intrinsic)后，根据自身宽度缩放Text填充空白，超过则缩小</li></ul></li><li>父widget是Center（允许子widget有自己的大小）,子widget是Text<ul><li>Text根据字体大小，字符，长度计算出宽度(intrinsic)后，如果可以，FittedBox先让自己的大小适应Text，若不行，则缩放Text</li></ul></li><li>只能缩放有边界的，长宽不是无穷的widget，否则什么都不会显示，且在console中报告错误。</li></ul></li><li>Center+Text<ul><li>不缩放，文字太长就break line</li></ul></li><li>Row<ul><li>类似于UnconstrainedBox</li><li>widget由Expanded包裹，则不允许子widget自定义宽度，由其他children决定宽度</li><li>如果所有children都被Expanded包裹，那么大家都按照Expand中分配的比例决定其宽度</li><li>Flexible允许它的子控件具有与Flexible相同或更小的宽度，而Expanded则强制它的子控件具有与Expanded完全相同的宽度</li></ul></li><li>Scaffold<ul><li>通过<code>SizedBox.expand</code>包裹子widget，可以让子widget与Scaffold有相同的大小</li></ul></li></ul><h4 id="松紧约束-Tight-Loose-Constraints"><a href="#松紧约束-Tight-Loose-Constraints" class="headerlink" title="松紧约束(Tight Loose Constraints)"></a>松紧约束(Tight Loose Constraints)</h4><ul><li>Tight Constraints<ul><li>最大宽度&#x3D;最小宽度, 最大长度&#x3D;最小长度</li></ul></li><li>Losse Constraints<ul><li>最小宽度 &#x3D; 0, 最小长度 &#x3D; 0</li><li>最大宽度 !&#x3D; 0, 最大长度 !&#x3D; 0</li><li><blockquote><p>Center就是把收到的tight约束转换成loose约束</p></blockquote></li></ul></li></ul><h4 id="无限约束-unbounded-constraint"><a href="#无限约束-unbounded-constraint" class="headerlink" title="无限约束(unbounded constraint)"></a>无限约束(unbounded constraint)</h4><ul><li>最大宽度 &#x3D; double.infinite, 最大长度 &#x3D; double.infinite</li><li>一般情况下会导致console中出现error</li><li>用于ListView等ScrollView的子类<ul><li>滑动方向上的长&#x2F;宽无限</li></ul></li></ul><h4 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h4><ul><li>Flex Box(Row 或 Column)</li><li>若主轴上拥有有限约束，则经可能的大</li><li>若主轴上拥有无限约束，每个孩子的flex值必须为0，也就是不能在可滑动widget或flex box中使用Expand</li><li>交叉轴方向不能无限，否则无法align children</li></ul><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><ul><li><p>常见属性</p><ul><li>alignment<ul><li>传入坐标值<ul><li>原点在widget中心</li><li>水平向右为x轴，x&#x3D;[-1, 1] 从左到右</li><li>竖直向下为y轴，y&#x3D;[-1, 1] 从上到下</li></ul></li></ul></li><li>fit<ul><li>传入StackFit</li><li>值有: loose, expand, passthrough</li></ul></li><li>overflow<ul><li>空间溢出的操作: clip &#x2F; visible</li></ul></li></ul></li><li><p>position</p><ul><li>一个widget, 和stack搭配使用</li><li>确定stack中子widget的位置</li></ul></li></ul><blockquote><p>Container包括了: SizedBox, Center, Padding, DecoratedBox, ConstrainedBox的功能</p></blockquote><h2 id="StateFull-StateLess"><a href="#StateFull-StateLess" class="headerlink" title="StateFull&#x2F;StateLess"></a>StateFull&#x2F;StateLess</h2><ul><li>didUpdatedWidget<ul><li>widget参数发生改变时触发</li></ul></li></ul><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><h2 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h2><ul><li>of方法，从当前widget向上查找，直到找到该类型的个Widget<ul><li>不允许在initState调用of方法</li></ul></li></ul><h3 id="自上而下传递状态"><a href="#自上而下传递状态" class="headerlink" title="自上而下传递状态"></a>自上而下传递状态</h3><h4 id="在父widget中"><a href="#在父widget中" class="headerlink" title="在父widget中"></a>在父widget中</h4><ul><li>updateShouldNotify<ul><li>是否向下传递变化</li></ul></li></ul><h4 id="在子widget中"><a href="#在子widget中" class="headerlink" title="在子widget中"></a>在子widget中</h4><ul><li>didChangeDepandencies<ul><li>状态同步</li><li>若一个子widget通过of获取过我的属性，那么我的属性变化时，都会重新build这些子widget</li><li>在重新build之前，会触发didChangeDepandencies</li><li>initState后也会调用一次didChangeDepandencies</li></ul></li></ul><h3 id="自下而上的消息传递"><a href="#自下而上的消息传递" class="headerlink" title="自下而上的消息传递"></a>自下而上的消息传递</h3><p>父widget用<code>NotificationListener&lt;XXXNotification&gt;</code>包装<br>子widget中需要传递消息时，创建一个<code>XXXNotification</code>，并调用dispatch</p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>Navigator</p><ul><li>push(Widget)<ul><li>widget栈中加入一个widget</li></ul></li><li>pop<ul><li>弹出一个widget</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;flutter&quot;&gt;&lt;a href=&quot;#flutter&quot; class=&quot;headerlink&quot; title=&quot;flutter&quot;&gt;&lt;/a&gt;flutter&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;everything is a widget&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;widget&quot;&gt;&lt;a href=&quot;#widget&quot; class=&quot;headerlink&quot; title=&quot;widget&quot;&gt;&lt;/a&gt;widget&lt;/h2&gt;&lt;p&gt;在flutter中，所有看得见的看不见的东西都是widget&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;android:&lt;/li&gt;
&lt;li&gt;ios:&lt;/li&gt;
&lt;li&gt;lib: dart文件，业务逻辑&lt;/li&gt;
&lt;li&gt;lib&amp;#x2F;main.dart: 入口&lt;/li&gt;
&lt;li&gt;pubspec.yaml: 工程信息以及依赖&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Flutter" scheme="https://jingtianer.github.io/home/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>22-Gradle</title>
    <link href="https://jingtianer.github.io/home/2024/04/23/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/22Gradle/"/>
    <id>https://jingtianer.github.io/home/2024/04/23/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/22Gradle/</id>
    <published>2024-04-23T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>项目<ul><li>Gradle项目是一个可以构建的软件，例如应用程序或库。</li><li>包括一个<code>根项目</code>和任意数量的<code>子项目</code>。</li></ul></li><li>构建脚本<ul><li>构建脚本向 Gradle 详细介绍了构建项目所需采取的步骤。</li><li>每个项目可以包含一个或多个构建脚本。</li></ul></li><li>依赖管理<ul><li>依赖管理是一种用于声明和解析项目所需的外部资源的自动化技术。</li><li>每个项目通常都包含许多外部依赖项，Gradle 将在构建过程中解决这些依赖项。</li></ul></li><li>任务<ul><li>任务是基本的工作单元，例如编译代码或运行测试。</li><li>每个项目都包含在构建脚本或插件中定义的一个或多个任务。</li></ul></li><li>插件<ul><li>插件用于扩展 Gradle 的功能，并可选择向项目贡献任务。</li></ul></li></ul><h2 id="Gradle-项目结构"><a href="#Gradle-项目结构" class="headerlink" title="Gradle 项目结构"></a>Gradle 项目结构</h2><table><thead><tr><th>文件&#x2F;目录名称</th><th>作用</th></tr></thead><tbody><tr><td>gradlew&#x2F;gradlew.bat</td><td>Gradle 包装脚本</td></tr><tr><td>build.gradle(.kts)</td><td>项目的 Gradle 构建脚本</td></tr><tr><td>settings.gradle(.kts)</td><td>Gradle 设置文件用于定义根项目名称和子项目</td></tr><tr><td>src</td><td>项目&#x2F;子项目的源码、资源</td></tr></tbody></table><h2 id="使用gradle-gradlew编译"><a href="#使用gradle-gradlew编译" class="headerlink" title="使用gradle&#x2F;gradlew编译"></a>使用gradle&#x2F;gradlew编译</h2><ul><li><p>编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure></li><li><p>编译单个任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :taskname</span><br><span class="line">./gradlew taskname</span><br></pre></td></tr></table></figure><blockquote><p>编译单个任务以及全部依赖</p></blockquote></li><li><p>编译多项目工程中的任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :subproject:taskName</span><br><span class="line">./gradlew subproject:taskName</span><br></pre></td></tr></table></figure><blockquote><p><code>:</code>相当于分隔符，第一个冒号可以省略</p></blockquote></li><li><p>清理产物</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure></li><li><p>执行多个任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build</span><br></pre></td></tr></table></figure></li></ul><h2 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h2><ul><li>单工程: optional</li><li>多工程: mandatory<ul><li>要声明所有子工程</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;root-project&#x27;</span>   </span><br><span class="line"><span class="comment">// 定义工程名</span></span><br><span class="line">include(<span class="string">&#x27;sub-project-a&#x27;</span>)            </span><br><span class="line">include(<span class="string">&#x27;sub-project-b&#x27;</span>)</span><br><span class="line">include(<span class="string">&#x27;sub-project-c&#x27;</span>)</span><br><span class="line"><span class="comment">// 声明子工程</span></span><br></pre></td></tr></table></figure><h3 id="Settings对象"><a href="#Settings对象" class="headerlink" title="Settings对象"></a>Settings对象</h3><h4 id="Settings对象的属性"><a href="#Settings对象的属性" class="headerlink" title="Settings对象的属性"></a>Settings对象的属性</h4><ul><li>buildCache: 编译缓存配置</li><li>plugins: 应用该设置的插件</li><li>rootDir: 编译的根目录, 根项目的目录</li><li>rootProject: 根项目</li><li>settings: 当前Settings对象</li></ul><h4 id="Settings对象的方法"><a href="#Settings对象的方法" class="headerlink" title="Settings对象的方法"></a>Settings对象的方法</h4><ul><li>include(): 定义自项目</li><li>includeBuild(): 看不懂</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;项目&lt;ul&gt;
&lt;li&gt;Gradle项目是一个可以构建的软件，例如应用程序或库。&lt;/li&gt;
&lt;li&gt;包括一个&lt;code&gt;根项目&lt;/code&gt;和任意数量的&lt;code&gt;子项目&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建脚本&lt;ul&gt;
&lt;li&gt;构建脚本向 Gradle 详细介绍了构建项目所需采取的步骤。&lt;/li&gt;
&lt;li&gt;每个项目可以包含一个或多个构建脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖管理&lt;ul&gt;
&lt;li&gt;依赖管理是一种用于声明和解析项目所需的外部资源的自动化技术。&lt;/li&gt;
&lt;li&gt;每个项目通常都包含许多外部依赖项，Gradle 将在构建过程中解决这些依赖项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任务&lt;ul&gt;
&lt;li&gt;任务是基本的工作单元，例如编译代码或运行测试。&lt;/li&gt;
&lt;li&gt;每个项目都包含在构建脚本或插件中定义的一个或多个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;插件&lt;ul&gt;
&lt;li&gt;插件用于扩展 Gradle 的功能，并可选择向项目贡献任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Gradle-项目结构&quot;&gt;&lt;a href=&quot;#Gradle-项目结构&quot; class=&quot;headerlink&quot; title=&quot;Gradle 项目结构&quot;&gt;&lt;/a&gt;Gradle 项目结构&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&amp;#x2F;目录名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;gradlew&amp;#x2F;gradlew.bat&lt;/td&gt;
&lt;td&gt;Gradle 包装脚本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;build.gradle(.kts)&lt;/td&gt;
&lt;td&gt;项目的 Gradle 构建脚本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;settings.gradle(.kts)&lt;/td&gt;
&lt;td&gt;Gradle 设置文件用于定义根项目名称和子项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src&lt;/td&gt;
&lt;td&gt;项目&amp;#x2F;子项目的源码、资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;使用gradle-gradlew编译&quot;&gt;&lt;a href=&quot;#使用gradle-gradlew编译&quot; class=&quot;headerlink&quot; title=&quot;使用gradle&amp;#x2F;gradlew编译&quot;&gt;&lt;/a&gt;使用gradle&amp;#x2F;gradlew编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编译&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译单个任务&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew :taskname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./gradlew taskname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;编译单个任务以及全部依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译多项目工程中的任务&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew :subproject:taskName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./gradlew subproject:taskName&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:&lt;/code&gt;相当于分隔符，第一个冒号可以省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清理产物&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行多个任务&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew clean build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    <category term="gradle" scheme="https://jingtianer.github.io/home/categories/Android/gradle/"/>
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/tags/Android/"/>
    
    <category term="gradle" scheme="https://jingtianer.github.io/home/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>gallery</title>
    <link href="https://jingtianer.github.io/home/2024/04/23/gallery/index/"/>
    <id>https://jingtianer.github.io/home/2024/04/23/gallery/index/</id>
    <published>2024-04-22T16:38:11.000Z</published>
    <updated>2025-04-15T02:37:55.619Z</updated>
    
    <content type="html"><![CDATA[<head>    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js"></script>    <script src="https://cdnjs.cloudflare.com/ajax/libs/galleria/1.5.7/galleria.min.js"></script></head><style>    .galleria{         width: 100%;         height: 100vh;     }</style><div class="galleria">    <img src="/home/images/gallery/gallery9.jpeg">    <img src="/home/images/gallery/gallery13.jpeg">    <img src="/home/images/gallery/gallery14.jpeg">    <img src="/home/images/gallery/gallery15.jpeg">    <img src="/home/images/gallery/gallery16.jpeg">    <img src="/home/images/gallery/gallery17.jpeg">    <img src="/home/images/gallery/gallery18.jpeg">    <img src="/home/images/gallery/gallery19.jpeg">    <img src="/home/images/gallery/gallery20.jpeg">    <img src="/home/images/gallery/gallery21.jpeg">    <img src="/home/images/gallery/gallery8.jpeg">    <img src="/home/images/gallery/gallery22.jpeg">    <img src="/home/images/gallery/gallery24.jpeg">    <img src="/home/images/gallery/gallery23.jpeg">    <img src="/home/images/gallery/gallery27.jpeg">    <img src="/home/images/gallery/gallery28.jpeg">    <img src="/home/images/gallery/gallery29.jpeg">    <img src="/home/images/gallery/gallery30.jpeg">    <img src="/home/images/gallery/gallery12.jpeg">    <img src="/home/images/gallery/gallery31.png">    <img src="/home/images/gallery/gallery25.jpeg">    <img src="/home/images/gallery/gallery26.jpeg">    <img src="/home/images/gallery/gallery10.jpeg">    <img src="/home/images/gallery/gallery11.jpeg">    <img src="/home/images/gallery/gallery1.jpeg">    <img src="/home/images/gallery/gallery2.jpeg">    <img src="/home/images/gallery/gallery3.jpeg">    <img src="/home/images/gallery/gallery4.jpeg">    <img src="/home/images/gallery/gallery32.jpeg">    <img src="/home/images/gallery/gallery5.jpeg">    <img src="/home/images/gallery/gallery6.jpeg">    <img src="/home/images/gallery/gallery7.jpeg"></div><script>(function() {    Galleria.loadTheme('https://cdnjs.cloudflare.com/ajax/libs/galleria/1.5.7/themes/classic/galleria.classic.min.js');    Galleria.run('.galleria', {        extend: function() {            var gallery = this; // "this" is the gallery instance            $('.galleria').click(function() {                console.log("click");                gallery.playToggle(1000).toggleFullscreen(); // call the play method            });        }    });}());</script>]]></content>
    
    
      
      
    <summary type="html">&lt;head&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdnjs.cloudflare.com/aj</summary>
      
    
    
    
    <category term="gallery" scheme="https://jingtianer.github.io/home/categories/gallery/"/>
    
    
    <category term="gallery" scheme="https://jingtianer.github.io/home/tags/gallery/"/>
    
  </entry>
  
  <entry>
    <title>牛客刷题-1</title>
    <link href="https://jingtianer.github.io/home/2024/03/27/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98-1/"/>
    <id>https://jingtianer.github.io/home/2024/03/27/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98-1/</id>
    <published>2024-03-27T13:15:36.000Z</published>
    <updated>2025-04-15T02:37:55.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小米2019秋招安卓开发笔试题（B）"><a href="#小米2019秋招安卓开发笔试题（B）" class="headerlink" title="小米2019秋招安卓开发笔试题（B）"></a>小米2019秋招安卓开发笔试题（B）</h2><h3 id="21-最少立方数之和"><a href="#21-最少立方数之和" class="headerlink" title="21. 最少立方数之和"></a>21. 最少立方数之和</h3><p>给出一个数字N（<code>0&lt;N&lt;1000000</code>）,将N写成立方数和的形式，求出需要的最少立方数个数。<br>例如N&#x3D;17，1+8+8 &#x3D; 17，最少需要3个立方数，则输出3。<br>N&#x3D; 28,1+1+1+1+8+8+8&#x3D;28, 需要7个立方数，1+27&#x3D;28,需要2个立方数，所以最少立方数为2，则输出2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Integer&gt; cubs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> cubNum;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cubs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i*i*i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            cubs.add(i*i*i);</span><br><span class="line">        &#125;</span><br><span class="line">        cubNum = cubs.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(cubs, n);</span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                index = -index - <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;unreachable&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= index+<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cubs.get(j-<span class="number">1</span>); i &lt;= n; i++) &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i - cubs.get(j-<span class="number">1</span>)] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dp[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全背包，从所有立方数里选数，取数目最小的情况</p><h3 id="资产包打包"><a href="#资产包打包" class="headerlink" title="资产包打包"></a>资产包打包</h3><p>在金融资产交易中，经常涉及到资产包的挑选打包。在资产包打包过程中，每种类型的资产有固定的数量与价值，需选择某几种资产打包，使得资产包总价值最大。打包时每种资产只能整体打包，不能分割。假设现有可容纳M条资产的资产包，另外有N种资产。资产Na数量为Ta条，总价值为Va元；资产Nb数量为Tb条，总价值为Vb元；资产Nc数量为Tc条，总价值为Vc元……；资产Nn数量为Tn，总价值为Vn。编写算法，挑选哪些类型资产放入资产包可使得资产包总价值最大？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            String[] input = in.nextLine().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">W</span> <span class="operator">=</span> Integer.parseInt(input[index++], <span class="number">10</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> Integer.parseInt(input[index++], <span class="number">10</span>);</span><br><span class="line">            <span class="type">int</span>[][] properties = <span class="keyword">new</span> <span class="title class_">int</span>[N][<span class="number">2</span>];</span><br><span class="line">            String[] weights = input[index++].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                properties[i][<span class="number">0</span>] = Integer.parseInt(weights[i], <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] values = input[index++].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                properties[i][<span class="number">1</span>] = Integer.parseInt(values[i], <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[W + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> W; j &gt;= properties[i - <span class="number">1</span>][<span class="number">0</span>]; j--) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j],</span><br><span class="line">                                        dp[j - properties[i - <span class="number">1</span>][<span class="number">0</span>]] + properties[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dp[W]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0-1背包，要注意0-1背包和完全背包的区别</p></blockquote><ul><li>无压缩情况<ul><li>0-1背包转移方程为：<ul><li><code>dp[i][j] = max(dp[i][j], dp[i-1][j-wi]+vi)</code> (当j &gt;&#x3D; wi时)</li><li><code>dp[i][j] = dp[i][j]</code> (当j &lt; wi时)</li></ul></li><li>完全背包转移方程为：<ul><li><code>dp[i][j] = max(dp[i][j], dp[i][j-wi]+vi)</code> (当j &gt;&#x3D; wi时) <strong>这里是dp[i]</strong></li><li><code>dp[i][j] = dp[i][j]</code> (当j &lt; wi时)</li></ul></li></ul></li><li>有压缩情况<ul><li>0-1背包对容量是逆向遍历</li><li>完全背包是正向遍历</li></ul></li></ul><h3 id="super和this关键字"><a href="#super和this关键字" class="headerlink" title="super和this关键字"></a>super和this关键字</h3><ul><li>this()和super()不可以同时出现在同一个构造函数中</li><li>this()或super()要放在构造函数第一行</li></ul><h3 id="Android数据存储方式"><a href="#Android数据存储方式" class="headerlink" title="Android数据存储方式"></a>Android数据存储方式</h3><ul><li>SharedPreference</li><li>File</li><li>SQLite</li><li>Content Provider</li><li>网络</li></ul><blockquote><p>题目中说Bundle也可以，但是应该不对<br>Bundle是可以序列化，但是一般不作为存储数据的方式</p></blockquote><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><blockquote><p><strong>×</strong> 当静态注册的广播设置的优先级高于动态注册的广播时，静态注册将先接收到广播</p></blockquote><ul><li>动态广播跟随Activity&#x2F;Application的生命周期，静态广播不受限制。</li><li>非有序广播的情况下，动态广播总是要优先于静态广播</li><li>每次广播被接收后会重新创建BroadcastReceiver对象，并在onReceive方法中执行完时销毁</li></ul><h3 id="Android动画分类"><a href="#Android动画分类" class="headerlink" title="Android动画分类"></a>Android动画分类</h3><h3 id="IntentService（已经弃用）"><a href="#IntentService（已经弃用）" class="headerlink" title="IntentService（已经弃用）"></a>IntentService（已经弃用）</h3><ul><li>对Service的包装</li><li>默认实现onBind，返回null</li><li>包含一个HandlerThread(的looper)，（Service本身不包括线程，运行在主线程）</li><li>持有一个handler，每次start把intent放入msg的obj里，用handler发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">IntentService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceHandler</span><span class="params">(Looper looper)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        onHandleIntent((Intent)msg.obj);</span><br><span class="line">        stopSelf(msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onHandleIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span>; <span class="comment">//运行在WorkerThread中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">(<span class="meta">@Nullable</span> Intent intent, <span class="type">int</span> startId)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">onStartCommand</span><span class="params">(<span class="meta">@Nullable</span> Intent intent, <span class="type">int</span> flags, <span class="type">int</span> startId)</span> &#123;</span><br><span class="line">    onStart(intent, startId);</span><br><span class="line">    <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小米2019秋招安卓开发笔试题（A）"><a href="#小米2019秋招安卓开发笔试题（A）" class="headerlink" title="小米2019秋招安卓开发笔试题（A）"></a>小米2019秋招安卓开发笔试题（A）</h2><h3 id="进制间转换"><a href="#进制间转换" class="headerlink" title="进制间转换"></a>进制间转换</h3><p>设计一个函数， 可以将任意十进制的数， 转换成任意2到9的进制表示的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> in.nextLong();</span><br><span class="line">            <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(n % base);</span><br><span class="line">                n /= base;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.reverse();</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CCNumber"><a href="#CCNumber" class="headerlink" title="CCNumber"></a>CCNumber</h3><p>CC最近对一种整数比较感兴趣，我们暂且把这种整数称为C Number, C Number是指一个整数<br>{C0, C1 … Cn-1} (C0 &gt; 0 , n &gt;&#x3D; 3)， 存在一个Cm（<code>0&lt;m&lt;n-1</code>）满足以下条件:</p><ul><li>Ci-1 &lt; Ci (<code>0&lt;i&lt;=m</code>), Ci代表这个整数中的第i位数字</li><li>Ci&gt;Ci+1(<code>m&lt;=i&lt;n-1</code>)</li><li>如果一个整数里面有相邻的2个C Number的话，我们称这个整数为CC Number（2个C Number不可以有公用的数字Ci，并且2个C Number要紧紧相邻）。</li></ul><p>请在[A,B]区间内找出找出score最大的CCNumber 并输出这个score.(score：CC Number中所有数字的和)</p><h3 id="Activity跳转"><a href="#Activity跳转" class="headerlink" title="Activity跳转"></a>Activity跳转</h3><p>FirstActivity跳转到SecondActivity后，然后点击返回键，以下执行顺序不可能出现的是：</p><p><code>SecondActivity的onPause()</code>-&gt;<code>SecondActivity的onStop()</code>-&gt;<code>SecondActivity的onDestroy()</code>-&gt;<code>FirstActivity的onRestart()</code>-&gt;<code>FirstActivity的onResume()</code></p><p>不会在下一个Activity可见前，把当前Activity变成不可见的，（进入stop&#x2F;destroy）</p><h3 id="ANR"><a href="#ANR" class="headerlink" title="ANR"></a>ANR</h3><p>input事件在5s内没有处理完成会发生ANR<br>前台广播的onReceive处理事务时超过10s会发生ANR<br>后台Service在200s内没有处理完成会发生ANR<br>前台Service在20s内没有处理完成会发生ANR<br>在Activity中，Main线程消息队列中的消息在5秒内没有得到响应</p><h3 id="APP进程"><a href="#APP进程" class="headerlink" title="APP进程"></a>APP进程</h3><ul><li>一个APP可以运行在多个进程<ul><li>在Activity&#x2F;Service中添加不同的进程名<code>android:process=&quot;processName&quot;</code></li><li>每个进程会有一个Application对象</li></ul></li><li>多个APP可以运行在同一进程<ul><li>在Manifest中添加<code>android:sharedUserId=&lt;java package&gt;</code></li><li>在Manifest中添加<code>android:sharedUserLabel=@string/id</code></li><li>在Application中添加<code>android:process=&quot;processName&quot;</code></li></ul></li></ul><h2 id="顺丰科技2019秋招安卓开发工程师笔试客观题合集"><a href="#顺丰科技2019秋招安卓开发工程师笔试客观题合集" class="headerlink" title="顺丰科技2019秋招安卓开发工程师笔试客观题合集"></a>顺丰科技2019秋招安卓开发工程师笔试客观题合集</h2><h3 id="select-into和insert-into"><a href="#select-into和insert-into" class="headerlink" title="select into和insert into"></a>select into和insert into</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xxx <span class="keyword">INTO</span> target_table <span class="keyword">FROM</span> origin_table</span><br></pre></td></tr></table></figure><ul><li>要求执行前表不存在，会自动创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> target_table (filed1, field2, ...) <span class="keyword">VALUES</span> (val1, val2, ...)</span><br></pre></td></tr></table></figure><ul><li>要求执行前表已经存在</li></ul><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><h3 id="简单实现一套view的注入框架（）"><a href="#简单实现一套view的注入框架（）" class="headerlink" title="简单实现一套view的注入框架（）"></a>简单实现一套view的注入框架（）</h3><h2 id="度小满校招Android研发工程师第2批"><a href="#度小满校招Android研发工程师第2批" class="headerlink" title="度小满校招Android研发工程师第2批"></a>度小满校招Android研发工程师第2批</h2><h3 id="近似周期串"><a href="#近似周期串" class="headerlink" title="近似周期串"></a>近似周期串</h3><p>小明发现有的字符串中蕴含着一些规律，但是它们又和普通的周期串有点不一样。例如:ABCABDABDABE。如果以3为周期，可以看到其中 包含“ABC”、“ABD”和“ABE”等子串，其中“ABD”出现了两次。 这些子串两两之间最多只有某一位上的字符不相同，其他位置上的字符都一样。小明将其称为“近似串”，由多个“近似串”组成的字符串称为“近 似周期串”。“近似周期串”中的每一个“近似串”的长度需大于等于2。 需要注意的是“ABCABBACD”并不是一个“近似周期串”。如果以3为周期，其子串包 括“ABC”、“ABB”和“ACD”，“ABB”与“ACD”、“ABC”与“ACD”均存在两个位置上的字符不相同，因此不是“近似周期串”。特别 的，“AAAAAA”也是一个“近似周期串”，因为它满足上述“近似周期串”的定义。 现在给你一个字符串，请编写一个程序判断该字符串是否是以3为周期的“近似周期串”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="keyword">while</span>(n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; s.length()) &#123;</span><br><span class="line">                    ans = ans ^ ((s.charAt(i) - <span class="string">&#x27;A&#x27;</span>) &lt;&lt; <span class="number">2</span>) + ((s.charAt(i+<span class="number">1</span>) - <span class="string">&#x27;A&#x27;</span>) &lt;&lt; <span class="number">1</span>) + (s.charAt(i+<span class="number">2</span>) - <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((ans &amp; (ans-<span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS辅助服务器与DNS主服务器通讯时使用TCP协议</p><h2 id="Android题库"><a href="#Android题库" class="headerlink" title="Android题库"></a>Android题库</h2><h3 id="onNewIntent-的触发时机"><a href="#onNewIntent-的触发时机" class="headerlink" title="onNewIntent()的触发时机"></a>onNewIntent()的触发时机</h3><h3 id="设备管理器权限"><a href="#设备管理器权限" class="headerlink" title="设备管理器权限"></a>设备管理器权限</h3><h3 id="sleep-wait-yield-join的区别"><a href="#sleep-wait-yield-join的区别" class="headerlink" title="sleep,wait,yield,join的区别"></a>sleep,wait,yield,join的区别</h3><p>sleep,yield: 让渡cpu使用权，不释放锁<br>wait: 相当于条件变量，释放锁<br>join: 底层调用了wait</p><h3 id="Hook框架"><a href="#Hook框架" class="headerlink" title="Hook框架"></a>Hook框架</h3><p>xposed,Substrate,Cydia,frida</p><h3 id="dex"><a href="#dex" class="headerlink" title="dex"></a>dex</h3><h3 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a>焦点</h3><p>toast没有焦点</p><h3 id="View绘制流程"><a href="#View绘制流程" class="headerlink" title="View绘制流程"></a>View绘制流程</h3><h3 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h3><h3 id="drawable-xxhdpi等目录"><a href="#drawable-xxhdpi等目录" class="headerlink" title="drawable-xxhdpi等目录"></a>drawable-xxhdpi等目录</h3><h2 id="携程笔试"><a href="#携程笔试" class="headerlink" title="携程笔试"></a>携程笔试</h2><h3 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h3><ul><li><p>给n个数<code>1 &lt;= ai &lt;= 1e6</code>， 求<code>PI(ai!)</code>ai的阶乘的积中因数的个数</p></li><li><p>分解质因数</p></li><li><p>质因数出现次数+1的积就是原来数字的因数个数</p></li><li><p>对数组排序，计算每个数在阶乘中出现的次数，计算每个数的质因数，质因数个数为出现次数</p></li><li><p>计算所有数的质因数出现次数*该数在阶乘中出现的次数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VAL</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="keyword">void</span> <span class="title function_">mapReplace</span><span class="params">(Map&lt;K, V&gt; map, K key, V def, UnaryOperator&lt;V&gt; operator)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        map.put(key, operator.apply(old == <span class="literal">null</span> ? def : old));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        List&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt;= MAX_VAL; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>; j*j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                primes.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                arr[i] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.sort(arr);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">incr</span> <span class="operator">=</span> (arr.length - j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(Collections.binarySearch(primes, arr[j-<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    mapReplace(cnt, arr[j-<span class="number">1</span>], <span class="number">0</span>, (old) -&gt; (old + incr) % MOD);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= primes.size(); i++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[j-<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> primes.get(i-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">while</span>(val % prime == <span class="number">0</span>) &#123;</span><br><span class="line">                        val = val / prime;</span><br><span class="line">                        mapReplace(cnt, prime, <span class="number">0</span>, (old) -&gt; (old + incr) % MOD);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> entry : cnt.entrySet()) &#123;</span><br><span class="line">                ans = (ans * (entry.getValue() + <span class="number">1</span>)) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><!-- 小红书 --><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><p>塔子哥有n个账号，每个账号粉丝数为ai</p><p>这天他又创建了一个新账号，他希望新账号的粉丝数恰好等于x。<br>为此他可以向自己已有账号的粉丝们推荐自己的新账号，这样以来新账号就得到了之前粉丝的关注。<br>他想知道，他最少需要在几个旧账号发“推荐新账号”的文章，可以使得他的新账号粉丝数恰好为 x，除此以外，他可以最多从中选择一个账号多次发“推荐新账号”的文章。</p><p>假设一个旧账号粉丝数为ai，如果仅推荐一次，那么新账号粉丝数增加ai&#x2F;2，如果多以推荐，则粉丝数增加ai</p><blockquote><p>读题读错了，只能选<strong>一个</strong>账号推广多次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; x) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">accounts</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; accounts[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(x+<span class="number">1</span>, n+<span class="number">1</span>)</span></span>; <span class="comment">// 一次</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp1</span><span class="params">(x+<span class="number">1</span>, n+<span class="number">1</span>)</span></span>; <span class="comment">// 有某一个账号是多次的情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = x; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= accounts[i<span class="number">-1</span>]) dp1[j] = <span class="built_in">min</span>(dp1[j], dp[j - accounts[i<span class="number">-1</span>]] + <span class="number">1</span>); <span class="comment">// 该账号多次发布</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt;= accounts[i<span class="number">-1</span>]/<span class="number">2</span>) dp1[j] = <span class="built_in">min</span>(dp1[j], dp1[j - accounts[i<span class="number">-1</span>]/<span class="number">2</span>] + <span class="number">1</span>); <span class="comment">// 上一个账号多次发布，该账号不多次发布</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt;= accounts[i<span class="number">-1</span>]/<span class="number">2</span>) dp[j] = <span class="built_in">min</span>(dp[j], dp[j - accounts[i<span class="number">-1</span>]/<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (<span class="built_in">min</span>(dp[x], dp1[x]) &gt; n ? <span class="number">-1</span> : <span class="built_in">min</span>(dp[x], dp1[x])) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个正整教<code>x</code>，在区间<code>[l, r]</code>中选样一个数<code>y</code>，满定<code>x*y</code>是完全平万数。想知道有多少种选择方案?<br>一共有<code>q</code>次询问</p><p><code>1 &lt;= q &lt;= 1e4</code><br><code>1 &lt;= x &lt;= 1e14</code><br><code>1 &lt;= l, r &lt;= 1e14</code></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>我们要找所有<code>y*x == t*t</code>的数<code>y</code>，也就是找所有的<code>y=t*t/x</code> 且 <code>t*t%x == 0</code></li><li>所有满足<code>t*t%x == 0</code>的数<code>(t*t/x)</code>，<code>(t*t/x)</code>在<code>[1, 1e14]</code>范围内</li><li>也就是<code>t*t=q*x</code> 因为<code>t,q,x</code>都是整数，所以<code>sqrt(q*x)</code>是整数也就是q可以写成<code>i*i*x</code>的形式</li><li>也就是<code>t=i*x</code></li><li>也就是找到所有<code>i*i*x</code>，且在<code>[1, 1e14]</code>范围内</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextLong();</span><br><span class="line">            List&lt;Long&gt; isSquare = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i*i*x &lt;= <span class="number">1e14</span>; i++) &#123;</span><br><span class="line">                isSquare.add(i*i*x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> scanner.nextLong();</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> scanner.nextLong();</span><br><span class="line">                <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> Collections.binarySearch(isSquare, l);</span><br><span class="line">                <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> Collections.binarySearch(isSquare, r);</span><br><span class="line">                <span class="keyword">if</span>(leftIndex &lt; <span class="number">0</span>) leftIndex = -leftIndex-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(rightIndex &lt; <span class="number">0</span>) rightIndex = -rightIndex-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> rightIndex++;</span><br><span class="line">                System.out.println(rightIndex - leftIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2024-3-31"><a href="#2024-3-31" class="headerlink" title="2024.3.31"></a>2024.3.31</h2><!-- 腾讯 --><h3 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h3><p>方阵里面上下左右走找tencent</p><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p>数组分成k组，每组内部异或，求k组异或和最大</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>一个图，加一个边恰好可以连通有几种加法</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>一个数组，分成两段（可空），是否恰好可以重新排列成递增</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>边有RW两色<br>如果一个点周围的边全都是R，则是好点，统计好点的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">match</span> <span class="operator">=</span> <span class="string">&quot;tencent&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] pos = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dfs5</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> len, String[] map)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= n || j &gt;= m || i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(match.charAt(len) != map[i].charAt(j)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">6</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; pos.length - <span class="number">1</span>; k++) &#123;</span><br><span class="line">            ans += dfs5(i + pos[k], j + pos[k+<span class="number">1</span>], n, m, len + <span class="number">1</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">problem5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        String[] map = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">        scanner.nextLine();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map[i] = scanner.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                ans += dfs5(i, j, n, m, <span class="number">0</span>,map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnionSet</span>  &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] set;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionSet</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            set = IntStream.iterate(<span class="number">0</span>, (prev)-&gt;prev+<span class="number">1</span>).limit(n).toArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i == set[i] ? i : (set[i] = find(set[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">            set[find(i)] = find(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">problem3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">UnionSet</span> <span class="variable">unionSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionSet</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            unionSet.union(u-<span class="number">1</span>, v-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; setCnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">part</span> <span class="operator">=</span> unionSet.find(i);</span><br><span class="line">            <span class="keyword">if</span>(!setCnt.containsKey(part)) &#123;</span><br><span class="line">                setCnt.put(part, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setCnt.put(part, setCnt.get(part) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(setCnt.size() != <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> entry : setCnt.entrySet()) &#123;</span><br><span class="line">                diff += entry.getValue();</span><br><span class="line">                ans += (n - diff) * entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// a1 a2 a3 ... an</span></span><br><span class="line">            <span class="comment">// a1*(a2 + a3 + a4 + ... + an)</span></span><br><span class="line">            <span class="comment">// a2*(a3 + a4 + a5 + ... + an)</span></span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">problem2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] input = scanner.nextLine().toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; input.length) &#123;</span><br><span class="line">            <span class="keyword">if</span>(input[i] == <span class="string">&#x27;[&#x27;</span> || input[i] == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(input[i]);</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(input[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; input.length &amp;&amp; input[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; input[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                        cur *= <span class="number">10</span>;</span><br><span class="line">                        cur += input[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.add(cur);</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; input.length) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">if</span>(input[i-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(input[i] == <span class="string">&#x27;,&#x27;</span>) i++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">seg1</span> <span class="operator">=</span> <span class="number">1</span>, seg2;</span><br><span class="line">            <span class="keyword">while</span>(seg1 &lt; list.size() &amp;&amp; list.get(seg1) &gt; list.get(seg1-<span class="number">1</span>)) &#123;</span><br><span class="line">                seg1++;</span><br><span class="line">            &#125;</span><br><span class="line">            seg2 = seg1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(seg2 &lt; list.size() &amp;&amp; list.get(seg2) &gt; list.get(seg2-<span class="number">1</span>)) &#123;</span><br><span class="line">                seg2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(seg1 == list.size()) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seg2 != list.size())&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(list.get(list.size() - <span class="number">1</span>) &lt; list.get(<span class="number">0</span>)) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; input.length) &#123;</span><br><span class="line">                <span class="keyword">if</span>(input[i] != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">problem1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">edge</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">boolean</span>[] res = <span class="keyword">new</span> <span class="title class_">boolean</span>[node];</span><br><span class="line">        Arrays.fill(res, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span>(c.equals(<span class="string">&quot;R&quot;</span>)) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[u-<span class="number">1</span>] = res[v-<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">problem4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][k+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] xorSum = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">            xorSum[i+<span class="number">1</span>] = arr[i] ^ xorSum[i];</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = xorSum[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> j-<span class="number">1</span>; m &lt; i; m++) &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[m][j-<span class="number">1</span>] + (xorSum[i] ^ xorSum[m]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dp[i][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">            problem5();</span><br><span class="line">            problem4();</span><br><span class="line">            problem3();</span><br><span class="line">            problem2();</span><br><span class="line">            problem1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;小米2019秋招安卓开发笔试题（B）&quot;&gt;&lt;a href=&quot;#小米2019秋招安卓开发笔试题（B）&quot; class=&quot;headerlink&quot; title=&quot;小米2019秋招安卓开发笔试题（B）&quot;&gt;&lt;/a&gt;小米2019秋招安卓开发笔试题（B）&lt;/h2&gt;&lt;h3 id=&quot;21-最少立方数之和&quot;&gt;&lt;a href=&quot;#21-最少立方数之和&quot; class=&quot;headerlink&quot; title=&quot;21. 最少立方数之和&quot;&gt;&lt;/a&gt;21. 最少立方数之和&lt;/h3&gt;&lt;p&gt;给出一个数字N（&lt;code&gt;0&amp;lt;N&amp;lt;1000000&lt;/code&gt;）,将N写成立方数和的形式，求出需要的最少立方数个数。&lt;br&gt;例如N&amp;#x3D;17，1+8+8 &amp;#x3D; 17，最少需要3个立方数，则输出3。&lt;br&gt;N&amp;#x3D; 28,1+1+1+1+8+8+8&amp;#x3D;28, 需要7个立方数，1+27&amp;#x3D;28,需要2个立方数，所以最少立方数为2，则输出2。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意类名必须为 Main, 不要有任何 package xxx 信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Main&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; cubs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; cubNum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cubs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i*i*i &amp;lt;= &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cubs.add(i*i*i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cubNum = cubs.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 注意 hasNext 和 hasNextLine 的区别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (in.hasNextInt()) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 注意 while 处理多个 case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; in.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Collections.binarySearch(cubs, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                index = -index - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;unreachable&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;int&lt;/span&gt;[n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Arrays.fill(dp, Integer.MAX_VALUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= index+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; cubs.get(j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dp[i] = Math.min(dp[i], dp[i - cubs.get(j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(dp[n]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;完全背包，从所有立方数里选数，取数目最小的情况&lt;/p&gt;
&lt;h3 id=&quot;资产包打包&quot;&gt;&lt;a href=&quot;#资产包打包&quot; class=&quot;headerlink&quot; title=&quot;资产包打包&quot;&gt;&lt;/a&gt;资产包打包&lt;/h3&gt;</summary>
    
    
    
    <category term="牛客" scheme="https://jingtianer.github.io/home/categories/%E7%89%9B%E5%AE%A2/"/>
    
    <category term="刷题" scheme="https://jingtianer.github.io/home/categories/%E7%89%9B%E5%AE%A2/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="牛客" scheme="https://jingtianer.github.io/home/tags/%E7%89%9B%E5%AE%A2/"/>
    
    <category term="刷题" scheme="https://jingtianer.github.io/home/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
